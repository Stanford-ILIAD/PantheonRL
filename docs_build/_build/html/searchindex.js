Search.setIndex({"docnames": ["_autosummary/pantheonrl", "_autosummary/pantheonrl.algos", "_autosummary/pantheonrl.algos.adap", "_autosummary/pantheonrl.algos.adap.adap_learn", "_autosummary/pantheonrl.algos.adap.adap_learn.ADAP", "_autosummary/pantheonrl.algos.adap.agent", "_autosummary/pantheonrl.algos.adap.agent.AdapAgent", "_autosummary/pantheonrl.algos.adap.policies", "_autosummary/pantheonrl.algos.adap.policies.AdapPolicy", "_autosummary/pantheonrl.algos.adap.policies.AdapPolicyMult", "_autosummary/pantheonrl.algos.adap.policies.MultModel", "_autosummary/pantheonrl.algos.adap.util", "_autosummary/pantheonrl.algos.adap.util.get_L2_sphere", "_autosummary/pantheonrl.algos.adap.util.get_categorical", "_autosummary/pantheonrl.algos.adap.util.get_context_kl_loss", "_autosummary/pantheonrl.algos.adap.util.get_natural_number", "_autosummary/pantheonrl.algos.adap.util.get_positive_square", "_autosummary/pantheonrl.algos.adap.util.get_unit_square", "_autosummary/pantheonrl.algos.adap.util.kl_divergence", "_autosummary/pantheonrl.algos.bc", "_autosummary/pantheonrl.algos.bc.BC", "_autosummary/pantheonrl.algos.bc.BCShell", "_autosummary/pantheonrl.algos.bc.ConstantLRSchedule", "_autosummary/pantheonrl.algos.bc.EpochOrBatchIteratorWithProgress", "_autosummary/pantheonrl.algos.bc.reconstruct_policy", "_autosummary/pantheonrl.algos.modular", "_autosummary/pantheonrl.algos.modular.learn", "_autosummary/pantheonrl.algos.modular.learn.ModularAlgorithm", "_autosummary/pantheonrl.algos.modular.policies", "_autosummary/pantheonrl.algos.modular.policies.ModularPolicy", "_autosummary/pantheonrl.common", "_autosummary/pantheonrl.common.agents", "_autosummary/pantheonrl.common.agents.Agent", "_autosummary/pantheonrl.common.agents.DummyAgent", "_autosummary/pantheonrl.common.agents.OffPolicyAgent", "_autosummary/pantheonrl.common.agents.OnPolicyAgent", "_autosummary/pantheonrl.common.agents.RecordingAgentWrapper", "_autosummary/pantheonrl.common.agents.StaticPolicyAgent", "_autosummary/pantheonrl.common.multiagentenv", "_autosummary/pantheonrl.common.multiagentenv.DummyEnv", "_autosummary/pantheonrl.common.multiagentenv.KillEnvException", "_autosummary/pantheonrl.common.multiagentenv.MultiAgentEnv", "_autosummary/pantheonrl.common.multiagentenv.PlayerException", "_autosummary/pantheonrl.common.multiagentenv.SimultaneousEnv", "_autosummary/pantheonrl.common.multiagentenv.TurnBasedEnv", "_autosummary/pantheonrl.common.observation", "_autosummary/pantheonrl.common.observation.Observation", "_autosummary/pantheonrl.common.observation.extract_obs", "_autosummary/pantheonrl.common.observation.extract_partial_obs", "_autosummary/pantheonrl.common.trajsaver", "_autosummary/pantheonrl.common.trajsaver.MultiTransitions", "_autosummary/pantheonrl.common.trajsaver.SimultaneousTransitions", "_autosummary/pantheonrl.common.trajsaver.TransitionsMinimal", "_autosummary/pantheonrl.common.trajsaver.TurnBasedTransitions", "_autosummary/pantheonrl.common.trajsaver.dataclass_quick_asdict", "_autosummary/pantheonrl.common.trajsaver.transitions_collate_fn", "_autosummary/pantheonrl.common.util", "_autosummary/pantheonrl.common.util.FeedForward32Policy", "_autosummary/pantheonrl.common.util.SpaceException", "_autosummary/pantheonrl.common.util.action_from_policy", "_autosummary/pantheonrl.common.util.calculate_space", "_autosummary/pantheonrl.common.util.clip_actions", "_autosummary/pantheonrl.common.util.get_default_obs", "_autosummary/pantheonrl.common.util.get_space_size", "_autosummary/pantheonrl.common.util.resample_noise", "_autosummary/pantheonrl.common.wrappers", "_autosummary/pantheonrl.common.wrappers.HistoryQueue", "_autosummary/pantheonrl.common.wrappers.MultiRecorder", "_autosummary/pantheonrl.common.wrappers.SimultaneousFrameStack", "_autosummary/pantheonrl.common.wrappers.SimultaneousRecorder", "_autosummary/pantheonrl.common.wrappers.TurnBasedFrameStack", "_autosummary/pantheonrl.common.wrappers.TurnBasedRecorder", "_autosummary/pantheonrl.common.wrappers.frame_wrap", "_autosummary/pantheonrl.common.wrappers.recorder_wrap", "_autosummary/pantheonrl.envs", "_autosummary/pantheonrl.envs.blockworldgym", "_autosummary/pantheonrl.envs.blockworldgym.blockworld", "_autosummary/pantheonrl.envs.blockworldgym.blockworld.BlockEnv", "_autosummary/pantheonrl.envs.blockworldgym.blockworld.DefaultConstructorAgent", "_autosummary/pantheonrl.envs.blockworldgym.gridutils", "_autosummary/pantheonrl.envs.blockworldgym.gridutils.drop_random", "_autosummary/pantheonrl.envs.blockworldgym.gridutils.generate_random_world", "_autosummary/pantheonrl.envs.blockworldgym.gridutils.gravity", "_autosummary/pantheonrl.envs.blockworldgym.gridutils.matches", "_autosummary/pantheonrl.envs.blockworldgym.gridutils.place", "_autosummary/pantheonrl.envs.blockworldgym.rendering", "_autosummary/pantheonrl.envs.blockworldgym.rendering.Attr", "_autosummary/pantheonrl.envs.blockworldgym.rendering.Color", "_autosummary/pantheonrl.envs.blockworldgym.rendering.Compound", "_autosummary/pantheonrl.envs.blockworldgym.rendering.FilledPolygon", "_autosummary/pantheonrl.envs.blockworldgym.rendering.Geom", "_autosummary/pantheonrl.envs.blockworldgym.rendering.Image", "_autosummary/pantheonrl.envs.blockworldgym.rendering.Line", "_autosummary/pantheonrl.envs.blockworldgym.rendering.LineStyle", "_autosummary/pantheonrl.envs.blockworldgym.rendering.LineWidth", "_autosummary/pantheonrl.envs.blockworldgym.rendering.Point", "_autosummary/pantheonrl.envs.blockworldgym.rendering.PolyLine", "_autosummary/pantheonrl.envs.blockworldgym.rendering.SimpleImageViewer", "_autosummary/pantheonrl.envs.blockworldgym.rendering.Transform", "_autosummary/pantheonrl.envs.blockworldgym.rendering.Viewer", "_autosummary/pantheonrl.envs.blockworldgym.rendering.get_display", "_autosummary/pantheonrl.envs.blockworldgym.rendering.get_window", "_autosummary/pantheonrl.envs.blockworldgym.rendering.make_capsule", "_autosummary/pantheonrl.envs.blockworldgym.rendering.make_circle", "_autosummary/pantheonrl.envs.blockworldgym.rendering.make_polygon", "_autosummary/pantheonrl.envs.blockworldgym.rendering.make_polyline", "_autosummary/pantheonrl.envs.blockworldgym.simpleblockworld", "_autosummary/pantheonrl.envs.blockworldgym.simpleblockworld.SBWDefaultAgent", "_autosummary/pantheonrl.envs.blockworldgym.simpleblockworld.SBWEasyPartner", "_autosummary/pantheonrl.envs.blockworldgym.simpleblockworld.SimpleBlockEnv", "_autosummary/pantheonrl.envs.blockworldgym.simpleblockworld.generate_grid_world", "_autosummary/pantheonrl.envs.blockworldgym.simpleblockworld.random_block", "_autosummary/pantheonrl.envs.liargym", "_autosummary/pantheonrl.envs.liargym.liar", "_autosummary/pantheonrl.envs.liargym.liar.LiarDefaultAgent", "_autosummary/pantheonrl.envs.liargym.liar.LiarEnv", "_autosummary/pantheonrl.envs.liargym.liar.randRoll", "_autosummary/pantheonrl.envs.pettingzoo", "_autosummary/pantheonrl.envs.pettingzoo.PettingZooAECWrapper", "_autosummary/pantheonrl.envs.rpsgym", "_autosummary/pantheonrl.envs.rpsgym.rps", "_autosummary/pantheonrl.envs.rpsgym.rps.RPSEnv", "_autosummary/pantheonrl.envs.rpsgym.rps.RPSWeightedAgent", "api", "guide/install", "index"], "filenames": ["_autosummary/pantheonrl.rst", "_autosummary/pantheonrl.algos.rst", "_autosummary/pantheonrl.algos.adap.rst", "_autosummary/pantheonrl.algos.adap.adap_learn.rst", "_autosummary/pantheonrl.algos.adap.adap_learn.ADAP.rst", "_autosummary/pantheonrl.algos.adap.agent.rst", "_autosummary/pantheonrl.algos.adap.agent.AdapAgent.rst", "_autosummary/pantheonrl.algos.adap.policies.rst", "_autosummary/pantheonrl.algos.adap.policies.AdapPolicy.rst", "_autosummary/pantheonrl.algos.adap.policies.AdapPolicyMult.rst", "_autosummary/pantheonrl.algos.adap.policies.MultModel.rst", "_autosummary/pantheonrl.algos.adap.util.rst", "_autosummary/pantheonrl.algos.adap.util.get_L2_sphere.rst", "_autosummary/pantheonrl.algos.adap.util.get_categorical.rst", "_autosummary/pantheonrl.algos.adap.util.get_context_kl_loss.rst", "_autosummary/pantheonrl.algos.adap.util.get_natural_number.rst", "_autosummary/pantheonrl.algos.adap.util.get_positive_square.rst", "_autosummary/pantheonrl.algos.adap.util.get_unit_square.rst", "_autosummary/pantheonrl.algos.adap.util.kl_divergence.rst", "_autosummary/pantheonrl.algos.bc.rst", "_autosummary/pantheonrl.algos.bc.BC.rst", "_autosummary/pantheonrl.algos.bc.BCShell.rst", "_autosummary/pantheonrl.algos.bc.ConstantLRSchedule.rst", "_autosummary/pantheonrl.algos.bc.EpochOrBatchIteratorWithProgress.rst", "_autosummary/pantheonrl.algos.bc.reconstruct_policy.rst", "_autosummary/pantheonrl.algos.modular.rst", "_autosummary/pantheonrl.algos.modular.learn.rst", "_autosummary/pantheonrl.algos.modular.learn.ModularAlgorithm.rst", "_autosummary/pantheonrl.algos.modular.policies.rst", "_autosummary/pantheonrl.algos.modular.policies.ModularPolicy.rst", "_autosummary/pantheonrl.common.rst", "_autosummary/pantheonrl.common.agents.rst", "_autosummary/pantheonrl.common.agents.Agent.rst", "_autosummary/pantheonrl.common.agents.DummyAgent.rst", "_autosummary/pantheonrl.common.agents.OffPolicyAgent.rst", "_autosummary/pantheonrl.common.agents.OnPolicyAgent.rst", "_autosummary/pantheonrl.common.agents.RecordingAgentWrapper.rst", "_autosummary/pantheonrl.common.agents.StaticPolicyAgent.rst", "_autosummary/pantheonrl.common.multiagentenv.rst", "_autosummary/pantheonrl.common.multiagentenv.DummyEnv.rst", "_autosummary/pantheonrl.common.multiagentenv.KillEnvException.rst", "_autosummary/pantheonrl.common.multiagentenv.MultiAgentEnv.rst", "_autosummary/pantheonrl.common.multiagentenv.PlayerException.rst", "_autosummary/pantheonrl.common.multiagentenv.SimultaneousEnv.rst", "_autosummary/pantheonrl.common.multiagentenv.TurnBasedEnv.rst", "_autosummary/pantheonrl.common.observation.rst", "_autosummary/pantheonrl.common.observation.Observation.rst", "_autosummary/pantheonrl.common.observation.extract_obs.rst", "_autosummary/pantheonrl.common.observation.extract_partial_obs.rst", "_autosummary/pantheonrl.common.trajsaver.rst", "_autosummary/pantheonrl.common.trajsaver.MultiTransitions.rst", "_autosummary/pantheonrl.common.trajsaver.SimultaneousTransitions.rst", "_autosummary/pantheonrl.common.trajsaver.TransitionsMinimal.rst", "_autosummary/pantheonrl.common.trajsaver.TurnBasedTransitions.rst", "_autosummary/pantheonrl.common.trajsaver.dataclass_quick_asdict.rst", "_autosummary/pantheonrl.common.trajsaver.transitions_collate_fn.rst", "_autosummary/pantheonrl.common.util.rst", "_autosummary/pantheonrl.common.util.FeedForward32Policy.rst", "_autosummary/pantheonrl.common.util.SpaceException.rst", "_autosummary/pantheonrl.common.util.action_from_policy.rst", "_autosummary/pantheonrl.common.util.calculate_space.rst", "_autosummary/pantheonrl.common.util.clip_actions.rst", "_autosummary/pantheonrl.common.util.get_default_obs.rst", "_autosummary/pantheonrl.common.util.get_space_size.rst", "_autosummary/pantheonrl.common.util.resample_noise.rst", "_autosummary/pantheonrl.common.wrappers.rst", "_autosummary/pantheonrl.common.wrappers.HistoryQueue.rst", "_autosummary/pantheonrl.common.wrappers.MultiRecorder.rst", "_autosummary/pantheonrl.common.wrappers.SimultaneousFrameStack.rst", "_autosummary/pantheonrl.common.wrappers.SimultaneousRecorder.rst", "_autosummary/pantheonrl.common.wrappers.TurnBasedFrameStack.rst", "_autosummary/pantheonrl.common.wrappers.TurnBasedRecorder.rst", "_autosummary/pantheonrl.common.wrappers.frame_wrap.rst", "_autosummary/pantheonrl.common.wrappers.recorder_wrap.rst", "_autosummary/pantheonrl.envs.rst", "_autosummary/pantheonrl.envs.blockworldgym.rst", "_autosummary/pantheonrl.envs.blockworldgym.blockworld.rst", "_autosummary/pantheonrl.envs.blockworldgym.blockworld.BlockEnv.rst", "_autosummary/pantheonrl.envs.blockworldgym.blockworld.DefaultConstructorAgent.rst", "_autosummary/pantheonrl.envs.blockworldgym.gridutils.rst", "_autosummary/pantheonrl.envs.blockworldgym.gridutils.drop_random.rst", "_autosummary/pantheonrl.envs.blockworldgym.gridutils.generate_random_world.rst", "_autosummary/pantheonrl.envs.blockworldgym.gridutils.gravity.rst", "_autosummary/pantheonrl.envs.blockworldgym.gridutils.matches.rst", "_autosummary/pantheonrl.envs.blockworldgym.gridutils.place.rst", "_autosummary/pantheonrl.envs.blockworldgym.rendering.rst", "_autosummary/pantheonrl.envs.blockworldgym.rendering.Attr.rst", "_autosummary/pantheonrl.envs.blockworldgym.rendering.Color.rst", "_autosummary/pantheonrl.envs.blockworldgym.rendering.Compound.rst", "_autosummary/pantheonrl.envs.blockworldgym.rendering.FilledPolygon.rst", "_autosummary/pantheonrl.envs.blockworldgym.rendering.Geom.rst", "_autosummary/pantheonrl.envs.blockworldgym.rendering.Image.rst", "_autosummary/pantheonrl.envs.blockworldgym.rendering.Line.rst", "_autosummary/pantheonrl.envs.blockworldgym.rendering.LineStyle.rst", "_autosummary/pantheonrl.envs.blockworldgym.rendering.LineWidth.rst", "_autosummary/pantheonrl.envs.blockworldgym.rendering.Point.rst", "_autosummary/pantheonrl.envs.blockworldgym.rendering.PolyLine.rst", "_autosummary/pantheonrl.envs.blockworldgym.rendering.SimpleImageViewer.rst", "_autosummary/pantheonrl.envs.blockworldgym.rendering.Transform.rst", "_autosummary/pantheonrl.envs.blockworldgym.rendering.Viewer.rst", "_autosummary/pantheonrl.envs.blockworldgym.rendering.get_display.rst", "_autosummary/pantheonrl.envs.blockworldgym.rendering.get_window.rst", "_autosummary/pantheonrl.envs.blockworldgym.rendering.make_capsule.rst", "_autosummary/pantheonrl.envs.blockworldgym.rendering.make_circle.rst", "_autosummary/pantheonrl.envs.blockworldgym.rendering.make_polygon.rst", "_autosummary/pantheonrl.envs.blockworldgym.rendering.make_polyline.rst", "_autosummary/pantheonrl.envs.blockworldgym.simpleblockworld.rst", "_autosummary/pantheonrl.envs.blockworldgym.simpleblockworld.SBWDefaultAgent.rst", "_autosummary/pantheonrl.envs.blockworldgym.simpleblockworld.SBWEasyPartner.rst", "_autosummary/pantheonrl.envs.blockworldgym.simpleblockworld.SimpleBlockEnv.rst", "_autosummary/pantheonrl.envs.blockworldgym.simpleblockworld.generate_grid_world.rst", "_autosummary/pantheonrl.envs.blockworldgym.simpleblockworld.random_block.rst", "_autosummary/pantheonrl.envs.liargym.rst", "_autosummary/pantheonrl.envs.liargym.liar.rst", "_autosummary/pantheonrl.envs.liargym.liar.LiarDefaultAgent.rst", "_autosummary/pantheonrl.envs.liargym.liar.LiarEnv.rst", "_autosummary/pantheonrl.envs.liargym.liar.randRoll.rst", "_autosummary/pantheonrl.envs.pettingzoo.rst", "_autosummary/pantheonrl.envs.pettingzoo.PettingZooAECWrapper.rst", "_autosummary/pantheonrl.envs.rpsgym.rst", "_autosummary/pantheonrl.envs.rpsgym.rps.rst", "_autosummary/pantheonrl.envs.rpsgym.rps.RPSEnv.rst", "_autosummary/pantheonrl.envs.rpsgym.rps.RPSWeightedAgent.rst", "api.rst", "guide/install.rst", "index.rst"], "titles": ["pantheonrl", "pantheonrl.algos", "pantheonrl.algos.adap", "pantheonrl.algos.adap.adap_learn", "pantheonrl.algos.adap.adap_learn.ADAP", "pantheonrl.algos.adap.agent", "pantheonrl.algos.adap.agent.AdapAgent", "pantheonrl.algos.adap.policies", "pantheonrl.algos.adap.policies.AdapPolicy", "pantheonrl.algos.adap.policies.AdapPolicyMult", "pantheonrl.algos.adap.policies.MultModel", "pantheonrl.algos.adap.util", "pantheonrl.algos.adap.util.get_L2_sphere", "pantheonrl.algos.adap.util.get_categorical", "pantheonrl.algos.adap.util.get_context_kl_loss", "pantheonrl.algos.adap.util.get_natural_number", "pantheonrl.algos.adap.util.get_positive_square", "pantheonrl.algos.adap.util.get_unit_square", "pantheonrl.algos.adap.util.kl_divergence", "pantheonrl.algos.bc", "pantheonrl.algos.bc.BC", "pantheonrl.algos.bc.BCShell", "pantheonrl.algos.bc.ConstantLRSchedule", "pantheonrl.algos.bc.EpochOrBatchIteratorWithProgress", "pantheonrl.algos.bc.reconstruct_policy", "pantheonrl.algos.modular", "pantheonrl.algos.modular.learn", "pantheonrl.algos.modular.learn.ModularAlgorithm", "pantheonrl.algos.modular.policies", "pantheonrl.algos.modular.policies.ModularPolicy", "pantheonrl.common", "pantheonrl.common.agents", "pantheonrl.common.agents.Agent", "pantheonrl.common.agents.DummyAgent", "pantheonrl.common.agents.OffPolicyAgent", "pantheonrl.common.agents.OnPolicyAgent", "pantheonrl.common.agents.RecordingAgentWrapper", "pantheonrl.common.agents.StaticPolicyAgent", "pantheonrl.common.multiagentenv", "pantheonrl.common.multiagentenv.DummyEnv", "pantheonrl.common.multiagentenv.KillEnvException", "pantheonrl.common.multiagentenv.MultiAgentEnv", "pantheonrl.common.multiagentenv.PlayerException", "pantheonrl.common.multiagentenv.SimultaneousEnv", "pantheonrl.common.multiagentenv.TurnBasedEnv", "pantheonrl.common.observation", "pantheonrl.common.observation.Observation", "pantheonrl.common.observation.extract_obs", "pantheonrl.common.observation.extract_partial_obs", "pantheonrl.common.trajsaver", "pantheonrl.common.trajsaver.MultiTransitions", "pantheonrl.common.trajsaver.SimultaneousTransitions", "pantheonrl.common.trajsaver.TransitionsMinimal", "pantheonrl.common.trajsaver.TurnBasedTransitions", "pantheonrl.common.trajsaver.dataclass_quick_asdict", "pantheonrl.common.trajsaver.transitions_collate_fn", "pantheonrl.common.util", "pantheonrl.common.util.FeedForward32Policy", "pantheonrl.common.util.SpaceException", "pantheonrl.common.util.action_from_policy", "pantheonrl.common.util.calculate_space", "pantheonrl.common.util.clip_actions", "pantheonrl.common.util.get_default_obs", "pantheonrl.common.util.get_space_size", "pantheonrl.common.util.resample_noise", "pantheonrl.common.wrappers", "pantheonrl.common.wrappers.HistoryQueue", "pantheonrl.common.wrappers.MultiRecorder", "pantheonrl.common.wrappers.SimultaneousFrameStack", "pantheonrl.common.wrappers.SimultaneousRecorder", "pantheonrl.common.wrappers.TurnBasedFrameStack", "pantheonrl.common.wrappers.TurnBasedRecorder", "pantheonrl.common.wrappers.frame_wrap", "pantheonrl.common.wrappers.recorder_wrap", "pantheonrl.envs", "pantheonrl.envs.blockworldgym", "pantheonrl.envs.blockworldgym.blockworld", "pantheonrl.envs.blockworldgym.blockworld.BlockEnv", "pantheonrl.envs.blockworldgym.blockworld.DefaultConstructorAgent", "pantheonrl.envs.blockworldgym.gridutils", "pantheonrl.envs.blockworldgym.gridutils.drop_random", "pantheonrl.envs.blockworldgym.gridutils.generate_random_world", "pantheonrl.envs.blockworldgym.gridutils.gravity", "pantheonrl.envs.blockworldgym.gridutils.matches", "pantheonrl.envs.blockworldgym.gridutils.place", "pantheonrl.envs.blockworldgym.rendering", "pantheonrl.envs.blockworldgym.rendering.Attr", "pantheonrl.envs.blockworldgym.rendering.Color", "pantheonrl.envs.blockworldgym.rendering.Compound", "pantheonrl.envs.blockworldgym.rendering.FilledPolygon", "pantheonrl.envs.blockworldgym.rendering.Geom", "pantheonrl.envs.blockworldgym.rendering.Image", "pantheonrl.envs.blockworldgym.rendering.Line", "pantheonrl.envs.blockworldgym.rendering.LineStyle", "pantheonrl.envs.blockworldgym.rendering.LineWidth", "pantheonrl.envs.blockworldgym.rendering.Point", "pantheonrl.envs.blockworldgym.rendering.PolyLine", "pantheonrl.envs.blockworldgym.rendering.SimpleImageViewer", "pantheonrl.envs.blockworldgym.rendering.Transform", "pantheonrl.envs.blockworldgym.rendering.Viewer", "pantheonrl.envs.blockworldgym.rendering.get_display", "pantheonrl.envs.blockworldgym.rendering.get_window", "pantheonrl.envs.blockworldgym.rendering.make_capsule", "pantheonrl.envs.blockworldgym.rendering.make_circle", "pantheonrl.envs.blockworldgym.rendering.make_polygon", "pantheonrl.envs.blockworldgym.rendering.make_polyline", "pantheonrl.envs.blockworldgym.simpleblockworld", "pantheonrl.envs.blockworldgym.simpleblockworld.SBWDefaultAgent", "pantheonrl.envs.blockworldgym.simpleblockworld.SBWEasyPartner", "pantheonrl.envs.blockworldgym.simpleblockworld.SimpleBlockEnv", "pantheonrl.envs.blockworldgym.simpleblockworld.generate_grid_world", "pantheonrl.envs.blockworldgym.simpleblockworld.random_block", "pantheonrl.envs.liargym", "pantheonrl.envs.liargym.liar", "pantheonrl.envs.liargym.liar.LiarDefaultAgent", "pantheonrl.envs.liargym.liar.LiarEnv", "pantheonrl.envs.liargym.liar.randRoll", "pantheonrl.envs.pettingzoo", "pantheonrl.envs.pettingzoo.PettingZooAECWrapper", "pantheonrl.envs.rpsgym", "pantheonrl.envs.rpsgym.rps", "pantheonrl.envs.rpsgym.rps.RPSEnv", "pantheonrl.envs.rpsgym.rps.RPSWeightedAgent", "&lt;no title&gt;", "Installation", "PantheonRL Docs"], "terms": {"i": [0, 4, 6, 8, 9, 10, 20, 27, 29, 32, 33, 34, 35, 36, 39, 40, 41, 43, 44, 46, 52, 54, 55, 57, 58, 60, 66, 68, 69, 70, 71, 77, 78, 107, 108, 109, 114, 115, 118, 121, 122, 124, 125], "packag": [0, 122, 125], "train": [0, 4, 6, 8, 9, 10, 19, 20, 27, 29, 32, 33, 34, 35, 36, 57, 78, 107, 108, 114, 122, 125], "test": [0, 125], "multi": [0, 8, 9, 10, 29, 32, 41, 57, 125], "agent": [0, 4, 27, 39, 41, 43, 44, 46, 47, 48, 52, 68, 69, 70, 71, 77, 78, 107, 108, 109, 114, 115, 118, 121, 122, 125], "reinforc": [0, 39, 125], "learn": [0, 4, 6, 19, 20, 22, 29, 32, 33, 34, 35, 37, 39, 78, 107, 108, 114, 122, 125], "environ": [0, 4, 20, 27, 32, 36, 39, 41, 42, 43, 44, 46, 62, 68, 69, 70, 71, 77, 109, 115, 118, 121, 124, 125], "The": [0, 4, 6, 8, 9, 10, 23, 27, 29, 32, 33, 34, 35, 36, 37, 39, 41, 43, 44, 52, 57, 59, 61, 64, 66, 68, 69, 70, 71, 77, 78, 107, 108, 109, 114, 115, 118, 121, 122, 125], "goal": [0, 39, 125], "provid": [0, 8, 9, 10, 20, 23, 29, 39, 41, 43, 44, 46, 57, 68, 69, 70, 71, 77, 101, 109, 115, 118, 121, 125], "modular": [0, 125], "extens": [0, 124, 125], "framework": [0, 85, 125], "polici": [0, 4, 14, 19, 20, 21, 24, 27, 34, 35, 37, 39, 41, 43, 44, 57, 59, 61, 68, 69, 70, 71, 77, 109, 115, 118, 121, 125], "fine": [0, 125], "tune": [0, 125], "ad": [0, 6, 8, 9, 10, 29, 35, 57, 66, 125], "hoc": [0, 125], "pair": [0, 19, 20, 32, 33, 36, 78, 107, 108, 114, 122, 125], "more": [0, 8, 9, 10, 29, 57, 124, 125], "built": [0, 125], "support": [0, 39, 41, 43, 44, 68, 69, 70, 71, 77, 100, 109, 115, 118, 121, 125], "stabl": [0, 4, 27, 124, 125], "baselines3": [0, 4, 27, 124, 125], "sb3": [0, 47, 125], "allow": [0, 8, 9, 10, 29, 57, 125], "direct": [0, 8, 9, 10, 29, 57, 125], "access": [0, 8, 9, 10, 29, 57, 125], "mani": [0, 125], "": [0, 4, 6, 8, 9, 10, 20, 27, 29, 34, 35, 36, 37, 39, 41, 43, 44, 50, 51, 52, 53, 54, 55, 57, 64, 68, 69, 70, 71, 77, 109, 115, 118, 121, 122, 125], "standard": [0, 29, 33, 125], "rl": [0, 4, 27, 125], "algorithm": [0, 4, 6, 19, 20, 27, 29, 33, 34, 35, 39, 125], "ppo": [0, 4, 8, 9, 27, 29, 35, 57, 125], "current": [0, 4, 8, 9, 10, 27, 29, 39, 41, 43, 44, 57, 68, 69, 70, 71, 77, 109, 115, 118, 121, 125], "follow": [0, 8, 9, 10, 29, 57, 124, 125], "decentr": [0, 125], "paradigm": [0, 39, 125], "each": [0, 4, 8, 9, 10, 20, 27, 29, 32, 33, 39, 41, 43, 44, 52, 57, 68, 69, 70, 71, 77, 78, 107, 108, 109, 114, 115, 118, 121, 122, 125], "equip": [0, 125], "its": [0, 6, 8, 9, 10, 29, 34, 35, 52, 57, 125], "own": [0, 8, 9, 10, 29, 57, 125], "replai": [0, 125], "buffer": [0, 4, 6, 8, 9, 10, 27, 29, 34, 35, 36, 57, 66, 125], "updat": [0, 4, 6, 8, 9, 10, 27, 29, 32, 33, 34, 35, 36, 37, 39, 57, 78, 107, 108, 114, 122, 124, 125], "object": [0, 4, 8, 9, 10, 20, 21, 22, 23, 27, 29, 36, 39, 41, 43, 44, 46, 57, 66, 68, 69, 70, 71, 77, 86, 90, 97, 99, 100, 109, 115, 118, 121, 125], "ar": [0, 6, 8, 9, 10, 29, 32, 33, 34, 35, 39, 41, 42, 43, 44, 46, 52, 57, 68, 69, 70, 71, 77, 78, 107, 108, 109, 114, 115, 118, 121, 122, 125], "design": [0, 8, 9, 10, 29, 57, 125], "easili": [0, 125], "manipul": [0, 125], "thei": [0, 8, 9, 10, 29, 57, 125], "can": [0, 4, 8, 9, 10, 20, 23, 27, 29, 32, 33, 36, 39, 41, 43, 44, 57, 68, 69, 70, 71, 77, 78, 107, 108, 109, 114, 115, 118, 121, 122, 124, 125], "save": [0, 4, 6, 8, 9, 10, 20, 24, 27, 29, 34, 35, 57, 66, 125], "load": [0, 4, 8, 9, 20, 24, 27, 29, 57, 125], "plug": [0, 125], "differ": [0, 4, 8, 9, 10, 27, 29, 39, 57, 125], "procedur": [0, 125], "self": [0, 8, 9, 10, 20, 29, 57, 125], "plai": [0, 125], "cross": [0, 125], "round": [0, 41, 43, 44, 68, 69, 70, 71, 77, 109, 115, 118, 121, 125], "robin": [0, 41, 43, 44, 68, 69, 70, 71, 77, 109, 115, 118, 121, 125], "finetun": [0, 8, 9, 10, 29, 57, 125], "class": [3, 4, 5, 6, 7, 8, 9, 10, 19, 20, 21, 22, 23, 26, 27, 28, 29, 31, 32, 33, 34, 35, 36, 37, 38, 39, 41, 43, 44, 45, 46, 49, 50, 51, 52, 53, 56, 57, 65, 66, 67, 68, 69, 70, 71, 76, 77, 78, 85, 86, 87, 88, 89, 90, 91, 92, 93, 94, 95, 96, 97, 98, 99, 106, 107, 108, 109, 113, 114, 115, 117, 118, 120, 121, 122], "env": [4, 8, 9, 10, 27, 29, 39, 41, 43, 44, 57, 62, 68, 69, 70, 71, 72, 73, 125], "learning_r": [4, 27], "0": [4, 8, 9, 10, 15, 20, 22, 27, 29, 39, 41, 43, 44, 57, 68, 69, 70, 71, 77, 92, 98, 100, 109, 115, 118, 121], "0003": [4, 27], "n_step": [4, 27, 41, 43, 44, 64, 68, 69, 70, 71, 77, 109, 115, 118, 121], "2048": [4, 27], "batch_siz": [4, 27, 52], "64": [4, 27, 57], "n_epoch": [4, 20, 23, 27], "10": [4, 27, 103, 122, 124], "gamma": [4, 27], "99": [4, 27], "gae_lambda": [4, 27], "95": [4, 27], "clip_rang": [4, 27], "2": [4, 8, 9, 10, 27, 29, 41, 43, 44, 57, 68, 69, 70, 71, 77, 109, 115, 118, 121], "clip_range_vf": [4, 27], "none": [4, 6, 8, 9, 10, 20, 23, 27, 29, 32, 33, 34, 35, 36, 37, 39, 41, 43, 44, 46, 48, 57, 64, 66, 68, 69, 70, 71, 77, 97, 99, 109, 115, 118, 121], "ent_coef": [4, 27], "vf_coef": [4, 27], "5": [4, 27, 44, 115], "max_grad_norm": [4, 27], "use_sd": [4, 8, 9, 27, 29], "fals": [4, 8, 9, 10, 12, 13, 15, 16, 17, 27, 29, 44, 57, 70, 77, 109, 115], "sde_sample_freq": [4, 27], "1": [4, 8, 9, 10, 15, 27, 29, 41, 43, 44, 52, 57, 68, 69, 70, 71, 77, 98, 109, 115, 118, 121, 122], "target_kl": [4, 27], "tensorboard_log": [4, 6, 27, 34, 35], "create_eval_env": [4, 27], "policy_kwarg": [4, 20, 27], "verbos": [4, 27], "seed": [4, 27, 39, 41, 43, 44, 68, 69, 70, 71, 77, 109, 115, 118, 121], "devic": [4, 8, 9, 10, 20, 24, 27, 29, 57], "auto": [4, 8, 9, 20, 24, 27, 29, 57], "_init_setup_model": [4, 27], "true": [4, 6, 8, 9, 10, 27, 29, 32, 33, 34, 35, 36, 37, 39, 41, 43, 44, 57, 68, 69, 70, 71, 77, 78, 103, 104, 107, 108, 109, 114, 115, 118, 121, 122], "context_loss_coeff": 4, "context_s": [4, 8, 9, 10], "3": [4, 8, 9, 10, 29, 39, 41, 43, 44, 57, 68, 69, 70, 71, 77, 109, 115, 118, 121, 124, 125], "num_context_sampl": 4, "context_sampl": 4, "l2": [4, 20], "num_state_sampl": 4, "32": [4, 20, 57], "sourc": [4, 6, 8, 9, 10, 12, 13, 14, 15, 16, 17, 18, 20, 21, 22, 23, 24, 27, 29, 32, 33, 34, 35, 36, 37, 39, 40, 41, 42, 43, 44, 46, 47, 48, 50, 51, 52, 53, 54, 55, 57, 58, 59, 60, 61, 62, 63, 64, 66, 67, 68, 69, 70, 71, 72, 73, 77, 78, 80, 81, 82, 83, 84, 86, 87, 88, 89, 90, 91, 92, 93, 94, 95, 96, 97, 98, 99, 100, 101, 102, 103, 104, 105, 107, 108, 109, 110, 111, 114, 115, 116, 118, 121, 122], "base": [4, 6, 8, 9, 10, 20, 21, 22, 23, 27, 29, 32, 33, 34, 35, 36, 37, 39, 41, 43, 44, 46, 50, 51, 52, 53, 57, 66, 67, 68, 69, 70, 71, 77, 78, 86, 87, 88, 89, 90, 91, 92, 93, 94, 95, 96, 97, 98, 99, 107, 108, 109, 114, 115, 118, 121, 122, 124], "onpolicyalgorithm": [4, 6, 27, 35], "borrow": 4, "from": [4, 6, 8, 9, 10, 20, 27, 29, 32, 33, 34, 35, 36, 39, 41, 43, 44, 52, 54, 55, 57, 59, 68, 69, 70, 71, 77, 78, 101, 107, 108, 109, 114, 115, 118, 121, 122, 124], "proxim": 4, "optim": [4, 8, 9, 10, 20, 29, 57], "clip": [4, 61], "version": [4, 8, 9, 10, 29, 39, 41, 43, 44, 57, 68, 69, 70, 71, 77, 109, 115, 118, 121, 125], "paper": [4, 29, 57, 125], "http": [4, 19, 27, 39, 41, 43, 44, 52, 54, 55, 68, 69, 70, 71, 77, 109, 115, 118, 121, 124, 125], "arxiv": 4, "org": [4, 125], "ab": 4, "1707": 4, "06347": 4, "code": [4, 27, 29, 39, 41, 43, 44, 68, 69, 70, 71, 77, 109, 115, 118, 121], "thi": [4, 8, 9, 10, 20, 22, 27, 29, 36, 39, 41, 43, 44, 52, 54, 55, 57, 66, 68, 69, 70, 71, 77, 109, 115, 118, 121, 124, 125], "implement": [4, 8, 9, 10, 18, 29, 39, 41, 43, 44, 57, 68, 69, 70, 71, 77, 109, 115, 118, 121], "openai": [4, 39], "spin": 4, "up": [4, 32, 33, 39, 41, 43, 44, 68, 69, 70, 71, 77, 78, 107, 108, 109, 114, 115, 118, 121, 122], "github": [4, 19, 27, 52, 54, 55, 124, 125], "com": [4, 19, 27, 52, 54, 55, 124, 125], "spinningup": 4, "ikostrikov": 4, "pytorch": [4, 8, 9, 18, 27, 29, 57], "a2c": [4, 8, 9, 27, 29, 35, 57], "acktr": 4, "gail": 4, "baselin": [4, 29], "ppo2": 4, "hill": 4, "introduct": 4, "en": 4, "latest": [4, 41, 43, 44, 68, 69, 70, 71, 77, 109, 115, 118, 121, 124], "html": 4, "param": [4, 8, 9, 10, 18, 29, 57, 59, 61, 64], "model": [4, 6, 8, 9, 10, 14, 27, 29, 34, 35, 57, 64], "us": [4, 6, 8, 9, 10, 20, 23, 27, 29, 32, 33, 34, 35, 36, 37, 39, 41, 43, 44, 47, 48, 54, 55, 57, 58, 61, 64, 68, 69, 70, 71, 77, 78, 107, 108, 109, 114, 115, 118, 121, 122, 124], "mlppolici": 4, "cnnpolici": 4, "regist": [4, 8, 9, 10, 29, 57], "gym": [4, 27, 29, 33, 39], "str": [4, 8, 9, 10, 20, 24, 27, 29, 39, 41, 43, 44, 52, 55, 57, 68, 69, 70, 71, 77, 109, 115, 118, 121], "paramet": [4, 6, 8, 9, 10, 14, 18, 20, 22, 23, 24, 27, 29, 32, 33, 34, 35, 36, 37, 39, 41, 43, 44, 46, 47, 48, 51, 52, 53, 55, 57, 59, 60, 61, 62, 63, 64, 66, 68, 69, 70, 71, 72, 73, 77, 78, 107, 108, 109, 114, 115, 118, 121, 122], "float": [4, 6, 8, 9, 10, 20, 22, 27, 29, 32, 33, 34, 35, 36, 37, 39, 41, 43, 44, 57, 68, 69, 70, 71, 77, 109, 115, 118, 121], "callabl": [4, 8, 9, 10, 20, 22, 23, 27, 29, 41, 57], "rate": [4, 20, 22, 29], "function": [4, 6, 8, 9, 10, 11, 19, 23, 27, 29, 34, 35, 36, 39, 41, 43, 44, 45, 49, 54, 55, 56, 57, 65, 68, 69, 70, 71, 77, 79, 85, 106, 109, 113, 115, 118, 121], "progress": [4, 23, 27], "remain": 4, "int": [4, 8, 9, 10, 20, 23, 27, 29, 39, 41, 43, 44, 57, 60, 63, 64, 66, 68, 69, 70, 71, 72, 77, 109, 115, 118, 121], "number": [4, 8, 9, 10, 15, 20, 23, 27, 29, 39, 41, 43, 44, 57, 64, 68, 69, 70, 71, 77, 109, 115, 118, 121], "step": [4, 6, 27, 32, 33, 34, 35, 36, 39, 41, 43, 44, 64, 68, 69, 70, 71, 77, 78, 107, 108, 109, 114, 115, 118, 121, 122], "run": [4, 8, 9, 10, 20, 24, 27, 29, 39, 41, 43, 44, 57, 68, 69, 70, 71, 77, 109, 115, 118, 121], "per": [4, 27], "e": [4, 8, 9, 10, 27, 29, 39, 41, 43, 44, 57, 68, 69, 70, 71, 77, 109, 115, 118, 121, 124], "rollout": [4, 27, 52], "size": [4, 8, 9, 10, 20, 29, 57, 66], "n_env": [4, 8, 9, 29, 57], "where": [4, 8, 9, 24, 27, 29, 32, 33, 52, 57, 66, 78, 107, 108, 114, 122], "copi": [4, 8, 9, 10, 29, 54, 57], "parallel": 4, "note": [4, 8, 9, 10, 29, 39, 41, 43, 44, 57, 68, 69, 70, 71, 77, 109, 115, 118, 121, 124], "must": [4, 8, 9, 10, 27, 29, 57], "greater": 4, "than": [4, 57], "becaus": 4, "advantag": 4, "normal": [4, 8, 9, 27, 29, 57], "see": [4, 8, 9, 10, 20, 27, 29, 39, 41, 54, 57], "issu": [4, 27], "29372": 4, "minibatch": 4, "epoch": [4, 20, 23], "when": [4, 6, 8, 9, 10, 27, 29, 34, 35, 36, 39, 40, 41, 42, 43, 44, 52, 57, 58, 68, 69, 70, 71, 77, 109, 115, 118, 121], "surrog": 4, "loss": 4, "discount": 4, "factor": 4, "trade": 4, "off": [4, 34], "bia": [4, 8, 9, 10, 29, 57], "v": [4, 89, 96, 104, 105], "varianc": [4, 29], "gener": [4, 19, 27, 39, 41, 43, 44, 68, 69, 70, 71, 77, 109, 115, 118, 121], "estim": [4, 8, 9, 29, 57], "valu": [4, 8, 9, 10, 27, 29, 39, 41, 43, 44, 52, 54, 57, 59, 66, 68, 69, 70, 71, 77, 109, 115, 118, 121], "specif": [4, 27, 29, 39, 41, 43, 44, 68, 69, 70, 71, 77, 100, 101, 109, 115, 118, 121], "If": [4, 8, 9, 10, 20, 27, 29, 32, 33, 39, 41, 43, 44, 57, 68, 69, 70, 71, 77, 78, 107, 108, 109, 114, 115, 118, 121, 122], "pass": [4, 8, 9, 10, 20, 27, 29, 39, 57], "default": [4, 8, 9, 10, 20, 27, 29, 39, 41, 43, 44, 57, 62, 66, 68, 69, 70, 71, 77, 109, 115, 118, 121], "done": [4, 6, 32, 33, 34, 35, 36, 37, 39, 41, 43, 44, 68, 69, 70, 71, 77, 78, 107, 108, 109, 114, 115, 118, 121, 122], "import": 4, "depend": [4, 29, 39, 124], "reward": [4, 6, 32, 33, 34, 35, 36, 37, 39, 41, 43, 44, 68, 69, 70, 71, 77, 78, 107, 108, 109, 114, 115, 118, 121, 122], "scale": [4, 8, 9, 20, 29, 57, 98], "entropi": [4, 8, 9, 20, 29, 39, 57], "coeffici": 4, "calcul": 4, "maximum": 4, "gradient": [4, 8, 9, 10, 29, 57], "bool": [4, 6, 8, 9, 10, 27, 29, 32, 33, 34, 35, 36, 37, 39, 41, 43, 44, 57, 68, 69, 70, 71, 77, 109, 115, 118, 121], "whether": [4, 6, 8, 9, 10, 27, 29, 32, 33, 34, 35, 36, 37, 39, 41, 43, 44, 57, 68, 69, 70, 71, 77, 78, 107, 108, 109, 114, 115, 118, 121, 122], "state": [4, 8, 9, 10, 27, 29, 39, 41, 43, 44, 46, 57, 68, 69, 70, 71, 77, 109, 115, 118, 121], "explor": [4, 8, 9, 29, 39, 57], "gsde": [4, 29], "instead": [4, 8, 9, 10, 27, 29, 57], "action": [4, 6, 8, 9, 19, 20, 27, 29, 32, 33, 34, 35, 36, 37, 39, 41, 43, 44, 46, 48, 52, 57, 59, 61, 68, 69, 70, 71, 77, 78, 107, 108, 109, 114, 115, 118, 121, 122], "nois": [4, 64], "sampl": [4, 8, 9, 20, 27, 29, 41, 43, 44, 52, 57, 68, 69, 70, 71, 77, 109, 115, 118, 121], "new": [4, 6, 8, 9, 10, 27, 29, 32, 33, 34, 35, 39, 41, 43, 44, 57, 60, 66, 68, 69, 70, 71, 77, 78, 107, 108, 109, 114, 115, 118, 121, 122], "matrix": [4, 8, 9, 29, 57], "everi": [4, 8, 9, 10, 20, 23, 27, 29, 41, 43, 44, 54, 57, 68, 69, 70, 71, 77, 109, 115, 118, 121], "n": [4, 8, 9, 10, 29, 57, 124], "onli": [4, 8, 9, 10, 27, 29, 41, 43, 44, 47, 57, 68, 69, 70, 71, 77, 100, 109, 115, 118, 121, 124], "begin": [4, 8, 9, 27, 29, 57], "limit": 4, "kl": [4, 18], "diverg": [4, 18], "between": [4, 8, 9, 10, 29, 57], "enough": [4, 29, 34], "prevent": [4, 29], "larg": 4, "213": 4, "cf": [4, 29], "By": [4, 39, 41, 43, 44, 68, 69, 70, 71, 77, 109, 115, 118, 121], "div": 4, "log": [4, 8, 9, 20, 27, 29, 39, 57], "locat": [4, 8, 9, 27, 29, 57], "tensorboard": [4, 27], "creat": [4, 8, 9, 10, 27, 29, 57, 101, 124], "second": 4, "evalu": [4, 8, 9, 10, 29, 57], "period": 4, "avail": 4, "string": [4, 8, 9, 10, 29, 39, 41, 43, 44, 57, 68, 69, 70, 71, 77, 109, 115, 118, 121], "dict": [4, 8, 9, 10, 20, 23, 27, 29, 39, 41, 43, 44, 52, 54, 55, 57, 68, 69, 70, 71, 77, 109, 115, 118, 121], "ani": [4, 8, 9, 10, 20, 27, 29, 39, 41, 43, 44, 57, 68, 69, 70, 71, 77, 109, 115, 118, 121], "addit": [4, 8, 9, 10, 27, 29, 39, 41, 43, 44, 57, 68, 69, 70, 71, 77, 109, 115, 118, 121], "argument": [4, 8, 9, 10, 20, 27, 29, 55, 57], "creation": 4, "level": 4, "output": [4, 8, 9, 10, 29, 36, 57], "info": [4, 27, 39, 41, 43, 44, 68, 69, 70, 71, 77, 109, 115, 118, 121], "debug": [4, 27, 39], "pseudo": [4, 27], "random": [4, 8, 9, 27, 29, 39, 41, 43, 44, 57, 68, 69, 70, 71, 77, 109, 115, 118, 121, 122], "cpu": [4, 8, 9, 10, 29, 57], "cuda": [4, 8, 9, 10, 29, 57], "which": [4, 8, 9, 10, 20, 24, 27, 29, 39, 41, 43, 44, 54, 57, 64, 68, 69, 70, 71, 77, 109, 115, 118, 121], "should": [4, 8, 9, 10, 23, 27, 29, 39, 41, 43, 44, 57, 68, 69, 70, 71, 77, 109, 115, 118, 121], "set": [4, 8, 9, 10, 20, 27, 29, 39, 41, 42, 43, 44, 57, 68, 69, 70, 71, 77, 109, 115, 118, 121], "gpu": [4, 8, 9, 10, 29, 57], "possibl": [4, 8, 9, 10, 29, 39, 41, 43, 44, 57, 68, 69, 70, 71, 77, 109, 115, 118, 121], "build": [4, 8, 9, 10, 29, 57], "network": [4, 8, 9, 10, 27, 29, 41, 43, 44, 57, 68, 69, 70, 71, 77, 109, 115, 118, 121], "instanc": [4, 8, 9, 10, 20, 27, 29, 39, 41, 43, 44, 52, 55, 57, 68, 69, 70, 71, 77, 109, 115, 118, 121], "actorcriticpolici": [4, 8, 27, 37, 57, 59, 61], "vecenv": [4, 27], "method": [4, 6, 8, 9, 10, 20, 21, 22, 23, 27, 29, 32, 33, 34, 35, 36, 37, 39, 41, 43, 44, 46, 50, 51, 52, 53, 57, 66, 67, 68, 69, 70, 71, 77, 78, 86, 87, 88, 89, 90, 91, 92, 93, 94, 95, 96, 97, 98, 99, 107, 108, 109, 114, 115, 118, 121, 122], "attribut": [4, 8, 9, 10, 20, 27, 29, 39, 41, 43, 44, 46, 51, 52, 53, 57, 68, 69, 70, 71, 77, 109, 115, 118, 121], "collect_rollout": [4, 27], "callback": [4, 20, 23, 27, 34, 35], "rollout_buff": [4, 27], "n_rollout_step": [4, 27], "nearli": 4, "ident": [4, 20], "also": [4, 6, 8, 9, 10, 23, 29, 35, 36, 39, 57, 124], "resampl": [4, 41, 43, 44, 64, 68, 69, 70, 71, 77, 109, 115, 118, 121], "context": [4, 8, 9, 10, 15, 29, 57], "episod": [4, 8, 9, 27, 29, 39, 41, 43, 44, 57, 68, 69, 70, 71, 77, 109, 115, 118, 121], "collect": [4, 27, 34, 39, 41, 43, 44, 68, 69, 70, 71, 77, 109, 115, 118, 121], "experi": [4, 27], "fill": [4, 27, 66, 68, 70, 103, 104], "rolloutbuff": [4, 27], "term": [4, 39], "here": [4, 20], "refer": [4, 8, 9, 10, 29, 39, 57, 124], "free": 4, "notion": 4, "concept": 4, "plan": 4, "call": [4, 6, 8, 9, 10, 20, 22, 23, 27, 29, 32, 33, 35, 36, 39, 41, 43, 44, 57, 68, 69, 70, 71, 77, 78, 107, 108, 109, 114, 115, 118, 121, 122], "end": [4, 8, 9, 10, 20, 23, 27, 29, 39, 41, 43, 44, 57, 68, 69, 70, 71, 77, 92, 109, 115, 118, 121], "basecallback": [4, 27], "return": [4, 6, 8, 9, 10, 15, 18, 20, 22, 24, 27, 29, 32, 33, 34, 35, 36, 37, 39, 41, 43, 44, 47, 48, 50, 51, 52, 53, 54, 55, 57, 59, 60, 61, 62, 63, 64, 66, 67, 68, 69, 70, 71, 77, 78, 107, 108, 109, 114, 115, 118, 121, 122], "least": [4, 27], "termin": [4, 27, 39, 41, 43, 44, 68, 69, 70, 71, 77, 109, 115, 118, 121], "prematur": [4, 27, 39], "type": [4, 6, 8, 9, 10, 18, 20, 24, 27, 29, 32, 33, 34, 35, 36, 37, 39, 41, 43, 44, 47, 48, 50, 51, 52, 53, 54, 55, 57, 59, 60, 61, 63, 64, 66, 67, 68, 69, 70, 71, 77, 109, 115, 118, 121], "get_env": [4, 27], "defin": [4, 8, 9, 10, 27, 29, 36, 39, 57], "get_paramet": [4, 8, 9, 10, 27, 29, 57], "includ": [4, 8, 9, 10, 27, 29, 39, 41, 43, 44, 57, 68, 69, 70, 71, 77, 109, 115, 118, 121], "g": [4, 8, 9, 10, 27, 29, 39, 41, 43, 44, 57, 68, 69, 70, 71, 77, 88, 109, 115, 118, 121], "critic": [4, 8, 9, 27, 29, 39, 41, 43, 44, 57, 59, 68, 69, 70, 71, 77, 109, 115, 118, 121], "pi": [4, 27], "map": [4, 8, 9, 10, 20, 27, 29, 55, 57], "name": [4, 8, 9, 10, 20, 27, 29, 39, 41, 43, 44, 52, 57, 68, 69, 70, 71, 77, 109, 115, 118, 121], "get_vec_normalize_env": [4, 27], "vecnorm": [4, 27], "wrapper": [4, 18, 27, 33, 36, 39, 41, 43, 44, 77, 109, 115, 118, 121], "exist": [4, 8, 9, 10, 27, 29, 39, 57], "total_timestep": [4, 27], "log_interv": [4, 6, 20, 27, 34, 35], "eval_env": [4, 27], "eval_freq": [4, 27], "n_eval_episod": [4, 27], "tb_log_nam": [4, 6, 27, 34, 35], "eval_log_path": [4, 27], "reset_num_timestep": [4, 27], "total": [4, 27, 39], "list": [4, 8, 9, 10, 27, 29, 39, 41, 43, 44, 57, 68, 69, 70, 71, 77, 109, 115, 118, 121], "befor": [4, 8, 9, 10, 20, 27, 29, 39, 57], "reset": [4, 8, 9, 27, 29, 39, 41, 43, 44, 57, 66, 68, 69, 70, 71, 77, 109, 115, 118, 121], "timestep": [4, 27, 34, 39, 41, 43, 44, 52, 64, 68, 69, 70, 71, 77, 109, 115, 118, 121], "progress_bar": [4, 27], "displai": [4, 27, 39, 41, 43, 44, 68, 69, 70, 71, 77, 97, 99, 100, 101, 109, 115, 118, 121], "bar": [4, 27], "tqdm": [4, 23, 27], "rich": [4, 27], "classmethod": [4, 8, 9, 27, 29, 57], "path": [4, 8, 9, 10, 20, 24, 27, 29, 57], "custom_object": [4, 27], "print_system_info": [4, 27], "force_reset": [4, 27], "kwarg": [4, 6, 8, 9, 10, 27, 29, 35, 57, 101], "zip": [4, 27], "file": [4, 27], "warn": [4, 27], "re": [4, 8, 9, 10, 27, 29, 57, 103], "scratch": [4, 27], "doe": [4, 27, 37, 39], "place": [4, 8, 9, 10, 20, 27, 29, 57], "For": [4, 8, 9, 10, 27, 29, 39, 57], "an": [4, 6, 8, 9, 10, 20, 23, 27, 29, 32, 33, 34, 35, 36, 37, 39, 41, 43, 44, 46, 52, 55, 57, 58, 59, 66, 68, 69, 70, 71, 77, 78, 100, 107, 108, 109, 114, 115, 118, 121, 122], "set_paramet": [4, 27], "bufferediobas": [4, 27], "like": [4, 8, 9, 10, 27, 29, 57], "you": [4, 8, 9, 10, 27, 29, 39, 57, 124], "need": [4, 8, 9, 10, 27, 29, 39, 41, 43, 44, 57, 68, 69, 70, 71, 77, 109, 115, 118, 121], "predict": [4, 8, 9, 27, 29, 57], "ha": [4, 8, 9, 10, 24, 27, 29, 34, 39, 41, 43, 44, 52, 57, 64, 68, 69, 70, 71, 77, 109, 115, 118, 121, 124], "prioriti": [4, 27], "over": [4, 8, 9, 10, 23, 27, 29, 57], "dictionari": [4, 8, 9, 10, 20, 27, 29, 39, 57], "replac": [4, 27], "upon": [4, 27], "variabl": [4, 27, 39], "present": [4, 27, 125], "kei": [4, 8, 9, 10, 27, 29, 39, 41, 43, 44, 52, 57, 68, 69, 70, 71, 77, 109, 115, 118, 121], "deseri": [4, 27], "correspond": [4, 6, 8, 9, 10, 27, 29, 32, 33, 35, 57, 78, 107, 108, 114, 122], "item": [4, 27, 54], "similar": [4, 8, 9, 10, 27, 29, 57], "kera": [4, 27], "load_model": [4, 27], "have": [4, 8, 9, 10, 27, 29, 39, 57, 67], "print": [4, 8, 9, 10, 27, 29, 57], "system": [4, 27], "forc": [4, 27], "avoid": [4, 8, 9, 10, 27, 29, 57], "unexpect": [4, 8, 9, 10, 27, 29, 57], "behavior": [4, 8, 9, 10, 20, 27, 29, 57], "dlr": [4, 27], "rm": [4, 27], "597": [4, 27], "extra": [4, 8, 9, 10, 27, 29, 41, 43, 44, 57, 68, 69, 70, 71, 77, 109, 115, 118, 121], "chang": [4, 8, 9, 10, 20, 27, 29, 39, 41, 43, 44, 57, 68, 69, 70, 71, 77, 109, 115, 118, 121], "selfbasealgorithm": [4, 27], "properti": [4, 8, 9, 27, 29, 39, 41, 43, 44, 57, 68, 69, 70, 71, 77, 109, 115, 118, 121], "logger": [4, 27], "getter": [4, 8, 9, 27, 29, 57], "observ": [4, 6, 8, 9, 19, 20, 27, 29, 32, 33, 34, 35, 36, 37, 39, 41, 43, 44, 52, 57, 59, 60, 62, 68, 69, 70, 71, 77, 78, 107, 108, 109, 114, 115, 118, 121, 122], "episode_start": [4, 8, 9, 27, 29, 57], "determinist": [4, 8, 9, 10, 27, 29, 57], "get": [4, 8, 9, 27, 29, 39, 41, 43, 44, 57, 67, 68, 69, 70, 71, 77, 109, 115, 118, 121, 124], "option": [4, 8, 9, 10, 20, 27, 29, 39, 41, 43, 44, 57, 68, 69, 70, 71, 77, 109, 115, 118, 121, 124], "hidden": [4, 8, 9, 27, 29, 39, 57], "sugar": [4, 8, 9, 27, 29, 57], "coat": [4, 8, 9, 27, 29, 57], "handl": [4, 8, 9, 10, 27, 29, 57], "imag": [4, 8, 9, 27, 29, 39, 41, 43, 44, 57, 68, 69, 70, 71, 77, 109, 115, 118, 121], "ndarrai": [4, 6, 8, 9, 27, 29, 32, 33, 34, 35, 36, 37, 39, 41, 43, 44, 46, 47, 48, 51, 52, 53, 55, 57, 59, 61, 66, 68, 69, 70, 71, 77, 109, 115, 118, 121], "input": [4, 8, 9, 10, 27, 29, 57], "tupl": [4, 8, 9, 10, 27, 29, 39, 41, 43, 44, 48, 57, 59, 68, 69, 70, 71, 77, 109, 115, 118, 121], "last": [4, 6, 8, 9, 27, 29, 32, 33, 34, 35, 57, 66, 78, 107, 108, 114, 122], "recurr": [4, 8, 9, 27, 29, 57], "mask": [4, 8, 9, 27, 29, 46, 48, 57], "rnn": [4, 8, 9, 27, 29, 57], "next": [4, 8, 9, 27, 29, 39, 41, 43, 44, 57, 68, 69, 70, 71, 77, 109, 115, 118, 121], "exclud": [4, 20, 27, 29], "all": [4, 8, 9, 10, 23, 27, 29, 32, 41, 43, 44, 46, 50, 57, 67, 68, 69, 70, 71, 77, 109, 115, 118, 121], "iter": [4, 8, 9, 10, 20, 23, 27, 29, 57], "ones": [4, 8, 9, 10, 27, 29, 57], "might": [4, 27, 39, 64], "anywai": [4, 27], "set_env": [4, 27], "check": [4, 8, 9, 10, 27, 29, 57], "valid": [4, 27, 41, 43, 44, 68, 69, 70, 71, 77, 109, 115, 118, 121], "coher": [4, 27], "furthermor": [4, 27], "wrap": [4, 8, 9, 10, 23, 27, 29, 39, 41, 43, 44, 57, 68, 69, 70, 71, 77, 109, 115, 118, 121], "non": [4, 8, 9, 10, 27, 29, 39, 41, 43, 44, 57, 68, 69, 70, 71, 77, 109, 115, 118, 121], "vector": [4, 8, 9, 15, 27, 29, 57], "observation_spac": [4, 8, 9, 20, 27, 29, 39, 41, 43, 44], "action_spac": [4, 8, 9, 20, 27, 29, 41, 43, 44], "set_logg": [4, 27], "setter": [4, 27], "custom": [4, 8, 9, 10, 27, 29, 39, 55, 57], "overwrit": [4, 27], "constructor": [4, 20, 27], "load_path_or_dict": [4, 27], "exact_match": [4, 27], "given": [4, 6, 8, 9, 10, 27, 29, 32, 33, 34, 35, 36, 37, 41, 43, 44, 57, 59, 62, 64, 66, 68, 69, 70, 71, 77, 78, 107, 108, 109, 114, 115, 118, 121, 122], "nest": [4, 8, 9, 10, 27, 29, 57], "contain": [4, 8, 9, 10, 20, 27, 29, 39, 41, 43, 44, 57, 68, 69, 70, 71, 77, 109, 115, 118, 121], "modul": [4, 8, 9, 10, 27, 29, 57, 122], "load_path_or_it": [4, 27], "data": [4, 20, 23, 27, 52, 54, 55], "nn": [4, 8, 9, 10, 27, 29, 57], "torch": [4, 8, 9, 10, 12, 13, 15, 16, 17, 20, 27, 29, 52, 55, 57], "state_dict": [4, 8, 9, 10, 27, 29, 57], "otherwis": [4, 8, 9, 10, 27, 29, 39, 44, 57, 70, 77, 109, 115], "rais": [4, 8, 9, 10, 27, 29, 39, 40, 41, 42, 43, 44, 57, 58, 68, 69, 70, 71, 77, 109, 115, 118, 121], "except": [4, 27, 38, 39, 40, 41, 42, 43, 44, 56, 57, 58, 68, 69, 70, 71, 77, 109, 115, 118, 121], "tensor": [4, 8, 9, 10, 18, 20, 27, 29, 55, 57, 59], "set_random_se": [4, 27], "python": [4, 27, 124], "numpi": [4, 20, 27, 39, 47, 51, 53, 54, 59, 122], "gather": [4, 27], "latent_sync": 6, "onpolicyag": 6, "repres": [6, 34, 35, 36, 37, 39, 41, 43, 44, 59, 66, 68, 69, 70, 71, 77, 109, 115, 118, 121], "get_act": [6, 32, 33, 34, 35, 36, 37, 78, 107, 108, 114, 122], "adappolici": [6, 9, 14], "ob": [6, 8, 9, 20, 29, 32, 33, 34, 35, 36, 37, 46, 52, 53, 57, 59, 78, 107, 108, 114, 115, 122], "record": [6, 8, 9, 10, 29, 32, 33, 34, 35, 36, 37, 57, 67, 69, 71, 78, 107, 108, 114, 122], "transit": [6, 8, 9, 10, 20, 29, 34, 35, 36, 50, 51, 52, 53, 57, 67, 69, 71], "It": [6, 8, 9, 10, 29, 35, 39, 57], "full": [6, 18, 35, 46], "take": [6, 8, 9, 29, 32, 33, 34, 35, 36, 37, 39, 44, 57, 78, 107, 108, 114, 122], "add": [6, 8, 9, 10, 29, 32, 33, 34, 35, 41, 43, 44, 57, 66, 68, 69, 70, 71, 77, 78, 107, 108, 109, 114, 115, 118, 121, 122], "inform": [6, 8, 9, 10, 29, 32, 33, 34, 35, 39, 41, 43, 44, 46, 57, 68, 69, 70, 71, 77, 78, 107, 108, 109, 114, 115, 118, 121, 122, 124], "entri": [6, 8, 9, 10, 29, 35, 57], "most": [6, 32, 33, 35, 39, 41, 43, 44, 66, 68, 69, 70, 71, 77, 78, 107, 108, 109, 114, 115, 118, 121, 122], "recent": [6, 32, 33, 35, 66, 78, 107, 108, 114, 122], "receiev": [6, 32, 33, 34, 35, 36, 78, 107, 108, 114, 122], "previou": [6, 32, 33, 34, 35, 36, 41, 43, 44, 52, 68, 69, 70, 71, 77, 78, 107, 108, 109, 114, 115, 118, 121, 122], "game": [6, 32, 33, 34, 35, 36, 41, 43, 44, 78, 107, 108, 114, 122], "lr_schedul": [8, 9, 29], "net_arch": [8, 9, 10, 29], "activation_fn": [8, 9, 10, 29], "activ": [8, 9, 29, 64, 124], "tanh": [8, 9, 29], "ortho_init": [8, 9, 29], "log_std_init": [8, 9, 29], "full_std": [8, 9, 29], "sde_net_arch": [8, 9, 29], "use_expln": [8, 9, 29], "squash_output": [8, 9, 29, 57], "features_extractor_class": [8, 9, 29], "stable_baselines3": [8, 9, 29, 57], "common": [8, 9, 20, 29, 125], "torch_lay": [8, 9, 29], "flattenextractor": [8, 9, 29], "features_extractor_kwarg": [8, 9, 29], "normalize_imag": [8, 9, 29], "optimizer_class": [8, 9, 29], "adam": [8, 9, 20, 29], "optimizer_kwarg": [8, 9, 20, 29], "initi": [8, 9, 10, 20, 29, 39, 41, 43, 44, 57, 68, 69, 70, 71, 77, 109, 115, 118, 121], "intern": [8, 9, 10, 29, 39, 41, 43, 44, 57, 68, 69, 70, 71, 77, 109, 115, 118, 121], "share": [8, 9, 10, 29, 57], "both": [8, 9, 10, 29, 41, 43, 44, 57, 68, 69, 70, 71, 77, 109, 115, 118, 121], "scriptmodul": [8, 9, 10, 29, 57], "space": [8, 9, 20, 29, 39, 41, 43, 44, 57, 58, 60, 61, 63, 68, 69, 70, 71, 77, 109, 115, 118, 121], "basefeaturesextractor": [8, 9, 29, 57], "__call__": [8, 9, 10, 22, 29, 57], "arg": [8, 9, 10, 20, 22, 23, 24, 29, 39, 57], "add_modul": [8, 9, 10, 29, 57], "child": [8, 9, 10, 29, 57], "appli": [8, 9, 10, 19, 20, 29, 39, 41, 43, 44, 57, 68, 69, 70, 71, 77, 109, 115, 118, 121], "fn": [8, 9, 10, 29, 57], "recurs": [8, 9, 10, 29, 57, 124], "submodul": [8, 9, 10, 29, 57, 124], "children": [8, 9, 10, 29, 57], "well": [8, 9, 10, 29, 57], "typic": [8, 9, 10, 29, 39, 57], "init": [8, 9, 10, 29, 57, 124], "doc": [8, 9, 10, 29, 57, 124], "exampl": [8, 9, 10, 29, 39, 57], "no_grad": [8, 9, 10, 29, 57], "def": [8, 9, 10, 29, 57], "init_weight": [8, 9, 10, 29, 57], "m": [8, 9, 10, 29, 57], "linear": [8, 9, 10, 29, 57], "weight": [8, 9, 10, 20, 24, 29, 57], "fill_": [8, 9, 10, 29, 57], "net": [8, 9, 10, 29, 57], "sequenti": [8, 9, 10, 29, 57], "in_featur": [8, 9, 10, 29, 57], "out_featur": [8, 9, 10, 29, 57], "requires_grad": [8, 9, 10, 29, 57], "t": [8, 9, 10, 29, 39, 41, 43, 44, 57, 68, 69, 70, 71, 77, 109, 115, 118, 121], "bfloat16": [8, 9, 10, 29, 57], "cast": [8, 9, 10, 29, 57], "point": [8, 9, 10, 29, 57], "datatyp": [8, 9, 10, 29, 57], "modifi": [8, 9, 10, 29, 52, 57], "yield": [8, 9, 10, 20, 29, 57], "member": [8, 9, 10, 29, 57], "xdoctest": [8, 9, 10, 29, 57], "skip": [8, 9, 10, 29, 57], "undefin": [8, 9, 10, 29, 39, 57], "var": [8, 9, 10, 29, 57], "buf": [8, 9, 10, 29, 57], "20l": [8, 9, 10, 29, 57], "1l": [8, 9, 10, 29, 57], "5l": [8, 9, 10, 29, 57], "immedi": [8, 9, 10, 20, 29, 57], "move": [8, 9, 10, 29, 39, 41, 43, 44, 57, 68, 69, 70, 71, 77, 109, 115, 118, 121], "make": [8, 9, 10, 29, 39, 41, 43, 44, 57, 68, 69, 70, 71, 77, 109, 115, 118, 121], "associ": [8, 9, 10, 29, 57], "so": [8, 9, 10, 23, 29, 57], "construct": [8, 9, 10, 20, 29, 41, 43, 44, 57, 68, 69, 70, 71, 77, 109, 115, 118, 121], "live": [8, 9, 10, 29, 57], "while": [8, 9, 10, 29, 57], "being": [8, 9, 10, 29, 57], "specifi": [8, 9, 10, 29, 39, 41, 43, 44, 46, 57, 68, 69, 70, 71, 77, 109, 115, 118, 121], "infer": [8, 9, 29, 57], "inspect": [8, 9, 29, 57], "fallback": [8, 9, 29, 57], "doubl": [8, 9, 10, 29, 57], "eval": [8, 9, 10, 29, 57], "mode": [8, 9, 10, 29, 39, 41, 43, 44, 57, 68, 69, 70, 71, 77, 109, 115, 118, 121], "effect": [8, 9, 10, 29, 39, 41, 43, 44, 57, 68, 69, 70, 71, 77, 109, 115, 118, 121], "certain": [8, 9, 10, 29, 39, 57], "document": [8, 9, 10, 29, 57], "particular": [8, 9, 10, 29, 57], "detail": [8, 9, 10, 29, 57], "affect": [8, 9, 10, 29, 57], "dropout": [8, 9, 10, 29, 57], "batchnorm": [8, 9, 10, 29, 57], "etc": [8, 9, 10, 29, 57], "equival": [8, 9, 10, 29, 57], "local": [8, 9, 10, 29, 57], "disabl": [8, 9, 10, 29, 57], "grad": [8, 9, 10, 29, 57], "comparison": [8, 9, 10, 29, 57], "sever": [8, 9, 10, 29, 57], "mechan": [8, 9, 10, 29, 57], "mai": [8, 9, 10, 29, 39, 41, 43, 44, 57, 68, 69, 70, 71, 77, 109, 115, 118, 121], "confus": [8, 9, 10, 29, 57], "evaluate_act": [8, 9, 29, 57], "accord": [8, 9, 29, 57], "likelihood": [8, 9, 29, 57], "those": [8, 9, 29, 57], "distribut": [8, 9, 18, 29, 57], "extra_repr": [8, 9, 10, 29, 57], "represent": [8, 9, 10, 29, 39, 41, 43, 44, 46, 57, 66, 68, 69, 70, 71, 77, 109, 115, 118, 121], "To": [8, 9, 10, 29, 57, 124], "your": [8, 9, 10, 29, 39, 41, 43, 44, 57, 68, 69, 70, 71, 77, 109, 115, 118, 121], "singl": [8, 9, 10, 29, 39, 41, 43, 44, 46, 57, 68, 69, 70, 71, 77, 109, 115, 118, 121], "line": [8, 9, 10, 29, 39, 57], "accept": [8, 9, 10, 29, 39, 41, 43, 44, 57, 68, 69, 70, 71, 77, 109, 115, 118, 121], "extract_featur": [8, 9, 29, 57], "preprocess": [8, 9, 29, 57], "extract": [8, 9, 29, 41, 47, 48, 54, 57], "featur": [8, 9, 10, 29, 57, 124], "extractor": [8, 9, 29, 39, 57], "forward": [8, 9, 10, 29, 57], "actor": [8, 9, 29, 36, 57, 59], "probabl": [8, 9, 29, 44, 57], "get_buff": [8, 9, 10, 29, 57], "target": [8, 9, 10, 29, 57], "throw": [8, 9, 10, 29, 57], "error": [8, 9, 10, 29, 39, 41, 43, 44, 57, 68, 69, 70, 71, 77, 109, 115, 118, 121], "docstr": [8, 9, 10, 29, 57], "get_submodul": [8, 9, 10, 29, 57], "explan": [8, 9, 10, 29, 57], "how": [8, 9, 10, 29, 39, 57], "correctli": [8, 9, 10, 29, 39, 57], "fulli": [8, 9, 10, 29, 57], "qualifi": [8, 9, 10, 29, 57], "look": [8, 9, 10, 29, 57], "referenc": [8, 9, 10, 29, 57], "attributeerror": [8, 9, 10, 29, 57], "invalid": [8, 9, 10, 29, 39, 57], "resolv": [8, 9, 10, 29, 57], "someth": [8, 9, 10, 29, 57], "get_distribut": [8, 9, 57], "get_extra_st": [8, 9, 10, 29, 57], "set_extra_st": [8, 9, 10, 29, 57], "store": [8, 9, 10, 29, 36, 50, 57], "picklabl": [8, 9, 10, 29, 57], "ensur": [8, 9, 10, 29, 39, 57], "work": [8, 9, 10, 29, 57], "serial": [8, 9, 10, 29, 57], "we": [8, 9, 10, 29, 57, 124], "backward": [8, 9, 10, 29, 57], "compat": [8, 9, 10, 29, 52, 57], "guarante": [8, 9, 10, 29, 57], "other": [8, 9, 10, 20, 29, 57], "break": [8, 9, 10, 29, 57], "pickl": [8, 9, 10, 29, 57], "form": [8, 9, 10, 18, 29, 57], "let": [8, 9, 10, 29, 57], "sai": [8, 9, 10, 29, 57], "A": [8, 9, 10, 22, 23, 29, 36, 39, 41, 43, 44, 52, 57, 68, 69, 70, 71, 77, 109, 115, 118, 121, 125], "net_b": [8, 9, 10, 29, 57], "net_c": [8, 9, 10, 29, 57], "conv": [8, 9, 10, 29, 57], "conv2d": [8, 9, 10, 29, 57], "16": [8, 9, 10, 29, 57], "33": [8, 9, 10, 29, 57], "kernel_s": [8, 9, 10, 29, 57], "stride": [8, 9, 10, 29, 57], "100": [8, 9, 10, 20, 29, 57], "200": [8, 9, 10, 29, 57], "diagram": [8, 9, 10, 29, 57], "show": [8, 9, 10, 23, 29, 57], "itself": [8, 9, 10, 29, 57], "two": [8, 9, 10, 29, 57], "would": [8, 9, 10, 29, 57], "runtim": [8, 9, 10, 29, 57], "bound": [8, 9, 10, 29, 39, 57], "degre": [8, 9, 10, 29, 57], "queri": [8, 9, 10, 29, 41, 43, 44, 57, 68, 69, 70, 71, 77, 109, 115, 118, 121], "against": [8, 9, 10, 29, 57], "named_modul": [8, 9, 10, 29, 57], "achiev": [8, 9, 10, 29, 39, 41, 43, 44, 57, 68, 69, 70, 71, 77, 109, 115, 118, 121], "same": [8, 9, 10, 29, 32, 33, 36, 41, 43, 44, 57, 68, 69, 70, 71, 77, 78, 107, 108, 109, 114, 115, 118, 121, 122, 124], "result": [8, 9, 10, 29, 39, 57], "o": [8, 9, 10, 29, 57], "simpl": [8, 9, 10, 29, 57], "some": [8, 9, 10, 19, 20, 29, 39, 41, 57], "alwai": [8, 9, 10, 29, 57], "abov": [8, 9, 10, 29, 39, 57], "half": [8, 9, 10, 29, 57], "static": [8, 9, 29, 37, 57], "gain": [8, 9, 29, 57], "orthogon": [8, 9, 29, 57], "ipu": [8, 9, 10, 29, 57], "is_vectorized_observ": [8, 9, 29, 57], "transposit": [8, 9, 29, 57], "channel": [8, 9, 29, 57], "first": [8, 9, 29, 39, 41, 43, 44, 57, 66, 68, 69, 70, 71, 77, 109, 115, 118, 121], "dqn": [8, 9, 29, 34, 57], "epsilon": [8, 9, 29, 57], "greedi": [8, 9, 29, 57], "selfbasemodel": [8, 9, 29, 57], "load_from_vector": [8, 9, 29, 57], "1d": [8, 9, 29, 57], "load_state_dict": [8, 9, 10, 29, 57], "strict": [8, 9, 10, 29, 57], "descend": [8, 9, 10, 29, 57], "exactli": [8, 9, 10, 20, 23, 29, 57], "match": [8, 9, 10, 29, 57], "persist": [8, 9, 10, 29, 57], "strictli": [8, 9, 10, 29, 57], "enforc": [8, 9, 10, 29, 57], "namedtupl": [8, 9, 10, 29, 57], "missing_kei": [8, 9, 10, 29, 57], "unexpected_kei": [8, 9, 10, 29, 57], "field": [8, 9, 10, 29, 52, 54, 57], "miss": [8, 9, 10, 29, 57], "runtimeerror": [8, 9, 10, 29, 57], "make_features_extractor": [8, 9, 29, 57], "helper": [8, 9, 29, 57], "duplic": [8, 9, 10, 29, 57], "onc": [8, 9, 10, 29, 57], "In": [8, 9, 10, 29, 39, 41, 43, 44, 57, 68, 69, 70, 71, 77, 109, 115, 118, 121, 125], "l": [8, 9, 10, 29, 57], "idx": [8, 9, 10, 29, 57], "enumer": [8, 9, 10, 29, 57], "named_buff": [8, 9, 10, 29, 57], "prefix": [8, 9, 10, 29, 57], "remove_dupl": [8, 9, 10, 29, 57], "prepend": [8, 9, 10, 29, 57], "remov": [8, 9, 10, 29, 39, 57], "running_var": [8, 9, 10, 29, 57], "named_children": [8, 9, 10, 29, 57], "conv4": [8, 9, 10, 29, 57], "conv5": [8, 9, 10, 29, 57], "memo": [8, 9, 10, 29, 57], "alreadi": [8, 9, 10, 29, 39, 41, 43, 44, 57, 68, 69, 70, 71, 77, 109, 115, 118, 121], "named_paramet": [8, 9, 10, 29, 57], "obs_to_tensor": [8, 9, 29, 57], "convert": [8, 9, 10, 20, 29, 57, 100], "fed": [8, 9, 29, 57], "parameters_to_vector": [8, 9, 29, 57], "predict_valu": [8, 9, 57], "register_backward_hook": [8, 9, 10, 29, 57], "hook": [8, 9, 10, 29, 57], "deprec": [8, 9, 10, 29, 39, 57], "favor": [8, 9, 10, 29, 39, 57], "register_full_backward_hook": [8, 9, 10, 29, 57], "futur": [8, 9, 10, 29, 57], "util": [8, 9, 10, 20, 29, 55], "removablehandl": [8, 9, 10, 29, 57], "register_buff": [8, 9, 10, 29, 57], "consid": [8, 9, 10, 29, 57], "running_mean": [8, 9, 10, 29, 57], "part": [8, 9, 10, 29, 57], "alongsid": [8, 9, 10, 29, 57], "latter": [8, 9, 10, 29, 57], "oper": [8, 9, 10, 29, 57], "ignor": [8, 9, 10, 29, 57], "zero": [8, 9, 10, 29, 57], "num_featur": [8, 9, 10, 29, 57], "register_forward_hook": [8, 9, 10, 29, 57], "with_kwarg": [8, 9, 10, 29, 57], "time": [8, 9, 10, 29, 39, 41, 43, 44, 57, 68, 69, 70, 71, 77, 109, 115, 118, 121], "after": [8, 9, 10, 20, 29, 39, 41, 43, 44, 57, 68, 69, 70, 71, 77, 109, 115, 118, 121], "comput": [8, 9, 10, 29, 39, 41, 43, 44, 57, 68, 69, 70, 71, 77, 109, 115, 118, 121], "posit": [8, 9, 10, 29, 39, 57], "keyword": [8, 9, 10, 20, 29, 57], "won": [8, 9, 10, 29, 39, 41, 43, 44, 57, 68, 69, 70, 71, 77, 109, 115, 118, 121], "inplac": [8, 9, 10, 29, 57], "sinc": [8, 9, 10, 29, 37, 57], "signatur": [8, 9, 10, 29, 57], "expect": [8, 9, 10, 29, 39, 41, 57], "possibli": [8, 9, 10, 29, 52, 57], "user": [8, 9, 10, 29, 36, 39, 41, 43, 44, 57, 68, 69, 70, 71, 77, 109, 115, 118, 121], "fire": [8, 9, 10, 29, 57], "global": [8, 9, 10, 29, 57], "register_module_forward_hook": [8, 9, 10, 29, 57], "register_forward_pre_hook": [8, 9, 10, 29, 57], "pre": [8, 9, 10, 29, 57], "invok": [8, 9, 10, 29, 57], "either": [8, 9, 10, 20, 29, 57], "unless": [8, 9, 10, 29, 57], "And": [8, 9, 10, 29, 57], "forward_pr": [8, 9, 10, 29, 57], "register_module_forward_pre_hook": [8, 9, 10, 29, 57], "respect": [8, 9, 10, 29, 57], "execut": [8, 9, 10, 29, 57], "grad_input": [8, 9, 10, 29, 57], "grad_output": [8, 9, 10, 29, 57], "subsequ": [8, 9, 10, 29, 57], "technic": [8, 9, 10, 29, 57], "reason": [8, 9, 10, 29, 39, 57], "receiv": [8, 9, 10, 29, 44, 46, 57], "view": [8, 9, 10, 29, 57], "similarli": [8, 9, 10, 29, 57], "caller": [8, 9, 10, 29, 57], "register_module_full_backward_hook": [8, 9, 10, 29, 57], "register_full_backward_pre_hook": [8, 9, 10, 29, 57], "backward_pr": [8, 9, 10, 29, 57], "register_module_full_backward_pre_hook": [8, 9, 10, 29, 57], "register_load_state_dict_post_hook": [8, 9, 10, 29, 57], "post": [8, 9, 10, 29, 57], "incompatible_kei": [8, 9, 10, 29, 57], "consist": [8, 9, 10, 29, 57], "perform": [8, 9, 10, 29, 39, 41, 43, 44, 57, 68, 69, 70, 71, 77, 109, 115, 118, 121], "modif": [8, 9, 10, 29, 57], "thrown": [8, 9, 10, 29, 57], "clear": [8, 9, 10, 29, 57], "out": [8, 9, 10, 29, 39, 57], "register_modul": [8, 9, 10, 29, 57], "alia": [8, 9, 10, 29, 57], "register_paramet": [8, 9, 10, 29, 57], "register_state_dict_pre_hook": [8, 9, 10, 29, 57], "These": [8, 9, 10, 29, 57], "keep_var": [8, 9, 10, 29, 57], "process": [8, 9, 10, 23, 29, 57], "made": [8, 9, 10, 20, 29, 57], "requires_grad_": [8, 9, 10, 29, 57], "autograd": [8, 9, 10, 29, 57], "help": [8, 9, 10, 29, 39, 57], "freez": [8, 9, 10, 29, 57], "individu": [8, 9, 10, 29, 39, 57], "gan": [8, 9, 10, 29, 57], "reset_nois": [8, 9, 29, 57], "scale_act": [8, 9, 29, 57], "rescal": [8, 9, 29, 57], "low": [8, 9, 29, 57], "high": [8, 9, 29, 57], "symmetr": [8, 9, 29, 57], "found": [8, 9, 10, 29, 57], "within": [8, 9, 10, 29, 57, 124], "set_training_mod": [8, 9, 29, 57], "put": [8, 9, 29, 57], "batch": [8, 9, 20, 23, 29, 55, 57], "normalis": [8, 9, 29, 57], "els": [8, 9, 29, 57], "share_memori": [8, 9, 10, 29, 57], "share_memory_": [8, 9, 10, 29, 57], "destin": [8, 9, 10, 29, 57], "whole": [8, 9, 10, 29, 57], "averag": [8, 9, 10, 29, 57], "shallow": [8, 9, 10, 29, 57], "order": [8, 9, 10, 29, 57], "howev": [8, 9, 10, 29, 39, 57], "releas": [8, 9, 10, 29, 57], "pleas": [8, 9, 10, 29, 39, 57], "ordereddict": [8, 9, 10, 29, 57], "compos": [8, 9, 10, 29, 57], "detach": [8, 9, 10, 29, 57], "dtype": [8, 9, 10, 29, 57], "non_block": [8, 9, 10, 29, 57], "memory_format": [8, 9, 10, 29, 57], "channels_last": [8, 9, 10, 29, 57], "Its": [8, 9, 10, 29, 57], "complex": [8, 9, 10, 29, 57], "integr": [8, 9, 10, 29, 57], "unchang": [8, 9, 10, 29, 57], "tri": [8, 9, 10, 29, 57], "asynchron": [8, 9, 10, 29, 57], "host": [8, 9, 10, 29, 57], "pin": [8, 9, 10, 29, 57], "memori": [8, 9, 10, 29, 57], "below": [8, 9, 10, 29, 57], "desir": [8, 9, 10, 29, 57], "whose": [8, 9, 10, 29, 52, 57], "format": [8, 9, 10, 29, 57], "4d": [8, 9, 10, 29, 57], "ignore_w": [8, 9, 10, 29, 57], "1913": [8, 9, 10, 29, 57], "3420": [8, 9, 10, 29, 57], "5113": [8, 9, 10, 29, 57], "2325": [8, 9, 10, 29, 57], "float64": [8, 9, 10, 29, 57], "requir": [8, 9, 10, 29, 52, 57], "torch_doctest_cuda1": [8, 9, 10, 29, 57], "gpu1": [8, 9, 10, 29, 57], "1914": [8, 9, 10, 29, 57], "5112": [8, 9, 10, 29, 57], "2324": [8, 9, 10, 29, 57], "float16": [8, 9, 10, 29, 57], "cdoubl": [8, 9, 10, 29, 57], "3741": [8, 9, 10, 29, 57], "j": [8, 9, 10, 29, 57], "2382": [8, 9, 10, 29, 57], "5593": [8, 9, 10, 29, 57], "4443": [8, 9, 10, 29, 57], "complex128": [8, 9, 10, 29, 57], "6122": [8, 9, 10, 29, 57], "1150": [8, 9, 10, 29, 57], "to_empti": [8, 9, 10, 29, 57], "without": [8, 9, 10, 23, 29, 57], "storag": [8, 9, 10, 29, 57], "dst_type": [8, 9, 10, 29, 57], "unscale_act": [8, 9, 29, 57], "scaled_act": [8, 9, 29, 57], "un": [8, 9, 29, 57], "xpu": [8, 9, 10, 29, 57], "zero_grad": [8, 9, 10, 29, 57], "set_to_non": [8, 9, 10, 29, 57], "under": [8, 9, 10, 29, 39, 57], "feature_dim": 10, "mlpextractor": 10, "latent_polici": 10, "latent_valu": 10, "layer": [10, 57], "ctx_size": [12, 13, 15, 16, 17], "num": [12, 13, 15, 16, 17], "train_batch": 14, "rolloutbuffersampl": 14, "shape": [15, 39, 41, 43, 44, 52, 68, 69, 70, 71, 77, 109, 115, 118, 121], "rang": 15, "dist_tru": 18, "dist_pr": 18, "p": [18, 122], "q": 18, "behaviour": [19, 36], "clone": [19, 20, 124], "supervis": [19, 20], "fix": 19, "dataset": [19, 20, 52, 55], "expert": [19, 20], "demonstr": [19, 125], "humancompatibleai": [19, 52, 54, 55], "imit": [19, 20, 52, 54, 55], "blob": [19, 52, 54, 55], "master": [19, 52, 54, 55], "src": [19, 52, 54, 55], "py": [19, 36, 52, 54, 55, 122], "policy_class": 20, "feedforward32polici": 20, "expert_data": 20, "optimizer_cl": 20, "ent_weight": 20, "001": [20, 22], "l2_weight": 20, "recov": 20, "via": [20, 52], "dataload": [20, 23, 55], "ducktyp": 20, "instanti": [20, 52], "set_expert_data_load": 20, "dure": [20, 39, 41, 43, 44, 68, 69, 70, 71, 77, 109, 115, 118, 121], "optimis": 20, "decai": 20, "regular": 20, "basepolici": [20, 24, 29], "transitionsminim": [20, 36, 50, 51, 53, 55], "default_batch_s": 20, "automat": [20, 39, 41, 43, 44, 68, 69, 70, 71, 77, 109, 115, 118, 121], "save_polici": [20, 24], "policy_path": [20, 24], "reload": [20, 24], "reconstruct_polici": 20, "loader": 20, "act": [20, 41, 43, 44, 52, 53, 68, 69, 70, 71, 77, 109, 115, 118, 121], "demand": 20, "dagger": 20, "interact": [20, 125], "arrai": [20, 39, 47, 52, 54, 59], "shuffl": 20, "n_batch": [20, 23], "on_epoch_end": [20, 23], "on_batch_end": [20, 23], "just": [20, 41, 43, 44, 68, 69, 70, 71, 77, 109, 115, 118, 121], "complet": 20, "through": [20, 23, 39, 41, 43, 44, 68, 69, 70, 71, 77, 109, 115, 118, 121], "one": [20, 23, 39, 41, 43, 44, 68, 69, 70, 71, 77, 109, 115, 118, 121, 124], "stat": 20, "lr": 22, "constant": [22, 29], "_": 22, "data_load": 23, "loop": 23, "stdout": 23, "__iter__": 23, "reconstruct": 24, "been": [24, 39, 52, 64, 67], "marginal_reg_coef": 27, "On": 27, "ex": [27, 34, 35], "partner_idx": [27, 29], "num_partn": 29, "partner_net_arch": 29, "nomain": 29, "schedul": 29, "could": [29, 39, 61], "th": [29, 52], "deviat": 29, "n_featur": 29, "x": [29, 39, 41, 43, 44, 68, 69, 70, 71, 77, 82, 84, 109, 115, 118, 121], "n_action": 29, "std": 29, "architectur": 29, "latent": 29, "empti": [29, 52, 66], "expln": 29, "exp": 29, "keep": 29, "grow": 29, "too": 29, "fast": 29, "practic": 29, "usual": [29, 39, 41, 43, 44, 52, 68, 69, 70, 71, 77, 109, 115, 118, 121], "squash": 29, "boundari": 29, "divid": 29, "255": 29, "action_mask": [29, 46], "features_extractor": 29, "abc": [32, 41, 43, 44, 50, 67], "abstract": [32, 41, 43, 44, 50, 67], "multipl": [32, 33, 41, 43, 44, 50, 68, 69, 70, 71, 77, 78, 100, 107, 108, 109, 114, 115, 118, 121, 122], "sum": [32, 33, 78, 107, 108, 114, 122], "flag": [32, 33, 51, 53, 78, 107, 108, 114, 122], "dummy_env": 33, "sarl": 33, "assum": 33, "interfac": 33, "working_timestep": [34, 35], "1000": [34, 35], "sac": 34, "offpolicyalgorithm": 34, "determin": 34, "realag": 36, "simultaneousrecord": 36, "turnbasedrecord": 36, "get_transit": [36, 67, 69, 71], "simpli": 36, "respons": 37, "unus": 37, "noth": 37, "base_env": [39, 118], "agent_ind": 39, "extract_ob": [39, 41], "partner": [39, 41, 43, 44, 50, 51, 53, 68, 69, 70, 71, 77, 109, 115, 118, 121], "close": [39, 41, 43, 44, 68, 69, 70, 71, 77, 96, 109, 115, 118, 121], "finish": [39, 41, 43, 44, 68, 69, 70, 71, 77, 109, 115, 118, 121], "necessari": [39, 41, 43, 44, 68, 69, 70, 71, 77, 109, 115, 118, 121], "clean": [39, 41, 43, 44, 68, 69, 70, 71, 77, 109, 115, 118, 121], "render": [39, 41, 43, 44, 68, 69, 70, 71, 77, 109, 115, 118, 121], "window": [39, 41, 43, 44, 68, 69, 70, 71, 77, 101, 109, 115, 118, 121], "databas": [39, 41, 43, 44, 68, 69, 70, 71, 77, 109, 115, 118, 121], "connect": [39, 41, 43, 44, 68, 69, 70, 71, 77, 109, 115, 118, 121], "get_wrapper_attr": [39, 41, 43, 44, 68, 69, 70, 71, 77, 109, 115, 118, 121], "np_random": [39, 41, 43, 44, 68, 69, 70, 71, 77, 80, 81, 109, 110, 111, 115, 118, 121, 122], "_np_random": [39, 41, 43, 44, 68, 69, 70, 71, 77, 109, 115, 118, 121], "initialis": [39, 41, 43, 44, 68, 69, 70, 71, 77, 109, 115, 118, 121], "np": [39, 41, 43, 44, 52, 68, 69, 70, 71, 77, 109, 115, 118, 121], "frame": [39, 41, 43, 44, 68, 69, 70, 71, 77, 109, 115, 118, 121], "render_mod": [39, 41, 43, 44, 68, 69, 70, 71, 77, 109, 115, 118, 121], "metadata": [39, 41, 43, 44, 68, 69, 70, 71, 77, 109, 115, 118, 121], "wai": [39, 41, 43, 44, 57, 68, 69, 70, 71, 77, 109, 115, 118, 121], "gymnasium": [39, 41, 43, 44, 68, 69, 70, 71, 77, 109, 115, 118, 121], "As": [39, 41, 43, 44, 68, 69, 70, 71, 77, 109, 115, 118, 121], "known": [39, 41, 43, 44, 68, 69, 70, 71, 77, 109, 115, 118, 121], "__init__": [39, 41, 43, 44, 68, 69, 70, 71, 77, 109, 115, 118, 121, 122], "convent": [39, 41, 43, 44, 68, 69, 70, 71, 77, 109, 115, 118, 121], "human": [39, 41, 43, 44, 68, 69, 70, 71, 77, 109, 115, 118, 121], "continu": [39, 41, 43, 44, 68, 69, 70, 71, 77, 109, 115, 118, 121], "consumpt": [39, 41, 43, 44, 68, 69, 70, 71, 77, 109, 115, 118, 121], "occur": [39, 41, 43, 44, 68, 69, 70, 71, 77, 109, 115, 118, 121], "doesn": [39, 41, 43, 44, 68, 69, 70, 71, 77, 109, 115, 118, 121], "rgb_arrai": [39, 41, 43, 44, 68, 69, 70, 71, 77, 109, 115, 118, 121], "y": [39, 41, 43, 44, 68, 69, 70, 71, 77, 84, 109, 115, 118, 121], "rgb": [39, 41, 43, 44, 68, 69, 70, 71, 77, 109, 115, 118, 121], "pixel": [39, 41, 43, 44, 68, 69, 70, 71, 77, 109, 115, 118, 121], "ansi": [39, 41, 43, 44, 68, 69, 70, 71, 77, 109, 115, 118, 121], "stringio": [39, 41, 43, 44, 68, 69, 70, 71, 77, 109, 115, 118, 121], "style": [39, 41, 43, 44, 68, 69, 70, 71, 77, 93, 109, 115, 118, 121], "text": [39, 41, 43, 44, 68, 69, 70, 71, 77, 109, 115, 118, 121], "newlin": [39, 41, 43, 44, 68, 69, 70, 71, 77, 109, 115, 118, 121], "escap": [39, 41, 43, 44, 68, 69, 70, 71, 77, 109, 115, 118, 121], "sequenc": [39, 41, 43, 44, 55, 68, 69, 70, 71, 77, 109, 115, 118, 121], "color": [39, 41, 43, 44, 68, 69, 70, 71, 77, 84, 109, 115, 118, 121], "rgb_array_list": [39, 41, 43, 44, 68, 69, 70, 71, 77, 109, 115, 118, 121], "ansi_list": [39, 41, 43, 44, 68, 69, 70, 71, 77, 109, 115, 118, 121], "rendercollect": [39, 41, 43, 44, 68, 69, 70, 71, 77, 109, 115, 118, 121], "pop": [39, 41, 43, 44, 68, 69, 70, 71, 77, 109, 115, 118, 121], "sure": [39, 41, 43, 44, 68, 69, 70, 71, 77, 109, 115, 118, 121], "25": [39, 41, 43, 44, 68, 69, 70, 71, 77, 109, 115, 118, 121], "wa": [39, 41, 43, 44, 68, 69, 70, 71, 77, 109, 115, 118, 121, 125], "longer": [39, 41, 43, 44, 68, 69, 70, 71, 77, 109, 115, 118, 121], "rather": [39, 41, 43, 44, 57, 68, 69, 70, 71, 77, 109, 115, 118, 121], "cartpol": [39, 41, 43, 44, 68, 69, 70, 71, 77, 109, 115, 118, 121], "v1": [39, 41, 43, 44, 68, 69, 70, 71, 77, 109, 115, 118, 121], "renderfram": [39, 41, 43, 44, 68, 69, 70, 71, 109, 115, 118, 121], "start": [39, 41, 43, 44, 68, 69, 70, 71, 77, 92, 109, 115, 118, 121], "often": 39, "generalis": 39, "about": [39, 41, 43, 44, 68, 69, 70, 71, 77, 109, 115, 118, 121], "control": 39, "rng": 39, "therefor": 39, "case": 39, "right": 39, "never": 39, "again": 39, "super": 39, "v0": 39, "return_info": 39, "now": 39, "prng": 39, "chosen": 39, "timestamp": 39, "dev": 39, "urandom": 39, "integ": [39, 52], "even": 39, "want": 39, "minim": 39, "obstyp": [39, 41, 43, 44, 68, 69, 70, 71, 77, 109, 115, 118, 121], "element": [39, 52, 66], "analog": 39, "auxiliari": 39, "complement": 39, "dynam": [39, 125], "reach": 39, "truncat": [39, 41, 43, 44, 68, 69, 70, 71, 77, 109, 115, 118, 121], "26": 39, "api": 39, "clearer": 39, "had": 39, "bootstrap": 39, "acttyp": [39, 41, 43, 44, 68, 69, 70, 71, 77, 109, 115, 118, 121], "due": 39, "veloc": 39, "pole": 39, "supportsfloat": 39, "mdp": 39, "task": 39, "neg": 39, "lava": 39, "sutton": 39, "barton": 39, "gridworld": [39, 80, 82, 84], "condit": 39, "outsid": [39, 61], "scope": 39, "satisfi": 39, "timelimit": 39, "indic": 39, "physic": 39, "go": 39, "diagnost": 39, "metric": 39, "describ": 39, "combin": 39, "produc": 39, "v26": 39, "distinguish": 39, "favour": 39, "boolean": 39, "further": 39, "signal": 39, "emit": 39, "mayb": 39, "underli": 39, "solv": 39, "successfulli": 39, "exceed": 39, "simul": 39, "enter": 39, "unwrap": [39, 41, 43, 44, 68, 69, 70, 71, 77, 109, 115, 118, 121], "dummyenv": 40, "kill": 40, "ego_ind": [41, 118], "n_player": 41, "resample_polici": [41, 43, 44, 68, 69, 70, 71, 77, 109, 115, 118, 121], "ego_extractor": 41, "player": [41, 42, 43, 44, 68, 69, 70, 71, 77, 109, 115, 118, 121], "ego": [41, 43, 44, 50, 51, 53, 68, 69, 70, 71, 77, 109, 115, 118, 121], "set_resample_polici": [41, 43, 44, 68, 69, 70, 71, 77, 109, 115, 118, 121], "choos": [41, 43, 44, 52], "add_partner_ag": [41, 43, 44, 68, 69, 70, 71, 77, 109, 115, 118, 121], "player_num": [41, 43, 44, 68, 69, 70, 71, 77, 109, 115, 118, 121], "potenti": [41, 43, 44, 68, 69, 70, 71, 77, 109, 115, 118, 121], "randomli": [41, 43, 44, 68, 69, 70, 71, 77, 109, 115, 118, 121], "them": [41, 43, 44, 68, 69, 70, 71, 77, 109, 115, 118, 121], "getdummyenv": [41, 43, 44, 68, 69, 70, 71, 77, 109, 115, 118, 121], "dummi": [41, 43, 44, 68, 69, 70, 71, 77, 109, 115, 118, 121], "n_reset": [41, 43, 44, 68, 69, 70, 71, 77, 109, 115, 118, 121], "along": [41, 43, 44, 68, 69, 70, 71, 77, 109, 115, 118, 121], "alt": [41, 43, 44, 68, 69, 70, 71, 77, 109, 115, 118, 121], "resample_random": [41, 43, 44, 68, 69, 70, 71, 77, 109, 115, 118, 121], "resample_round_robin": [41, 43, 44, 68, 69, 70, 71, 77, 109, 115, 118, 121], "set_partnerid": [41, 43, 44, 68, 69, 70, 71, 77, 109, 115, 118, 121], "agent_id": [41, 43, 44, 68, 69, 70, 71, 77, 109, 115, 118, 121], "resample_partn": [41, 43, 44, 68, 69, 70, 71, 77, 109, 115, 118, 121], "perspect": [41, 43, 44, 68, 69, 70, 71, 77, 109, 115, 118, 121], "involv": [41, 43, 44, 68, 69, 70, 71, 77, 109, 115, 118, 121], "ego_step": [41, 43, 44, 68, 69, 70, 71, 77, 109, 115, 118, 121], "alt_step": [41, 43, 44, 68, 69, 70, 71, 77, 109, 115, 118, 121], "final": [41, 43, 44, 57, 68, 69, 70, 71, 77, 109, 115, 118, 121], "especi": [41, 43, 44, 68, 69, 70, 71, 77, 109, 115, 118, 121], "turn": [41, 43, 44, 68, 69, 70, 71, 77, 109, 115, 118, 121], "amount": [41, 43, 44, 68, 69, 70, 71, 77, 109, 115, 118, 121], "incorrectli": 42, "simultan": [43, 68], "multi_reset": [43, 44, 68, 69, 70, 71, 77, 109, 115, 121], "give": [43, 44, 68, 70, 77, 109, 115, 121], "multi_step": [43, 68, 69, 121], "ego_act": [43, 68, 69, 121], "alt_act": [43, 68, 69, 121], "probegostart": [44, 115], "egofirst": [44, 70, 71, 77, 109, 115], "partial": [46, 47, 48], "what": 46, "legal": 46, "permit": 46, "mappo": 48, "get_alt_transit": [50, 51, 53], "get_ego_transit": [50, 51, 53], "egoob": 51, "egoact": 51, "altob": 51, "altact": 51, "multitransit": [51, 53, 67], "repo": [52, 54, 55], "subclass": 52, "flatten_trajectori": 52, "index": 52, "tran": 52, "dataclass": [52, 54], "ith": 52, "slice": 52, "action_shap": 52, "observation_shap": 52, "seen": 52, "preced": 52, "dataclass_inst": 54, "comprehens": 54, "quick": 54, "altern": 54, "asdict": 54, "expens": 54, "undocumentedli": 54, "deep": 54, "stackoverflow": 54, "52229565": 54, "1091722": 54, "collate_fn": 55, "feed": 57, "unit": 57, "irl": 57, "origin": 57, "airl": 57, "illeg": 58, "log_prob": 59, "numfram": [60, 68, 70, 72], "framestack": [60, 66], "raw": 61, "basealgorithm": [61, 64], "length": [63, 66, 102], "sde": 64, "defaultelem": 66, "ring": 66, "histori": 66, "queue": 66, "toadd": 66, "overrid": 66, "oldest": 66, "defaultel": 66, "defaultob": [68, 70], "simultaneousenv": [68, 69, 121], "stack": [68, 70], "old": [68, 70], "segment": [68, 70], "multirecord": [69, 71], "simultaneoustransit": 69, "embed": [69, 71], "altenv": 70, "defaultaltob": 70, "turnbasedenv": [70, 71, 77, 109, 115], "turnbasedtransit": 71, "multiagentenv": [72, 73, 118], "width": [80, 81, 91, 99, 101, 102], "num_color": [80, 81], "num_block": 81, "orient": [82, 84], "grid1": 83, "grid2": 83, "2d": 85, "vec4": 87, "attr": [87, 93, 94, 98], "geom": [88, 89, 91, 92, 95, 96], "fname": 91, "height": [91, 99, 101], "stroke": 94, "maxwidth": 97, "500": 97, "translat": 98, "rotat": 98, "spec": 100, "actual": 100, "pyglet": [100, 101], "linux": 100, "Will": 101, "radiu": 103, "30": 103, "pet": 118, "zoo": 118, "aec": 118, "r": 122, "opt": 122, "homebrew": 122, "caskroom": 122, "miniforg": 122, "pantheonrl_dev": 122, "lib": 122, "python3": 122, "site": 122, "recommend": 124, "virtual": 124, "8": 124, "conda": 124, "pantheonrl": 124, "contribut": 124, "git": 124, "stanford": [124, 125], "iliad": [124, 125], "cd": 124, "pip": 124, "directori": 124, "overcooked_extens": 124, "group": 124, "classic": 124, "demo": 125, "aaai": 125, "22": 125, "program": 125, "sarkar2022": 125, "repositori": 125, "13221": 125, "marl": 125, "librari": 125, "video": 125, "youtu": 125, "pf3zh_hpo": 125, "inproceed": 125, "sarkar2022pantheonrl": 125, "titl": 125, "author": 125, "sarkar": 125, "bidipta": 125, "talati": 125, "aditi": 125, "shih": 125, "andi": 125, "sadigh": 125, "dorsa": 125, "booktitl": 125, "proceed": 125, "36th": 125, "confer": 125, "artifici": 125, "intellig": 125, "track": 125, "year": 125, "2022": 125, "instal": 125, "prerequisit": 125, "develop": 125, "pettingzoo": 125, "algo": 125, "gist": 41}, "objects": {"": [[0, 0, 0, "-", "pantheonrl"]], "pantheonrl": [[1, 0, 0, "-", "algos"], [30, 0, 0, "-", "common"], [74, 0, 0, "-", "envs"]], "pantheonrl.algos": [[2, 0, 0, "-", "adap"], [19, 0, 0, "-", "bc"], [25, 0, 0, "-", "modular"]], "pantheonrl.algos.adap": [[3, 0, 0, "-", "adap_learn"], [5, 0, 0, "-", "agent"], [7, 0, 0, "-", "policies"], [11, 0, 0, "-", "util"]], "pantheonrl.algos.adap.adap_learn": [[4, 1, 1, "", "ADAP"]], "pantheonrl.algos.adap.adap_learn.ADAP": [[4, 2, 1, "", "collect_rollouts"], [4, 2, 1, "", "get_env"], [4, 2, 1, "", "get_parameters"], [4, 2, 1, "", "get_vec_normalize_env"], [4, 2, 1, "", "learn"], [4, 2, 1, "", "load"], [4, 3, 1, "", "logger"], [4, 2, 1, "", "predict"], [4, 2, 1, "", "save"], [4, 2, 1, "", "set_env"], [4, 2, 1, "", "set_logger"], [4, 2, 1, "", "set_parameters"], [4, 2, 1, "", "set_random_seed"], [4, 2, 1, "", "train"]], "pantheonrl.algos.adap.agent": [[6, 1, 1, "", "AdapAgent"]], "pantheonrl.algos.adap.agent.AdapAgent": [[6, 2, 1, "", "get_action"], [6, 2, 1, "", "learn"], [6, 2, 1, "", "update"]], "pantheonrl.algos.adap.policies": [[8, 1, 1, "", "AdapPolicy"], [9, 1, 1, "", "AdapPolicyMult"], [10, 1, 1, "", "MultModel"]], "pantheonrl.algos.adap.policies.AdapPolicy": [[8, 2, 1, "", "__call__"], [8, 2, 1, "", "add_module"], [8, 2, 1, "", "apply"], [8, 2, 1, "", "bfloat16"], [8, 2, 1, "", "buffers"], [8, 2, 1, "", "children"], [8, 2, 1, "", "cpu"], [8, 2, 1, "", "cuda"], [8, 3, 1, "", "device"], [8, 2, 1, "", "double"], [8, 2, 1, "", "eval"], [8, 2, 1, "", "evaluate_actions"], [8, 2, 1, "", "extra_repr"], [8, 2, 1, "", "extract_features"], [8, 2, 1, "", "float"], [8, 2, 1, "", "forward"], [8, 2, 1, "", "get_buffer"], [8, 2, 1, "", "get_distribution"], [8, 2, 1, "", "get_extra_state"], [8, 2, 1, "", "get_parameter"], [8, 2, 1, "", "get_submodule"], [8, 2, 1, "", "half"], [8, 2, 1, "", "init_weights"], [8, 2, 1, "", "ipu"], [8, 2, 1, "", "is_vectorized_observation"], [8, 2, 1, "", "load"], [8, 2, 1, "", "load_from_vector"], [8, 2, 1, "", "load_state_dict"], [8, 2, 1, "", "make_features_extractor"], [8, 2, 1, "", "modules"], [8, 2, 1, "", "named_buffers"], [8, 2, 1, "", "named_children"], [8, 2, 1, "", "named_modules"], [8, 2, 1, "", "named_parameters"], [8, 2, 1, "", "obs_to_tensor"], [8, 2, 1, "", "parameters"], [8, 2, 1, "", "parameters_to_vector"], [8, 2, 1, "", "predict"], [8, 2, 1, "", "predict_values"], [8, 2, 1, "", "register_backward_hook"], [8, 2, 1, "", "register_buffer"], [8, 2, 1, "", "register_forward_hook"], [8, 2, 1, "", "register_forward_pre_hook"], [8, 2, 1, "", "register_full_backward_hook"], [8, 2, 1, "", "register_full_backward_pre_hook"], [8, 2, 1, "", "register_load_state_dict_post_hook"], [8, 2, 1, "", "register_module"], [8, 2, 1, "", "register_parameter"], [8, 2, 1, "", "register_state_dict_pre_hook"], [8, 2, 1, "", "requires_grad_"], [8, 2, 1, "", "reset_noise"], [8, 2, 1, "", "save"], [8, 2, 1, "", "scale_action"], [8, 2, 1, "", "set_extra_state"], [8, 2, 1, "", "set_training_mode"], [8, 2, 1, "", "share_memory"], [8, 3, 1, "", "squash_output"], [8, 2, 1, "", "state_dict"], [8, 2, 1, "", "to"], [8, 2, 1, "", "to_empty"], [8, 2, 1, "", "train"], [8, 2, 1, "", "type"], [8, 2, 1, "", "unscale_action"], [8, 2, 1, "", "xpu"], [8, 2, 1, "", "zero_grad"]], "pantheonrl.algos.adap.policies.AdapPolicyMult": [[9, 2, 1, "", "__call__"], [9, 2, 1, "", "add_module"], [9, 2, 1, "", "apply"], [9, 2, 1, "", "bfloat16"], [9, 2, 1, "", "buffers"], [9, 2, 1, "", "children"], [9, 2, 1, "", "cpu"], [9, 2, 1, "", "cuda"], [9, 3, 1, "", "device"], [9, 2, 1, "", "double"], [9, 2, 1, "", "eval"], [9, 2, 1, "", "evaluate_actions"], [9, 2, 1, "", "extra_repr"], [9, 2, 1, "", "extract_features"], [9, 2, 1, "", "float"], [9, 2, 1, "", "forward"], [9, 2, 1, "", "get_buffer"], [9, 2, 1, "", "get_distribution"], [9, 2, 1, "", "get_extra_state"], [9, 2, 1, "", "get_parameter"], [9, 2, 1, "", "get_submodule"], [9, 2, 1, "", "half"], [9, 2, 1, "", "init_weights"], [9, 2, 1, "", "ipu"], [9, 2, 1, "", "is_vectorized_observation"], [9, 2, 1, "", "load"], [9, 2, 1, "", "load_from_vector"], [9, 2, 1, "", "load_state_dict"], [9, 2, 1, "", "make_features_extractor"], [9, 2, 1, "", "modules"], [9, 2, 1, "", "named_buffers"], [9, 2, 1, "", "named_children"], [9, 2, 1, "", "named_modules"], [9, 2, 1, "", "named_parameters"], [9, 2, 1, "", "obs_to_tensor"], [9, 2, 1, "", "parameters"], [9, 2, 1, "", "parameters_to_vector"], [9, 2, 1, "", "predict"], [9, 2, 1, "", "predict_values"], [9, 2, 1, "", "register_backward_hook"], [9, 2, 1, "", "register_buffer"], [9, 2, 1, "", "register_forward_hook"], [9, 2, 1, "", "register_forward_pre_hook"], [9, 2, 1, "", "register_full_backward_hook"], [9, 2, 1, "", "register_full_backward_pre_hook"], [9, 2, 1, "", "register_load_state_dict_post_hook"], [9, 2, 1, "", "register_module"], [9, 2, 1, "", "register_parameter"], [9, 2, 1, "", "register_state_dict_pre_hook"], [9, 2, 1, "", "requires_grad_"], [9, 2, 1, "", "reset_noise"], [9, 2, 1, "", "save"], [9, 2, 1, "", "scale_action"], [9, 2, 1, "", "set_extra_state"], [9, 2, 1, "", "set_training_mode"], [9, 2, 1, "", "share_memory"], [9, 3, 1, "", "squash_output"], [9, 2, 1, "", "state_dict"], [9, 2, 1, "", "to"], [9, 2, 1, "", "to_empty"], [9, 2, 1, "", "train"], [9, 2, 1, "", "type"], [9, 2, 1, "", "unscale_action"], [9, 2, 1, "", "xpu"], [9, 2, 1, "", "zero_grad"]], "pantheonrl.algos.adap.policies.MultModel": [[10, 2, 1, "", "__call__"], [10, 2, 1, "", "add_module"], [10, 2, 1, "", "apply"], [10, 2, 1, "", "bfloat16"], [10, 2, 1, "", "buffers"], [10, 2, 1, "", "children"], [10, 2, 1, "", "cpu"], [10, 2, 1, "", "cuda"], [10, 2, 1, "", "double"], [10, 2, 1, "", "eval"], [10, 2, 1, "", "extra_repr"], [10, 2, 1, "", "float"], [10, 2, 1, "", "forward"], [10, 2, 1, "", "get_buffer"], [10, 2, 1, "", "get_extra_state"], [10, 2, 1, "", "get_parameter"], [10, 2, 1, "", "get_submodule"], [10, 2, 1, "", "half"], [10, 2, 1, "", "ipu"], [10, 2, 1, "", "load_state_dict"], [10, 2, 1, "", "modules"], [10, 2, 1, "", "named_buffers"], [10, 2, 1, "", "named_children"], [10, 2, 1, "", "named_modules"], [10, 2, 1, "", "named_parameters"], [10, 2, 1, "", "parameters"], [10, 2, 1, "", "register_backward_hook"], [10, 2, 1, "", "register_buffer"], [10, 2, 1, "", "register_forward_hook"], [10, 2, 1, "", "register_forward_pre_hook"], [10, 2, 1, "", "register_full_backward_hook"], [10, 2, 1, "", "register_full_backward_pre_hook"], [10, 2, 1, "", "register_load_state_dict_post_hook"], [10, 2, 1, "", "register_module"], [10, 2, 1, "", "register_parameter"], [10, 2, 1, "", "register_state_dict_pre_hook"], [10, 2, 1, "", "requires_grad_"], [10, 2, 1, "", "set_extra_state"], [10, 2, 1, "", "share_memory"], [10, 2, 1, "", "state_dict"], [10, 2, 1, "", "to"], [10, 2, 1, "", "to_empty"], [10, 2, 1, "", "train"], [10, 2, 1, "", "type"], [10, 2, 1, "", "xpu"], [10, 2, 1, "", "zero_grad"]], "pantheonrl.algos.adap.util": [[12, 4, 1, "", "get_L2_sphere"], [13, 4, 1, "", "get_categorical"], [14, 4, 1, "", "get_context_kl_loss"], [15, 4, 1, "", "get_natural_number"], [16, 4, 1, "", "get_positive_square"], [17, 4, 1, "", "get_unit_square"], [18, 4, 1, "", "kl_divergence"]], "pantheonrl.algos.bc": [[20, 1, 1, "", "BC"], [21, 1, 1, "", "BCShell"], [22, 1, 1, "", "ConstantLRSchedule"], [23, 1, 1, "", "EpochOrBatchIteratorWithProgress"], [24, 4, 1, "", "reconstruct_policy"]], "pantheonrl.algos.bc.BC": [[20, 5, 1, "", "DEFAULT_BATCH_SIZE"], [20, 2, 1, "", "save_policy"], [20, 2, 1, "", "set_expert_data_loader"], [20, 2, 1, "", "train"]], "pantheonrl.algos.bc.ConstantLRSchedule": [[22, 2, 1, "", "__call__"]], "pantheonrl.algos.modular": [[26, 0, 0, "-", "learn"], [28, 0, 0, "-", "policies"]], "pantheonrl.algos.modular.learn": [[27, 1, 1, "", "ModularAlgorithm"]], "pantheonrl.algos.modular.learn.ModularAlgorithm": [[27, 2, 1, "", "collect_rollouts"], [27, 2, 1, "", "get_env"], [27, 2, 1, "", "get_parameters"], [27, 2, 1, "", "get_vec_normalize_env"], [27, 2, 1, "", "learn"], [27, 2, 1, "", "load"], [27, 3, 1, "", "logger"], [27, 2, 1, "", "predict"], [27, 2, 1, "", "save"], [27, 2, 1, "", "set_env"], [27, 2, 1, "", "set_logger"], [27, 2, 1, "", "set_parameters"], [27, 2, 1, "", "set_random_seed"], [27, 2, 1, "", "train"]], "pantheonrl.algos.modular.policies": [[29, 1, 1, "", "ModularPolicy"]], "pantheonrl.algos.modular.policies.ModularPolicy": [[29, 2, 1, "", "__call__"], [29, 2, 1, "", "add_module"], [29, 2, 1, "", "apply"], [29, 2, 1, "", "bfloat16"], [29, 2, 1, "", "buffers"], [29, 2, 1, "", "children"], [29, 2, 1, "", "cpu"], [29, 2, 1, "", "cuda"], [29, 3, 1, "", "device"], [29, 2, 1, "", "double"], [29, 2, 1, "", "eval"], [29, 2, 1, "", "evaluate_actions"], [29, 2, 1, "", "extra_repr"], [29, 2, 1, "", "extract_features"], [29, 2, 1, "", "float"], [29, 2, 1, "", "forward"], [29, 2, 1, "", "get_buffer"], [29, 2, 1, "", "get_extra_state"], [29, 2, 1, "", "get_parameter"], [29, 2, 1, "", "get_submodule"], [29, 2, 1, "", "half"], [29, 2, 1, "", "init_weights"], [29, 2, 1, "", "ipu"], [29, 2, 1, "", "is_vectorized_observation"], [29, 2, 1, "", "load"], [29, 2, 1, "", "load_from_vector"], [29, 2, 1, "", "load_state_dict"], [29, 2, 1, "", "make_features_extractor"], [29, 2, 1, "", "modules"], [29, 2, 1, "", "named_buffers"], [29, 2, 1, "", "named_children"], [29, 2, 1, "", "named_modules"], [29, 2, 1, "", "named_parameters"], [29, 2, 1, "", "obs_to_tensor"], [29, 2, 1, "", "parameters"], [29, 2, 1, "", "parameters_to_vector"], [29, 2, 1, "", "predict"], [29, 2, 1, "", "register_backward_hook"], [29, 2, 1, "", "register_buffer"], [29, 2, 1, "", "register_forward_hook"], [29, 2, 1, "", "register_forward_pre_hook"], [29, 2, 1, "", "register_full_backward_hook"], [29, 2, 1, "", "register_full_backward_pre_hook"], [29, 2, 1, "", "register_load_state_dict_post_hook"], [29, 2, 1, "", "register_module"], [29, 2, 1, "", "register_parameter"], [29, 2, 1, "", "register_state_dict_pre_hook"], [29, 2, 1, "", "requires_grad_"], [29, 2, 1, "", "reset_noise"], [29, 2, 1, "", "save"], [29, 2, 1, "", "scale_action"], [29, 2, 1, "", "set_extra_state"], [29, 2, 1, "", "set_training_mode"], [29, 2, 1, "", "share_memory"], [29, 3, 1, "", "squash_output"], [29, 2, 1, "", "state_dict"], [29, 2, 1, "", "to"], [29, 2, 1, "", "to_empty"], [29, 2, 1, "", "train"], [29, 2, 1, "", "type"], [29, 2, 1, "", "unscale_action"], [29, 2, 1, "", "xpu"], [29, 2, 1, "", "zero_grad"]], "pantheonrl.common": [[31, 0, 0, "-", "agents"], [38, 0, 0, "-", "multiagentenv"], [45, 0, 0, "-", "observation"], [49, 0, 0, "-", "trajsaver"], [56, 0, 0, "-", "util"], [65, 0, 0, "-", "wrappers"]], "pantheonrl.common.agents": [[32, 1, 1, "", "Agent"], [33, 1, 1, "", "DummyAgent"], [34, 1, 1, "", "OffPolicyAgent"], [35, 1, 1, "", "OnPolicyAgent"], [36, 1, 1, "", "RecordingAgentWrapper"], [37, 1, 1, "", "StaticPolicyAgent"]], "pantheonrl.common.agents.Agent": [[32, 2, 1, "", "get_action"], [32, 2, 1, "", "update"]], "pantheonrl.common.agents.DummyAgent": [[33, 2, 1, "", "get_action"], [33, 2, 1, "", "update"]], "pantheonrl.common.agents.OffPolicyAgent": [[34, 2, 1, "", "get_action"], [34, 2, 1, "", "update"]], "pantheonrl.common.agents.OnPolicyAgent": [[35, 2, 1, "", "get_action"], [35, 2, 1, "", "learn"], [35, 2, 1, "", "update"]], "pantheonrl.common.agents.RecordingAgentWrapper": [[36, 2, 1, "", "get_action"], [36, 2, 1, "", "get_transitions"], [36, 2, 1, "", "update"]], "pantheonrl.common.agents.StaticPolicyAgent": [[37, 2, 1, "", "get_action"], [37, 2, 1, "", "update"]], "pantheonrl.common.multiagentenv": [[39, 1, 1, "", "DummyEnv"], [40, 6, 1, "", "KillEnvException"], [41, 1, 1, "", "MultiAgentEnv"], [42, 6, 1, "", "PlayerException"], [43, 1, 1, "", "SimultaneousEnv"], [44, 1, 1, "", "TurnBasedEnv"]], "pantheonrl.common.multiagentenv.DummyEnv": [[39, 2, 1, "", "close"], [39, 2, 1, "", "get_wrapper_attr"], [39, 3, 1, "", "np_random"], [39, 2, 1, "", "render"], [39, 2, 1, "", "reset"], [39, 2, 1, "", "step"], [39, 3, 1, "", "unwrapped"]], "pantheonrl.common.multiagentenv.MultiAgentEnv": [[41, 2, 1, "", "add_partner_agent"], [41, 2, 1, "", "close"], [41, 2, 1, "", "getDummyEnv"], [41, 2, 1, "", "get_wrapper_attr"], [41, 2, 1, "", "n_reset"], [41, 2, 1, "", "n_step"], [41, 3, 1, "", "np_random"], [41, 2, 1, "", "render"], [41, 2, 1, "", "resample_random"], [41, 2, 1, "", "resample_round_robin"], [41, 2, 1, "", "reset"], [41, 2, 1, "", "set_partnerid"], [41, 2, 1, "", "set_resample_policy"], [41, 2, 1, "", "step"], [41, 3, 1, "", "unwrapped"]], "pantheonrl.common.multiagentenv.SimultaneousEnv": [[43, 2, 1, "", "add_partner_agent"], [43, 2, 1, "", "close"], [43, 2, 1, "", "getDummyEnv"], [43, 2, 1, "", "get_wrapper_attr"], [43, 2, 1, "", "multi_reset"], [43, 2, 1, "", "multi_step"], [43, 2, 1, "", "n_reset"], [43, 2, 1, "", "n_step"], [43, 3, 1, "", "np_random"], [43, 2, 1, "", "render"], [43, 2, 1, "", "resample_random"], [43, 2, 1, "", "resample_round_robin"], [43, 2, 1, "", "reset"], [43, 2, 1, "", "set_partnerid"], [43, 2, 1, "", "set_resample_policy"], [43, 2, 1, "", "step"], [43, 3, 1, "", "unwrapped"]], "pantheonrl.common.multiagentenv.TurnBasedEnv": [[44, 2, 1, "", "add_partner_agent"], [44, 2, 1, "", "alt_step"], [44, 2, 1, "", "close"], [44, 2, 1, "", "ego_step"], [44, 2, 1, "", "getDummyEnv"], [44, 2, 1, "", "get_wrapper_attr"], [44, 2, 1, "", "multi_reset"], [44, 2, 1, "", "n_reset"], [44, 2, 1, "", "n_step"], [44, 3, 1, "", "np_random"], [44, 2, 1, "", "render"], [44, 2, 1, "", "resample_random"], [44, 2, 1, "", "resample_round_robin"], [44, 2, 1, "", "reset"], [44, 2, 1, "", "set_partnerid"], [44, 2, 1, "", "set_resample_policy"], [44, 2, 1, "", "step"], [44, 3, 1, "", "unwrapped"]], "pantheonrl.common.observation": [[46, 1, 1, "", "Observation"], [47, 4, 1, "", "extract_obs"], [48, 4, 1, "", "extract_partial_obs"]], "pantheonrl.common.trajsaver": [[50, 1, 1, "", "MultiTransitions"], [51, 1, 1, "", "SimultaneousTransitions"], [52, 1, 1, "", "TransitionsMinimal"], [53, 1, 1, "", "TurnBasedTransitions"], [54, 4, 1, "", "dataclass_quick_asdict"], [55, 4, 1, "", "transitions_collate_fn"]], "pantheonrl.common.trajsaver.MultiTransitions": [[50, 2, 1, "", "get_alt_transitions"], [50, 2, 1, "", "get_ego_transitions"]], "pantheonrl.common.trajsaver.SimultaneousTransitions": [[51, 2, 1, "", "get_alt_transitions"], [51, 2, 1, "", "get_ego_transitions"]], "pantheonrl.common.trajsaver.TransitionsMinimal": [[52, 5, 1, "", "acts"], [52, 5, 1, "", "obs"]], "pantheonrl.common.trajsaver.TurnBasedTransitions": [[53, 2, 1, "", "get_alt_transitions"], [53, 2, 1, "", "get_ego_transitions"]], "pantheonrl.common.util": [[57, 1, 1, "", "FeedForward32Policy"], [58, 6, 1, "", "SpaceException"], [59, 4, 1, "", "action_from_policy"], [60, 4, 1, "", "calculate_space"], [61, 4, 1, "", "clip_actions"], [62, 4, 1, "", "get_default_obs"], [63, 4, 1, "", "get_space_size"], [64, 4, 1, "", "resample_noise"]], "pantheonrl.common.util.FeedForward32Policy": [[57, 2, 1, "", "__call__"], [57, 2, 1, "", "add_module"], [57, 2, 1, "", "apply"], [57, 2, 1, "", "bfloat16"], [57, 2, 1, "", "buffers"], [57, 2, 1, "", "children"], [57, 2, 1, "", "cpu"], [57, 2, 1, "", "cuda"], [57, 3, 1, "", "device"], [57, 2, 1, "", "double"], [57, 2, 1, "", "eval"], [57, 2, 1, "", "evaluate_actions"], [57, 2, 1, "", "extra_repr"], [57, 2, 1, "", "extract_features"], [57, 2, 1, "", "float"], [57, 2, 1, "", "forward"], [57, 2, 1, "", "get_buffer"], [57, 2, 1, "", "get_distribution"], [57, 2, 1, "", "get_extra_state"], [57, 2, 1, "", "get_parameter"], [57, 2, 1, "", "get_submodule"], [57, 2, 1, "", "half"], [57, 2, 1, "", "init_weights"], [57, 2, 1, "", "ipu"], [57, 2, 1, "", "is_vectorized_observation"], [57, 2, 1, "", "load"], [57, 2, 1, "", "load_from_vector"], [57, 2, 1, "", "load_state_dict"], [57, 2, 1, "", "make_features_extractor"], [57, 2, 1, "", "modules"], [57, 2, 1, "", "named_buffers"], [57, 2, 1, "", "named_children"], [57, 2, 1, "", "named_modules"], [57, 2, 1, "", "named_parameters"], [57, 2, 1, "", "obs_to_tensor"], [57, 2, 1, "", "parameters"], [57, 2, 1, "", "parameters_to_vector"], [57, 2, 1, "", "predict"], [57, 2, 1, "", "predict_values"], [57, 2, 1, "", "register_backward_hook"], [57, 2, 1, "", "register_buffer"], [57, 2, 1, "", "register_forward_hook"], [57, 2, 1, "", "register_forward_pre_hook"], [57, 2, 1, "", "register_full_backward_hook"], [57, 2, 1, "", "register_full_backward_pre_hook"], [57, 2, 1, "", "register_load_state_dict_post_hook"], [57, 2, 1, "", "register_module"], [57, 2, 1, "", "register_parameter"], [57, 2, 1, "", "register_state_dict_pre_hook"], [57, 2, 1, "", "requires_grad_"], [57, 2, 1, "", "reset_noise"], [57, 2, 1, "", "save"], [57, 2, 1, "", "scale_action"], [57, 2, 1, "", "set_extra_state"], [57, 2, 1, "", "set_training_mode"], [57, 2, 1, "", "share_memory"], [57, 3, 1, "", "squash_output"], [57, 2, 1, "", "state_dict"], [57, 2, 1, "", "to"], [57, 2, 1, "", "to_empty"], [57, 2, 1, "", "train"], [57, 2, 1, "", "type"], [57, 2, 1, "", "unscale_action"], [57, 2, 1, "", "xpu"], [57, 2, 1, "", "zero_grad"]], "pantheonrl.common.wrappers": [[66, 1, 1, "", "HistoryQueue"], [67, 1, 1, "", "MultiRecorder"], [68, 1, 1, "", "SimultaneousFrameStack"], [69, 1, 1, "", "SimultaneousRecorder"], [70, 1, 1, "", "TurnBasedFrameStack"], [71, 1, 1, "", "TurnBasedRecorder"], [72, 4, 1, "", "frame_wrap"], [73, 4, 1, "", "recorder_wrap"]], "pantheonrl.common.wrappers.HistoryQueue": [[66, 2, 1, "", "add"], [66, 2, 1, "", "reset"]], "pantheonrl.common.wrappers.MultiRecorder": [[67, 2, 1, "", "get_transitions"]], "pantheonrl.common.wrappers.SimultaneousFrameStack": [[68, 2, 1, "", "add_partner_agent"], [68, 2, 1, "", "close"], [68, 2, 1, "", "getDummyEnv"], [68, 2, 1, "", "get_wrapper_attr"], [68, 2, 1, "", "multi_reset"], [68, 2, 1, "", "multi_step"], [68, 2, 1, "", "n_reset"], [68, 2, 1, "", "n_step"], [68, 3, 1, "", "np_random"], [68, 2, 1, "", "render"], [68, 2, 1, "", "resample_random"], [68, 2, 1, "", "resample_round_robin"], [68, 2, 1, "", "reset"], [68, 2, 1, "", "set_partnerid"], [68, 2, 1, "", "set_resample_policy"], [68, 2, 1, "", "step"], [68, 3, 1, "", "unwrapped"]], "pantheonrl.common.wrappers.SimultaneousRecorder": [[69, 2, 1, "", "add_partner_agent"], [69, 2, 1, "", "close"], [69, 2, 1, "", "getDummyEnv"], [69, 2, 1, "", "get_transitions"], [69, 2, 1, "", "get_wrapper_attr"], [69, 2, 1, "", "multi_reset"], [69, 2, 1, "", "multi_step"], [69, 2, 1, "", "n_reset"], [69, 2, 1, "", "n_step"], [69, 3, 1, "", "np_random"], [69, 2, 1, "", "render"], [69, 2, 1, "", "resample_random"], [69, 2, 1, "", "resample_round_robin"], [69, 2, 1, "", "reset"], [69, 2, 1, "", "set_partnerid"], [69, 2, 1, "", "set_resample_policy"], [69, 2, 1, "", "step"], [69, 3, 1, "", "unwrapped"]], "pantheonrl.common.wrappers.TurnBasedFrameStack": [[70, 2, 1, "", "add_partner_agent"], [70, 2, 1, "", "alt_step"], [70, 2, 1, "", "close"], [70, 2, 1, "", "ego_step"], [70, 2, 1, "", "getDummyEnv"], [70, 2, 1, "", "get_wrapper_attr"], [70, 2, 1, "", "multi_reset"], [70, 2, 1, "", "n_reset"], [70, 2, 1, "", "n_step"], [70, 3, 1, "", "np_random"], [70, 2, 1, "", "render"], [70, 2, 1, "", "resample_random"], [70, 2, 1, "", "resample_round_robin"], [70, 2, 1, "", "reset"], [70, 2, 1, "", "set_partnerid"], [70, 2, 1, "", "set_resample_policy"], [70, 2, 1, "", "step"], [70, 3, 1, "", "unwrapped"]], "pantheonrl.common.wrappers.TurnBasedRecorder": [[71, 2, 1, "", "add_partner_agent"], [71, 2, 1, "", "alt_step"], [71, 2, 1, "", "close"], [71, 2, 1, "", "ego_step"], [71, 2, 1, "", "getDummyEnv"], [71, 2, 1, "", "get_transitions"], [71, 2, 1, "", "get_wrapper_attr"], [71, 2, 1, "", "multi_reset"], [71, 2, 1, "", "n_reset"], [71, 2, 1, "", "n_step"], [71, 3, 1, "", "np_random"], [71, 2, 1, "", "render"], [71, 2, 1, "", "resample_random"], [71, 2, 1, "", "resample_round_robin"], [71, 2, 1, "", "reset"], [71, 2, 1, "", "set_partnerid"], [71, 2, 1, "", "set_resample_policy"], [71, 2, 1, "", "step"], [71, 3, 1, "", "unwrapped"]], "pantheonrl.envs": [[75, 0, 0, "-", "blockworldgym"], [112, 0, 0, "-", "liargym"], [117, 0, 0, "-", "pettingzoo"], [119, 0, 0, "-", "rpsgym"]], "pantheonrl.envs.blockworldgym": [[76, 0, 0, "-", "blockworld"], [79, 0, 0, "-", "gridutils"], [85, 0, 0, "-", "rendering"], [106, 0, 0, "-", "simpleblockworld"]], "pantheonrl.envs.blockworldgym.blockworld": [[77, 1, 1, "", "BlockEnv"], [78, 1, 1, "", "DefaultConstructorAgent"]], "pantheonrl.envs.blockworldgym.blockworld.BlockEnv": [[77, 2, 1, "", "add_partner_agent"], [77, 2, 1, "", "alt_step"], [77, 2, 1, "", "close"], [77, 2, 1, "", "ego_step"], [77, 2, 1, "", "getDummyEnv"], [77, 2, 1, "", "get_wrapper_attr"], [77, 2, 1, "", "multi_reset"], [77, 2, 1, "", "n_reset"], [77, 2, 1, "", "n_step"], [77, 3, 1, "", "np_random"], [77, 2, 1, "", "render"], [77, 2, 1, "", "resample_random"], [77, 2, 1, "", "resample_round_robin"], [77, 2, 1, "", "reset"], [77, 2, 1, "", "set_partnerid"], [77, 2, 1, "", "set_resample_policy"], [77, 2, 1, "", "step"], [77, 3, 1, "", "unwrapped"]], "pantheonrl.envs.blockworldgym.blockworld.DefaultConstructorAgent": [[78, 2, 1, "", "get_action"], [78, 2, 1, "", "update"]], "pantheonrl.envs.blockworldgym.gridutils": [[80, 4, 1, "", "drop_random"], [81, 4, 1, "", "generate_random_world"], [82, 4, 1, "", "gravity"], [83, 4, 1, "", "matches"], [84, 4, 1, "", "place"]], "pantheonrl.envs.blockworldgym.rendering": [[86, 1, 1, "", "Attr"], [87, 1, 1, "", "Color"], [88, 1, 1, "", "Compound"], [89, 1, 1, "", "FilledPolygon"], [90, 1, 1, "", "Geom"], [91, 1, 1, "", "Image"], [92, 1, 1, "", "Line"], [93, 1, 1, "", "LineStyle"], [94, 1, 1, "", "LineWidth"], [95, 1, 1, "", "Point"], [96, 1, 1, "", "PolyLine"], [97, 1, 1, "", "SimpleImageViewer"], [98, 1, 1, "", "Transform"], [99, 1, 1, "", "Viewer"], [100, 4, 1, "", "get_display"], [101, 4, 1, "", "get_window"], [102, 4, 1, "", "make_capsule"], [103, 4, 1, "", "make_circle"], [104, 4, 1, "", "make_polygon"], [105, 4, 1, "", "make_polyline"]], "pantheonrl.envs.blockworldgym.simpleblockworld": [[107, 1, 1, "", "SBWDefaultAgent"], [108, 1, 1, "", "SBWEasyPartner"], [109, 1, 1, "", "SimpleBlockEnv"], [110, 4, 1, "", "generate_grid_world"], [111, 4, 1, "", "random_block"]], "pantheonrl.envs.blockworldgym.simpleblockworld.SBWDefaultAgent": [[107, 2, 1, "", "get_action"], [107, 2, 1, "", "update"]], "pantheonrl.envs.blockworldgym.simpleblockworld.SBWEasyPartner": [[108, 2, 1, "", "get_action"], [108, 2, 1, "", "update"]], "pantheonrl.envs.blockworldgym.simpleblockworld.SimpleBlockEnv": [[109, 2, 1, "", "add_partner_agent"], [109, 2, 1, "", "alt_step"], [109, 2, 1, "", "close"], [109, 2, 1, "", "ego_step"], [109, 2, 1, "", "getDummyEnv"], [109, 2, 1, "", "get_wrapper_attr"], [109, 2, 1, "", "multi_reset"], [109, 2, 1, "", "n_reset"], [109, 2, 1, "", "n_step"], [109, 3, 1, "", "np_random"], [109, 2, 1, "", "render"], [109, 2, 1, "", "resample_random"], [109, 2, 1, "", "resample_round_robin"], [109, 2, 1, "", "reset"], [109, 2, 1, "", "set_partnerid"], [109, 2, 1, "", "set_resample_policy"], [109, 2, 1, "", "step"], [109, 3, 1, "", "unwrapped"]], "pantheonrl.envs.liargym": [[113, 0, 0, "-", "liar"]], "pantheonrl.envs.liargym.liar": [[114, 1, 1, "", "LiarDefaultAgent"], [115, 1, 1, "", "LiarEnv"], [116, 4, 1, "", "randRoll"]], "pantheonrl.envs.liargym.liar.LiarDefaultAgent": [[114, 2, 1, "", "get_action"], [114, 2, 1, "", "update"]], "pantheonrl.envs.liargym.liar.LiarEnv": [[115, 2, 1, "", "add_partner_agent"], [115, 2, 1, "", "alt_step"], [115, 2, 1, "", "close"], [115, 2, 1, "", "ego_step"], [115, 2, 1, "", "getDummyEnv"], [115, 2, 1, "", "get_wrapper_attr"], [115, 2, 1, "", "multi_reset"], [115, 2, 1, "", "n_reset"], [115, 2, 1, "", "n_step"], [115, 3, 1, "", "np_random"], [115, 2, 1, "", "render"], [115, 2, 1, "", "resample_random"], [115, 2, 1, "", "resample_round_robin"], [115, 2, 1, "", "reset"], [115, 2, 1, "", "set_partnerid"], [115, 2, 1, "", "set_resample_policy"], [115, 2, 1, "", "step"], [115, 3, 1, "", "unwrapped"]], "pantheonrl.envs.pettingzoo": [[118, 1, 1, "", "PettingZooAECWrapper"]], "pantheonrl.envs.pettingzoo.PettingZooAECWrapper": [[118, 2, 1, "", "add_partner_agent"], [118, 2, 1, "", "close"], [118, 2, 1, "", "getDummyEnv"], [118, 2, 1, "", "get_wrapper_attr"], [118, 2, 1, "", "n_reset"], [118, 2, 1, "", "n_step"], [118, 3, 1, "", "np_random"], [118, 2, 1, "", "render"], [118, 2, 1, "", "resample_random"], [118, 2, 1, "", "resample_round_robin"], [118, 2, 1, "", "reset"], [118, 2, 1, "", "set_partnerid"], [118, 2, 1, "", "set_resample_policy"], [118, 2, 1, "", "step"], [118, 3, 1, "", "unwrapped"]], "pantheonrl.envs.rpsgym": [[120, 0, 0, "-", "rps"]], "pantheonrl.envs.rpsgym.rps": [[121, 1, 1, "", "RPSEnv"], [122, 1, 1, "", "RPSWeightedAgent"]], "pantheonrl.envs.rpsgym.rps.RPSEnv": [[121, 2, 1, "", "add_partner_agent"], [121, 2, 1, "", "close"], [121, 2, 1, "", "getDummyEnv"], [121, 2, 1, "", "get_wrapper_attr"], [121, 2, 1, "", "multi_reset"], [121, 2, 1, "", "multi_step"], [121, 2, 1, "", "n_reset"], [121, 2, 1, "", "n_step"], [121, 3, 1, "", "np_random"], [121, 2, 1, "", "render"], [121, 2, 1, "", "resample_random"], [121, 2, 1, "", "resample_round_robin"], [121, 2, 1, "", "reset"], [121, 2, 1, "", "set_partnerid"], [121, 2, 1, "", "set_resample_policy"], [121, 2, 1, "", "step"], [121, 3, 1, "", "unwrapped"]], "pantheonrl.envs.rpsgym.rps.RPSWeightedAgent": [[122, 2, 1, "", "get_action"], [122, 2, 1, "", "update"]]}, "objtypes": {"0": "py:module", "1": "py:class", "2": "py:method", "3": "py:property", "4": "py:function", "5": "py:attribute", "6": "py:exception"}, "objnames": {"0": ["py", "module", "Python module"], "1": ["py", "class", "Python class"], "2": ["py", "method", "Python method"], "3": ["py", "property", "Python property"], "4": ["py", "function", "Python function"], "5": ["py", "attribute", "Python attribute"], "6": ["py", "exception", "Python exception"]}, "titleterms": {"pantheonrl": [0, 1, 2, 3, 4, 5, 6, 7, 8, 9, 10, 11, 12, 13, 14, 15, 16, 17, 18, 19, 20, 21, 22, 23, 24, 25, 26, 27, 28, 29, 30, 31, 32, 33, 34, 35, 36, 37, 38, 39, 40, 41, 42, 43, 44, 45, 46, 47, 48, 49, 50, 51, 52, 53, 54, 55, 56, 57, 58, 59, 60, 61, 62, 63, 64, 65, 66, 67, 68, 69, 70, 71, 72, 73, 74, 75, 76, 77, 78, 79, 80, 81, 82, 83, 84, 85, 86, 87, 88, 89, 90, 91, 92, 93, 94, 95, 96, 97, 98, 99, 100, 101, 102, 103, 104, 105, 106, 107, 108, 109, 110, 111, 112, 113, 114, 115, 116, 117, 118, 119, 120, 121, 122, 125], "algo": [1, 2, 3, 4, 5, 6, 7, 8, 9, 10, 11, 12, 13, 14, 15, 16, 17, 18, 19, 20, 21, 22, 23, 24, 25, 26, 27, 28, 29], "adap": [2, 3, 4, 5, 6, 7, 8, 9, 10, 11, 12, 13, 14, 15, 16, 17, 18], "adap_learn": [3, 4], "agent": [5, 6, 31, 32, 33, 34, 35, 36, 37], "adapag": 6, "polici": [7, 8, 9, 10, 28, 29], "adappolici": 8, "adappolicymult": 9, "multmodel": 10, "util": [11, 12, 13, 14, 15, 16, 17, 18, 56, 57, 58, 59, 60, 61, 62, 63, 64], "get_l2_spher": 12, "get_categor": 13, "get_context_kl_loss": 14, "get_natural_numb": 15, "get_positive_squar": 16, "get_unit_squar": 17, "kl_diverg": 18, "bc": [19, 20, 21, 22, 23, 24], "bcshell": 21, "constantlrschedul": 22, "epochorbatchiteratorwithprogress": 23, "reconstruct_polici": 24, "modular": [25, 26, 27, 28, 29], "learn": [26, 27], "modularalgorithm": 27, "modularpolici": 29, "common": [30, 31, 32, 33, 34, 35, 36, 37, 38, 39, 40, 41, 42, 43, 44, 45, 46, 47, 48, 49, 50, 51, 52, 53, 54, 55, 56, 57, 58, 59, 60, 61, 62, 63, 64, 65, 66, 67, 68, 69, 70, 71, 72, 73], "dummyag": 33, "offpolicyag": 34, "onpolicyag": 35, "recordingagentwrapp": 36, "staticpolicyag": 37, "multiagentenv": [38, 39, 40, 41, 42, 43, 44], "dummyenv": 39, "killenvexcept": 40, "playerexcept": 42, "simultaneousenv": 43, "turnbasedenv": 44, "observ": [45, 46, 47, 48], "extract_ob": 47, "extract_partial_ob": 48, "trajsav": [49, 50, 51, 52, 53, 54, 55], "multitransit": 50, "simultaneoustransit": 51, "transitionsminim": 52, "turnbasedtransit": 53, "dataclass_quick_asdict": 54, "transitions_collate_fn": 55, "feedforward32polici": 57, "spaceexcept": 58, "action_from_polici": 59, "calculate_spac": 60, "clip_act": 61, "get_default_ob": 62, "get_space_s": 63, "resample_nois": 64, "wrapper": [65, 66, 67, 68, 69, 70, 71, 72, 73], "historyqueu": 66, "multirecord": 67, "simultaneousframestack": 68, "simultaneousrecord": 69, "turnbasedframestack": 70, "turnbasedrecord": 71, "frame_wrap": 72, "recorder_wrap": 73, "env": [74, 75, 76, 77, 78, 79, 80, 81, 82, 83, 84, 85, 86, 87, 88, 89, 90, 91, 92, 93, 94, 95, 96, 97, 98, 99, 100, 101, 102, 103, 104, 105, 106, 107, 108, 109, 110, 111, 112, 113, 114, 115, 116, 117, 118, 119, 120, 121, 122], "blockworldgym": [75, 76, 77, 78, 79, 80, 81, 82, 83, 84, 85, 86, 87, 88, 89, 90, 91, 92, 93, 94, 95, 96, 97, 98, 99, 100, 101, 102, 103, 104, 105, 106, 107, 108, 109, 110, 111], "blockworld": [76, 77, 78], "blockenv": 77, "defaultconstructorag": 78, "gridutil": [79, 80, 81, 82, 83, 84], "drop_random": 80, "generate_random_world": 81, "graviti": 82, "match": 83, "place": 84, "render": [85, 86, 87, 88, 89, 90, 91, 92, 93, 94, 95, 96, 97, 98, 99, 100, 101, 102, 103, 104, 105], "attr": 86, "color": 87, "compound": 88, "filledpolygon": 89, "geom": 90, "imag": 91, "line": 92, "linestyl": 93, "linewidth": 94, "point": 95, "polylin": 96, "simpleimageview": 97, "transform": 98, "viewer": 99, "get_displai": 100, "get_window": 101, "make_capsul": 102, "make_circl": 103, "make_polygon": 104, "make_polylin": 105, "simpleblockworld": [106, 107, 108, 109, 110, 111], "sbwdefaultag": 107, "sbweasypartn": 108, "simpleblockenv": 109, "generate_grid_world": 110, "random_block": 111, "liargym": [112, 113, 114, 115, 116], "liar": [113, 114, 115, 116], "liardefaultag": 114, "liarenv": 115, "randrol": 116, "pettingzoo": [117, 118, 124], "pettingzooaecwrapp": 118, "rpsgym": [119, 120, 121, 122], "rp": [120, 121, 122], "rpsenv": 121, "rpsweightedag": 122, "instal": 124, "prerequisit": 124, "develop": 124, "version": 124, "overcook": 124, "doc": 125, "citat": 125, "user": 125, "guid": 125, "api": 125, "refer": 125}, "envversion": {"sphinx.domains.c": 3, "sphinx.domains.changeset": 1, "sphinx.domains.citation": 1, "sphinx.domains.cpp": 9, "sphinx.domains.index": 1, "sphinx.domains.javascript": 3, "sphinx.domains.math": 2, "sphinx.domains.python": 4, "sphinx.domains.rst": 2, "sphinx.domains.std": 2, "sphinx.ext.intersphinx": 1, "sphinx.ext.viewcode": 1, "sphinx": 60}, "alltitles": {"pantheonrl": [[0, "pantheonrl"]], "pantheonrl.algos": [[1, "pantheonrl-algos"]], "pantheonrl.algos.adap": [[2, "pantheonrl-algos-adap"]], "pantheonrl.algos.adap.adap_learn": [[3, "module-pantheonrl.algos.adap.adap_learn"]], "pantheonrl.algos.adap.adap_learn.ADAP": [[4, "pantheonrl-algos-adap-adap-learn-adap"]], "pantheonrl.algos.adap.agent": [[5, "module-pantheonrl.algos.adap.agent"]], "pantheonrl.algos.adap.agent.AdapAgent": [[6, "pantheonrl-algos-adap-agent-adapagent"]], "pantheonrl.algos.adap.policies": [[7, "module-pantheonrl.algos.adap.policies"]], "pantheonrl.algos.adap.policies.AdapPolicy": [[8, "pantheonrl-algos-adap-policies-adappolicy"]], "pantheonrl.algos.adap.policies.AdapPolicyMult": [[9, "pantheonrl-algos-adap-policies-adappolicymult"]], "pantheonrl.algos.adap.policies.MultModel": [[10, "pantheonrl-algos-adap-policies-multmodel"]], "pantheonrl.algos.adap.util": [[11, "module-pantheonrl.algos.adap.util"]], "pantheonrl.algos.adap.util.get_L2_sphere": [[12, "pantheonrl-algos-adap-util-get-l2-sphere"]], "pantheonrl.algos.adap.util.get_categorical": [[13, "pantheonrl-algos-adap-util-get-categorical"]], "pantheonrl.algos.adap.util.get_context_kl_loss": [[14, "pantheonrl-algos-adap-util-get-context-kl-loss"]], "pantheonrl.algos.adap.util.get_natural_number": [[15, "pantheonrl-algos-adap-util-get-natural-number"]], "pantheonrl.algos.adap.util.get_positive_square": [[16, "pantheonrl-algos-adap-util-get-positive-square"]], "pantheonrl.algos.adap.util.get_unit_square": [[17, "pantheonrl-algos-adap-util-get-unit-square"]], "pantheonrl.algos.adap.util.kl_divergence": [[18, "pantheonrl-algos-adap-util-kl-divergence"]], "pantheonrl.algos.bc": [[19, "module-pantheonrl.algos.bc"]], "pantheonrl.algos.bc.BC": [[20, "pantheonrl-algos-bc-bc"]], "pantheonrl.algos.bc.BCShell": [[21, "pantheonrl-algos-bc-bcshell"]], "pantheonrl.algos.bc.ConstantLRSchedule": [[22, "pantheonrl-algos-bc-constantlrschedule"]], "pantheonrl.algos.bc.EpochOrBatchIteratorWithProgress": [[23, "pantheonrl-algos-bc-epochorbatchiteratorwithprogress"]], "pantheonrl.algos.bc.reconstruct_policy": [[24, "pantheonrl-algos-bc-reconstruct-policy"]], "pantheonrl.algos.modular": [[25, "pantheonrl-algos-modular"]], "pantheonrl.algos.modular.learn": [[26, "module-pantheonrl.algos.modular.learn"]], "pantheonrl.algos.modular.learn.ModularAlgorithm": [[27, "pantheonrl-algos-modular-learn-modularalgorithm"]], "pantheonrl.algos.modular.policies": [[28, "module-pantheonrl.algos.modular.policies"]], "pantheonrl.algos.modular.policies.ModularPolicy": [[29, "pantheonrl-algos-modular-policies-modularpolicy"]], "pantheonrl.common": [[30, "pantheonrl-common"]], "pantheonrl.common.agents": [[31, "module-pantheonrl.common.agents"]], "pantheonrl.common.agents.Agent": [[32, "pantheonrl-common-agents-agent"]], "pantheonrl.common.agents.DummyAgent": [[33, "pantheonrl-common-agents-dummyagent"]], "pantheonrl.common.agents.OffPolicyAgent": [[34, "pantheonrl-common-agents-offpolicyagent"]], "pantheonrl.common.agents.OnPolicyAgent": [[35, "pantheonrl-common-agents-onpolicyagent"]], "pantheonrl.common.agents.RecordingAgentWrapper": [[36, "pantheonrl-common-agents-recordingagentwrapper"]], "pantheonrl.common.agents.StaticPolicyAgent": [[37, "pantheonrl-common-agents-staticpolicyagent"]], "pantheonrl.common.multiagentenv": [[38, "module-pantheonrl.common.multiagentenv"]], "pantheonrl.common.multiagentenv.DummyEnv": [[39, "pantheonrl-common-multiagentenv-dummyenv"]], "pantheonrl.common.multiagentenv.KillEnvException": [[40, "pantheonrl-common-multiagentenv-killenvexception"]], "pantheonrl.common.multiagentenv.MultiAgentEnv": [[41, "pantheonrl-common-multiagentenv-multiagentenv"]], "pantheonrl.common.multiagentenv.PlayerException": [[42, "pantheonrl-common-multiagentenv-playerexception"]], "pantheonrl.common.multiagentenv.SimultaneousEnv": [[43, "pantheonrl-common-multiagentenv-simultaneousenv"]], "pantheonrl.common.multiagentenv.TurnBasedEnv": [[44, "pantheonrl-common-multiagentenv-turnbasedenv"]], "pantheonrl.common.observation": [[45, "module-pantheonrl.common.observation"]], "pantheonrl.common.observation.Observation": [[46, "pantheonrl-common-observation-observation"]], "pantheonrl.common.observation.extract_obs": [[47, "pantheonrl-common-observation-extract-obs"]], "pantheonrl.common.observation.extract_partial_obs": [[48, "pantheonrl-common-observation-extract-partial-obs"]], "pantheonrl.common.trajsaver": [[49, "module-pantheonrl.common.trajsaver"]], "pantheonrl.common.trajsaver.MultiTransitions": [[50, "pantheonrl-common-trajsaver-multitransitions"]], "pantheonrl.common.trajsaver.SimultaneousTransitions": [[51, "pantheonrl-common-trajsaver-simultaneoustransitions"]], "pantheonrl.common.trajsaver.TransitionsMinimal": [[52, "pantheonrl-common-trajsaver-transitionsminimal"]], "pantheonrl.common.trajsaver.TurnBasedTransitions": [[53, "pantheonrl-common-trajsaver-turnbasedtransitions"]], "pantheonrl.common.trajsaver.dataclass_quick_asdict": [[54, "pantheonrl-common-trajsaver-dataclass-quick-asdict"]], "pantheonrl.common.trajsaver.transitions_collate_fn": [[55, "pantheonrl-common-trajsaver-transitions-collate-fn"]], "pantheonrl.common.util": [[56, "module-pantheonrl.common.util"]], "pantheonrl.common.util.FeedForward32Policy": [[57, "pantheonrl-common-util-feedforward32policy"]], "pantheonrl.common.util.SpaceException": [[58, "pantheonrl-common-util-spaceexception"]], "pantheonrl.common.util.action_from_policy": [[59, "pantheonrl-common-util-action-from-policy"]], "pantheonrl.common.util.calculate_space": [[60, "pantheonrl-common-util-calculate-space"]], "pantheonrl.common.util.clip_actions": [[61, "pantheonrl-common-util-clip-actions"]], "pantheonrl.common.util.get_default_obs": [[62, "pantheonrl-common-util-get-default-obs"]], "pantheonrl.common.util.get_space_size": [[63, "pantheonrl-common-util-get-space-size"]], "pantheonrl.common.util.resample_noise": [[64, "pantheonrl-common-util-resample-noise"]], "pantheonrl.common.wrappers": [[65, "module-pantheonrl.common.wrappers"]], "pantheonrl.common.wrappers.HistoryQueue": [[66, "pantheonrl-common-wrappers-historyqueue"]], "pantheonrl.common.wrappers.MultiRecorder": [[67, "pantheonrl-common-wrappers-multirecorder"]], "pantheonrl.common.wrappers.SimultaneousFrameStack": [[68, "pantheonrl-common-wrappers-simultaneousframestack"]], "pantheonrl.common.wrappers.SimultaneousRecorder": [[69, "pantheonrl-common-wrappers-simultaneousrecorder"]], "pantheonrl.common.wrappers.TurnBasedFrameStack": [[70, "pantheonrl-common-wrappers-turnbasedframestack"]], "pantheonrl.common.wrappers.TurnBasedRecorder": [[71, "pantheonrl-common-wrappers-turnbasedrecorder"]], "pantheonrl.common.wrappers.frame_wrap": [[72, "pantheonrl-common-wrappers-frame-wrap"]], "pantheonrl.common.wrappers.recorder_wrap": [[73, "pantheonrl-common-wrappers-recorder-wrap"]], "pantheonrl.envs": [[74, "pantheonrl-envs"]], "pantheonrl.envs.blockworldgym": [[75, "pantheonrl-envs-blockworldgym"]], "pantheonrl.envs.blockworldgym.blockworld": [[76, "module-pantheonrl.envs.blockworldgym.blockworld"]], "pantheonrl.envs.blockworldgym.blockworld.BlockEnv": [[77, "pantheonrl-envs-blockworldgym-blockworld-blockenv"]], "pantheonrl.envs.blockworldgym.blockworld.DefaultConstructorAgent": [[78, "pantheonrl-envs-blockworldgym-blockworld-defaultconstructoragent"]], "pantheonrl.envs.blockworldgym.gridutils": [[79, "module-pantheonrl.envs.blockworldgym.gridutils"]], "pantheonrl.envs.blockworldgym.gridutils.drop_random": [[80, "pantheonrl-envs-blockworldgym-gridutils-drop-random"]], "pantheonrl.envs.blockworldgym.gridutils.generate_random_world": [[81, "pantheonrl-envs-blockworldgym-gridutils-generate-random-world"]], "pantheonrl.envs.blockworldgym.gridutils.gravity": [[82, "pantheonrl-envs-blockworldgym-gridutils-gravity"]], "pantheonrl.envs.blockworldgym.gridutils.matches": [[83, "pantheonrl-envs-blockworldgym-gridutils-matches"]], "pantheonrl.envs.blockworldgym.gridutils.place": [[84, "pantheonrl-envs-blockworldgym-gridutils-place"]], "pantheonrl.envs.blockworldgym.rendering": [[85, "module-pantheonrl.envs.blockworldgym.rendering"]], "pantheonrl.envs.blockworldgym.rendering.Attr": [[86, "pantheonrl-envs-blockworldgym-rendering-attr"]], "pantheonrl.envs.blockworldgym.rendering.Color": [[87, "pantheonrl-envs-blockworldgym-rendering-color"]], "pantheonrl.envs.blockworldgym.rendering.Compound": [[88, "pantheonrl-envs-blockworldgym-rendering-compound"]], "pantheonrl.envs.blockworldgym.rendering.FilledPolygon": [[89, "pantheonrl-envs-blockworldgym-rendering-filledpolygon"]], "pantheonrl.envs.blockworldgym.rendering.Geom": [[90, "pantheonrl-envs-blockworldgym-rendering-geom"]], "pantheonrl.envs.blockworldgym.rendering.Image": [[91, "pantheonrl-envs-blockworldgym-rendering-image"]], "pantheonrl.envs.blockworldgym.rendering.Line": [[92, "pantheonrl-envs-blockworldgym-rendering-line"]], "pantheonrl.envs.blockworldgym.rendering.LineStyle": [[93, "pantheonrl-envs-blockworldgym-rendering-linestyle"]], "pantheonrl.envs.blockworldgym.rendering.LineWidth": [[94, "pantheonrl-envs-blockworldgym-rendering-linewidth"]], "pantheonrl.envs.blockworldgym.rendering.Point": [[95, "pantheonrl-envs-blockworldgym-rendering-point"]], "pantheonrl.envs.blockworldgym.rendering.PolyLine": [[96, "pantheonrl-envs-blockworldgym-rendering-polyline"]], "pantheonrl.envs.blockworldgym.rendering.SimpleImageViewer": [[97, "pantheonrl-envs-blockworldgym-rendering-simpleimageviewer"]], "pantheonrl.envs.blockworldgym.rendering.Transform": [[98, "pantheonrl-envs-blockworldgym-rendering-transform"]], "pantheonrl.envs.blockworldgym.rendering.Viewer": [[99, "pantheonrl-envs-blockworldgym-rendering-viewer"]], "pantheonrl.envs.blockworldgym.rendering.get_display": [[100, "pantheonrl-envs-blockworldgym-rendering-get-display"]], "pantheonrl.envs.blockworldgym.rendering.get_window": [[101, "pantheonrl-envs-blockworldgym-rendering-get-window"]], "pantheonrl.envs.blockworldgym.rendering.make_capsule": [[102, "pantheonrl-envs-blockworldgym-rendering-make-capsule"]], "pantheonrl.envs.blockworldgym.rendering.make_circle": [[103, "pantheonrl-envs-blockworldgym-rendering-make-circle"]], "pantheonrl.envs.blockworldgym.rendering.make_polygon": [[104, "pantheonrl-envs-blockworldgym-rendering-make-polygon"]], "pantheonrl.envs.blockworldgym.rendering.make_polyline": [[105, "pantheonrl-envs-blockworldgym-rendering-make-polyline"]], "pantheonrl.envs.blockworldgym.simpleblockworld": [[106, "module-pantheonrl.envs.blockworldgym.simpleblockworld"]], "pantheonrl.envs.blockworldgym.simpleblockworld.SBWDefaultAgent": [[107, "pantheonrl-envs-blockworldgym-simpleblockworld-sbwdefaultagent"]], "pantheonrl.envs.blockworldgym.simpleblockworld.SBWEasyPartner": [[108, "pantheonrl-envs-blockworldgym-simpleblockworld-sbweasypartner"]], "pantheonrl.envs.blockworldgym.simpleblockworld.SimpleBlockEnv": [[109, "pantheonrl-envs-blockworldgym-simpleblockworld-simpleblockenv"]], "pantheonrl.envs.blockworldgym.simpleblockworld.generate_grid_world": [[110, "pantheonrl-envs-blockworldgym-simpleblockworld-generate-grid-world"]], "pantheonrl.envs.blockworldgym.simpleblockworld.random_block": [[111, "pantheonrl-envs-blockworldgym-simpleblockworld-random-block"]], "pantheonrl.envs.liargym": [[112, "pantheonrl-envs-liargym"]], "pantheonrl.envs.liargym.liar": [[113, "module-pantheonrl.envs.liargym.liar"]], "pantheonrl.envs.liargym.liar.LiarDefaultAgent": [[114, "pantheonrl-envs-liargym-liar-liardefaultagent"]], "pantheonrl.envs.liargym.liar.LiarEnv": [[115, "pantheonrl-envs-liargym-liar-liarenv"]], "pantheonrl.envs.liargym.liar.randRoll": [[116, "pantheonrl-envs-liargym-liar-randroll"]], "pantheonrl.envs.pettingzoo": [[117, "module-pantheonrl.envs.pettingzoo"]], "pantheonrl.envs.pettingzoo.PettingZooAECWrapper": [[118, "pantheonrl-envs-pettingzoo-pettingzooaecwrapper"]], "pantheonrl.envs.rpsgym": [[119, "pantheonrl-envs-rpsgym"]], "pantheonrl.envs.rpsgym.rps": [[120, "module-pantheonrl.envs.rpsgym.rps"]], "pantheonrl.envs.rpsgym.rps.RPSEnv": [[121, "pantheonrl-envs-rpsgym-rps-rpsenv"]], "pantheonrl.envs.rpsgym.rps.RPSWeightedAgent": [[122, "pantheonrl-envs-rpsgym-rps-rpsweightedagent"]], "Installation": [[124, "installation"]], "Prerequisites": [[124, "prerequisites"]], "Development version": [[124, "development-version"]], "Overcooked Installation": [[124, "overcooked-installation"]], "PettingZoo Installation": [[124, "pettingzoo-installation"]], "PantheonRL Docs": [[125, "pantheonrl-docs"]], "Citation": [[125, "citation"]], "User Guide": [[125, null]], "API reference": [[125, null]]}, "indexentries": {"module": [[0, "module-pantheonrl"], [1, "module-pantheonrl.algos"], [2, "module-pantheonrl.algos.adap"], [3, "module-pantheonrl.algos.adap.adap_learn"], [5, "module-pantheonrl.algos.adap.agent"], [7, "module-pantheonrl.algos.adap.policies"], [11, "module-pantheonrl.algos.adap.util"], [19, "module-pantheonrl.algos.bc"], [25, "module-pantheonrl.algos.modular"], [26, "module-pantheonrl.algos.modular.learn"], [28, "module-pantheonrl.algos.modular.policies"], [30, "module-pantheonrl.common"], [31, "module-pantheonrl.common.agents"], [38, "module-pantheonrl.common.multiagentenv"], [45, "module-pantheonrl.common.observation"], [49, "module-pantheonrl.common.trajsaver"], [56, "module-pantheonrl.common.util"], [65, "module-pantheonrl.common.wrappers"], [74, "module-pantheonrl.envs"], [75, "module-pantheonrl.envs.blockworldgym"], [76, "module-pantheonrl.envs.blockworldgym.blockworld"], [79, "module-pantheonrl.envs.blockworldgym.gridutils"], [85, "module-pantheonrl.envs.blockworldgym.rendering"], [106, "module-pantheonrl.envs.blockworldgym.simpleblockworld"], [112, "module-pantheonrl.envs.liargym"], [113, "module-pantheonrl.envs.liargym.liar"], [117, "module-pantheonrl.envs.pettingzoo"], [119, "module-pantheonrl.envs.rpsgym"], [120, "module-pantheonrl.envs.rpsgym.rps"]], "pantheonrl": [[0, "module-pantheonrl"]], "pantheonrl.algos": [[1, "module-pantheonrl.algos"]], "pantheonrl.algos.adap": [[2, "module-pantheonrl.algos.adap"]], "pantheonrl.algos.adap.adap_learn": [[3, "module-pantheonrl.algos.adap.adap_learn"]], "adap (class in pantheonrl.algos.adap.adap_learn)": [[4, "pantheonrl.algos.adap.adap_learn.ADAP"]], "collect_rollouts() (adap method)": [[4, "pantheonrl.algos.adap.adap_learn.ADAP.collect_rollouts"]], "get_env() (adap method)": [[4, "pantheonrl.algos.adap.adap_learn.ADAP.get_env"]], "get_parameters() (adap method)": [[4, "pantheonrl.algos.adap.adap_learn.ADAP.get_parameters"]], "get_vec_normalize_env() (adap method)": [[4, "pantheonrl.algos.adap.adap_learn.ADAP.get_vec_normalize_env"]], "learn() (adap method)": [[4, "pantheonrl.algos.adap.adap_learn.ADAP.learn"]], "load() (adap class method)": [[4, "pantheonrl.algos.adap.adap_learn.ADAP.load"]], "logger (adap property)": [[4, "pantheonrl.algos.adap.adap_learn.ADAP.logger"]], "predict() (adap method)": [[4, "pantheonrl.algos.adap.adap_learn.ADAP.predict"]], "save() (adap method)": [[4, "pantheonrl.algos.adap.adap_learn.ADAP.save"]], "set_env() (adap method)": [[4, "pantheonrl.algos.adap.adap_learn.ADAP.set_env"]], "set_logger() (adap method)": [[4, "pantheonrl.algos.adap.adap_learn.ADAP.set_logger"]], "set_parameters() (adap method)": [[4, "pantheonrl.algos.adap.adap_learn.ADAP.set_parameters"]], "set_random_seed() (adap method)": [[4, "pantheonrl.algos.adap.adap_learn.ADAP.set_random_seed"]], "train() (adap method)": [[4, "pantheonrl.algos.adap.adap_learn.ADAP.train"]], "pantheonrl.algos.adap.agent": [[5, "module-pantheonrl.algos.adap.agent"]], "adapagent (class in pantheonrl.algos.adap.agent)": [[6, "pantheonrl.algos.adap.agent.AdapAgent"]], "get_action() (adapagent method)": [[6, "pantheonrl.algos.adap.agent.AdapAgent.get_action"]], "learn() (adapagent method)": [[6, "pantheonrl.algos.adap.agent.AdapAgent.learn"]], "update() (adapagent method)": [[6, "pantheonrl.algos.adap.agent.AdapAgent.update"]], "pantheonrl.algos.adap.policies": [[7, "module-pantheonrl.algos.adap.policies"]], "adappolicy (class in pantheonrl.algos.adap.policies)": [[8, "pantheonrl.algos.adap.policies.AdapPolicy"]], "__call__() (adappolicy method)": [[8, "pantheonrl.algos.adap.policies.AdapPolicy.__call__"]], "add_module() (adappolicy method)": [[8, "pantheonrl.algos.adap.policies.AdapPolicy.add_module"]], "apply() (adappolicy method)": [[8, "pantheonrl.algos.adap.policies.AdapPolicy.apply"]], "bfloat16() (adappolicy method)": [[8, "pantheonrl.algos.adap.policies.AdapPolicy.bfloat16"]], "buffers() (adappolicy method)": [[8, "pantheonrl.algos.adap.policies.AdapPolicy.buffers"]], "children() (adappolicy method)": [[8, "pantheonrl.algos.adap.policies.AdapPolicy.children"]], "cpu() (adappolicy method)": [[8, "pantheonrl.algos.adap.policies.AdapPolicy.cpu"]], "cuda() (adappolicy method)": [[8, "pantheonrl.algos.adap.policies.AdapPolicy.cuda"]], "device (adappolicy property)": [[8, "pantheonrl.algos.adap.policies.AdapPolicy.device"]], "double() (adappolicy method)": [[8, "pantheonrl.algos.adap.policies.AdapPolicy.double"]], "eval() (adappolicy method)": [[8, "pantheonrl.algos.adap.policies.AdapPolicy.eval"]], "evaluate_actions() (adappolicy method)": [[8, "pantheonrl.algos.adap.policies.AdapPolicy.evaluate_actions"]], "extra_repr() (adappolicy method)": [[8, "pantheonrl.algos.adap.policies.AdapPolicy.extra_repr"]], "extract_features() (adappolicy method)": [[8, "pantheonrl.algos.adap.policies.AdapPolicy.extract_features"]], "float() (adappolicy method)": [[8, "pantheonrl.algos.adap.policies.AdapPolicy.float"]], "forward() (adappolicy method)": [[8, "pantheonrl.algos.adap.policies.AdapPolicy.forward"]], "get_buffer() (adappolicy method)": [[8, "pantheonrl.algos.adap.policies.AdapPolicy.get_buffer"]], "get_distribution() (adappolicy method)": [[8, "pantheonrl.algos.adap.policies.AdapPolicy.get_distribution"]], "get_extra_state() (adappolicy method)": [[8, "pantheonrl.algos.adap.policies.AdapPolicy.get_extra_state"]], "get_parameter() (adappolicy method)": [[8, "pantheonrl.algos.adap.policies.AdapPolicy.get_parameter"]], "get_submodule() (adappolicy method)": [[8, "pantheonrl.algos.adap.policies.AdapPolicy.get_submodule"]], "half() (adappolicy method)": [[8, "pantheonrl.algos.adap.policies.AdapPolicy.half"]], "init_weights() (adappolicy static method)": [[8, "pantheonrl.algos.adap.policies.AdapPolicy.init_weights"]], "ipu() (adappolicy method)": [[8, "pantheonrl.algos.adap.policies.AdapPolicy.ipu"]], "is_vectorized_observation() (adappolicy method)": [[8, "pantheonrl.algos.adap.policies.AdapPolicy.is_vectorized_observation"]], "load() (adappolicy class method)": [[8, "pantheonrl.algos.adap.policies.AdapPolicy.load"]], "load_from_vector() (adappolicy method)": [[8, "pantheonrl.algos.adap.policies.AdapPolicy.load_from_vector"]], "load_state_dict() (adappolicy method)": [[8, "pantheonrl.algos.adap.policies.AdapPolicy.load_state_dict"]], "make_features_extractor() (adappolicy method)": [[8, "pantheonrl.algos.adap.policies.AdapPolicy.make_features_extractor"]], "modules() (adappolicy method)": [[8, "pantheonrl.algos.adap.policies.AdapPolicy.modules"]], "named_buffers() (adappolicy method)": [[8, "pantheonrl.algos.adap.policies.AdapPolicy.named_buffers"]], "named_children() (adappolicy method)": [[8, "pantheonrl.algos.adap.policies.AdapPolicy.named_children"]], "named_modules() (adappolicy method)": [[8, "pantheonrl.algos.adap.policies.AdapPolicy.named_modules"]], "named_parameters() (adappolicy method)": [[8, "pantheonrl.algos.adap.policies.AdapPolicy.named_parameters"]], "obs_to_tensor() (adappolicy method)": [[8, "pantheonrl.algos.adap.policies.AdapPolicy.obs_to_tensor"]], "parameters() (adappolicy method)": [[8, "pantheonrl.algos.adap.policies.AdapPolicy.parameters"]], "parameters_to_vector() (adappolicy method)": [[8, "pantheonrl.algos.adap.policies.AdapPolicy.parameters_to_vector"]], "predict() (adappolicy method)": [[8, "pantheonrl.algos.adap.policies.AdapPolicy.predict"]], "predict_values() (adappolicy method)": [[8, "pantheonrl.algos.adap.policies.AdapPolicy.predict_values"]], "register_backward_hook() (adappolicy method)": [[8, "pantheonrl.algos.adap.policies.AdapPolicy.register_backward_hook"]], "register_buffer() (adappolicy method)": [[8, "pantheonrl.algos.adap.policies.AdapPolicy.register_buffer"]], "register_forward_hook() (adappolicy method)": [[8, "pantheonrl.algos.adap.policies.AdapPolicy.register_forward_hook"]], "register_forward_pre_hook() (adappolicy method)": [[8, "pantheonrl.algos.adap.policies.AdapPolicy.register_forward_pre_hook"]], "register_full_backward_hook() (adappolicy method)": [[8, "pantheonrl.algos.adap.policies.AdapPolicy.register_full_backward_hook"]], "register_full_backward_pre_hook() (adappolicy method)": [[8, "pantheonrl.algos.adap.policies.AdapPolicy.register_full_backward_pre_hook"]], "register_load_state_dict_post_hook() (adappolicy method)": [[8, "pantheonrl.algos.adap.policies.AdapPolicy.register_load_state_dict_post_hook"]], "register_module() (adappolicy method)": [[8, "pantheonrl.algos.adap.policies.AdapPolicy.register_module"]], "register_parameter() (adappolicy method)": [[8, "pantheonrl.algos.adap.policies.AdapPolicy.register_parameter"]], "register_state_dict_pre_hook() (adappolicy method)": [[8, "pantheonrl.algos.adap.policies.AdapPolicy.register_state_dict_pre_hook"]], "requires_grad_() (adappolicy method)": [[8, "pantheonrl.algos.adap.policies.AdapPolicy.requires_grad_"]], "reset_noise() (adappolicy method)": [[8, "pantheonrl.algos.adap.policies.AdapPolicy.reset_noise"]], "save() (adappolicy method)": [[8, "pantheonrl.algos.adap.policies.AdapPolicy.save"]], "scale_action() (adappolicy method)": [[8, "pantheonrl.algos.adap.policies.AdapPolicy.scale_action"]], "set_extra_state() (adappolicy method)": [[8, "pantheonrl.algos.adap.policies.AdapPolicy.set_extra_state"]], "set_training_mode() (adappolicy method)": [[8, "pantheonrl.algos.adap.policies.AdapPolicy.set_training_mode"]], "share_memory() (adappolicy method)": [[8, "pantheonrl.algos.adap.policies.AdapPolicy.share_memory"]], "squash_output (adappolicy property)": [[8, "pantheonrl.algos.adap.policies.AdapPolicy.squash_output"]], "state_dict() (adappolicy method)": [[8, "pantheonrl.algos.adap.policies.AdapPolicy.state_dict"]], "to() (adappolicy method)": [[8, "pantheonrl.algos.adap.policies.AdapPolicy.to"]], "to_empty() (adappolicy method)": [[8, "pantheonrl.algos.adap.policies.AdapPolicy.to_empty"]], "train() (adappolicy method)": [[8, "pantheonrl.algos.adap.policies.AdapPolicy.train"]], "type() (adappolicy method)": [[8, "pantheonrl.algos.adap.policies.AdapPolicy.type"]], "unscale_action() (adappolicy method)": [[8, "pantheonrl.algos.adap.policies.AdapPolicy.unscale_action"]], "xpu() (adappolicy method)": [[8, "pantheonrl.algos.adap.policies.AdapPolicy.xpu"]], "zero_grad() (adappolicy method)": [[8, "pantheonrl.algos.adap.policies.AdapPolicy.zero_grad"]], "adappolicymult (class in pantheonrl.algos.adap.policies)": [[9, "pantheonrl.algos.adap.policies.AdapPolicyMult"]], "__call__() (adappolicymult method)": [[9, "pantheonrl.algos.adap.policies.AdapPolicyMult.__call__"]], "add_module() (adappolicymult method)": [[9, "pantheonrl.algos.adap.policies.AdapPolicyMult.add_module"]], "apply() (adappolicymult method)": [[9, "pantheonrl.algos.adap.policies.AdapPolicyMult.apply"]], "bfloat16() (adappolicymult method)": [[9, "pantheonrl.algos.adap.policies.AdapPolicyMult.bfloat16"]], "buffers() (adappolicymult method)": [[9, "pantheonrl.algos.adap.policies.AdapPolicyMult.buffers"]], "children() (adappolicymult method)": [[9, "pantheonrl.algos.adap.policies.AdapPolicyMult.children"]], "cpu() (adappolicymult method)": [[9, "pantheonrl.algos.adap.policies.AdapPolicyMult.cpu"]], "cuda() (adappolicymult method)": [[9, "pantheonrl.algos.adap.policies.AdapPolicyMult.cuda"]], "device (adappolicymult property)": [[9, "pantheonrl.algos.adap.policies.AdapPolicyMult.device"]], "double() (adappolicymult method)": [[9, "pantheonrl.algos.adap.policies.AdapPolicyMult.double"]], "eval() (adappolicymult method)": [[9, "pantheonrl.algos.adap.policies.AdapPolicyMult.eval"]], "evaluate_actions() (adappolicymult method)": [[9, "pantheonrl.algos.adap.policies.AdapPolicyMult.evaluate_actions"]], "extra_repr() (adappolicymult method)": [[9, "pantheonrl.algos.adap.policies.AdapPolicyMult.extra_repr"]], "extract_features() (adappolicymult method)": [[9, "pantheonrl.algos.adap.policies.AdapPolicyMult.extract_features"]], "float() (adappolicymult method)": [[9, "pantheonrl.algos.adap.policies.AdapPolicyMult.float"]], "forward() (adappolicymult method)": [[9, "pantheonrl.algos.adap.policies.AdapPolicyMult.forward"]], "get_buffer() (adappolicymult method)": [[9, "pantheonrl.algos.adap.policies.AdapPolicyMult.get_buffer"]], "get_distribution() (adappolicymult method)": [[9, "pantheonrl.algos.adap.policies.AdapPolicyMult.get_distribution"]], "get_extra_state() (adappolicymult method)": [[9, "pantheonrl.algos.adap.policies.AdapPolicyMult.get_extra_state"]], "get_parameter() (adappolicymult method)": [[9, "pantheonrl.algos.adap.policies.AdapPolicyMult.get_parameter"]], "get_submodule() (adappolicymult method)": [[9, "pantheonrl.algos.adap.policies.AdapPolicyMult.get_submodule"]], "half() (adappolicymult method)": [[9, "pantheonrl.algos.adap.policies.AdapPolicyMult.half"]], "init_weights() (adappolicymult static method)": [[9, "pantheonrl.algos.adap.policies.AdapPolicyMult.init_weights"]], "ipu() (adappolicymult method)": [[9, "pantheonrl.algos.adap.policies.AdapPolicyMult.ipu"]], "is_vectorized_observation() (adappolicymult method)": [[9, "pantheonrl.algos.adap.policies.AdapPolicyMult.is_vectorized_observation"]], "load() (adappolicymult class method)": [[9, "pantheonrl.algos.adap.policies.AdapPolicyMult.load"]], "load_from_vector() (adappolicymult method)": [[9, "pantheonrl.algos.adap.policies.AdapPolicyMult.load_from_vector"]], "load_state_dict() (adappolicymult method)": [[9, "pantheonrl.algos.adap.policies.AdapPolicyMult.load_state_dict"]], "make_features_extractor() (adappolicymult method)": [[9, "pantheonrl.algos.adap.policies.AdapPolicyMult.make_features_extractor"]], "modules() (adappolicymult method)": [[9, "pantheonrl.algos.adap.policies.AdapPolicyMult.modules"]], "named_buffers() (adappolicymult method)": [[9, "pantheonrl.algos.adap.policies.AdapPolicyMult.named_buffers"]], "named_children() (adappolicymult method)": [[9, "pantheonrl.algos.adap.policies.AdapPolicyMult.named_children"]], "named_modules() (adappolicymult method)": [[9, "pantheonrl.algos.adap.policies.AdapPolicyMult.named_modules"]], "named_parameters() (adappolicymult method)": [[9, "pantheonrl.algos.adap.policies.AdapPolicyMult.named_parameters"]], "obs_to_tensor() (adappolicymult method)": [[9, "pantheonrl.algos.adap.policies.AdapPolicyMult.obs_to_tensor"]], "parameters() (adappolicymult method)": [[9, "pantheonrl.algos.adap.policies.AdapPolicyMult.parameters"]], "parameters_to_vector() (adappolicymult method)": [[9, "pantheonrl.algos.adap.policies.AdapPolicyMult.parameters_to_vector"]], "predict() (adappolicymult method)": [[9, "pantheonrl.algos.adap.policies.AdapPolicyMult.predict"]], "predict_values() (adappolicymult method)": [[9, "pantheonrl.algos.adap.policies.AdapPolicyMult.predict_values"]], "register_backward_hook() (adappolicymult method)": [[9, "pantheonrl.algos.adap.policies.AdapPolicyMult.register_backward_hook"]], "register_buffer() (adappolicymult method)": [[9, "pantheonrl.algos.adap.policies.AdapPolicyMult.register_buffer"]], "register_forward_hook() (adappolicymult method)": [[9, "pantheonrl.algos.adap.policies.AdapPolicyMult.register_forward_hook"]], "register_forward_pre_hook() (adappolicymult method)": [[9, "pantheonrl.algos.adap.policies.AdapPolicyMult.register_forward_pre_hook"]], "register_full_backward_hook() (adappolicymult method)": [[9, "pantheonrl.algos.adap.policies.AdapPolicyMult.register_full_backward_hook"]], "register_full_backward_pre_hook() (adappolicymult method)": [[9, "pantheonrl.algos.adap.policies.AdapPolicyMult.register_full_backward_pre_hook"]], "register_load_state_dict_post_hook() (adappolicymult method)": [[9, "pantheonrl.algos.adap.policies.AdapPolicyMult.register_load_state_dict_post_hook"]], "register_module() (adappolicymult method)": [[9, "pantheonrl.algos.adap.policies.AdapPolicyMult.register_module"]], "register_parameter() (adappolicymult method)": [[9, "pantheonrl.algos.adap.policies.AdapPolicyMult.register_parameter"]], "register_state_dict_pre_hook() (adappolicymult method)": [[9, "pantheonrl.algos.adap.policies.AdapPolicyMult.register_state_dict_pre_hook"]], "requires_grad_() (adappolicymult method)": [[9, "pantheonrl.algos.adap.policies.AdapPolicyMult.requires_grad_"]], "reset_noise() (adappolicymult method)": [[9, "pantheonrl.algos.adap.policies.AdapPolicyMult.reset_noise"]], "save() (adappolicymult method)": [[9, "pantheonrl.algos.adap.policies.AdapPolicyMult.save"]], "scale_action() (adappolicymult method)": [[9, "pantheonrl.algos.adap.policies.AdapPolicyMult.scale_action"]], "set_extra_state() (adappolicymult method)": [[9, "pantheonrl.algos.adap.policies.AdapPolicyMult.set_extra_state"]], "set_training_mode() (adappolicymult method)": [[9, "pantheonrl.algos.adap.policies.AdapPolicyMult.set_training_mode"]], "share_memory() (adappolicymult method)": [[9, "pantheonrl.algos.adap.policies.AdapPolicyMult.share_memory"]], "squash_output (adappolicymult property)": [[9, "pantheonrl.algos.adap.policies.AdapPolicyMult.squash_output"]], "state_dict() (adappolicymult method)": [[9, "pantheonrl.algos.adap.policies.AdapPolicyMult.state_dict"]], "to() (adappolicymult method)": [[9, "pantheonrl.algos.adap.policies.AdapPolicyMult.to"]], "to_empty() (adappolicymult method)": [[9, "pantheonrl.algos.adap.policies.AdapPolicyMult.to_empty"]], "train() (adappolicymult method)": [[9, "pantheonrl.algos.adap.policies.AdapPolicyMult.train"]], "type() (adappolicymult method)": [[9, "pantheonrl.algos.adap.policies.AdapPolicyMult.type"]], "unscale_action() (adappolicymult method)": [[9, "pantheonrl.algos.adap.policies.AdapPolicyMult.unscale_action"]], "xpu() (adappolicymult method)": [[9, "pantheonrl.algos.adap.policies.AdapPolicyMult.xpu"]], "zero_grad() (adappolicymult method)": [[9, "pantheonrl.algos.adap.policies.AdapPolicyMult.zero_grad"]], "multmodel (class in pantheonrl.algos.adap.policies)": [[10, "pantheonrl.algos.adap.policies.MultModel"]], "__call__() (multmodel method)": [[10, "pantheonrl.algos.adap.policies.MultModel.__call__"]], "add_module() (multmodel method)": [[10, "pantheonrl.algos.adap.policies.MultModel.add_module"]], "apply() (multmodel method)": [[10, "pantheonrl.algos.adap.policies.MultModel.apply"]], "bfloat16() (multmodel method)": [[10, "pantheonrl.algos.adap.policies.MultModel.bfloat16"]], "buffers() (multmodel method)": [[10, "pantheonrl.algos.adap.policies.MultModel.buffers"]], "children() (multmodel method)": [[10, "pantheonrl.algos.adap.policies.MultModel.children"]], "cpu() (multmodel method)": [[10, "pantheonrl.algos.adap.policies.MultModel.cpu"]], "cuda() (multmodel method)": [[10, "pantheonrl.algos.adap.policies.MultModel.cuda"]], "double() (multmodel method)": [[10, "pantheonrl.algos.adap.policies.MultModel.double"]], "eval() (multmodel method)": [[10, "pantheonrl.algos.adap.policies.MultModel.eval"]], "extra_repr() (multmodel method)": [[10, "pantheonrl.algos.adap.policies.MultModel.extra_repr"]], "float() (multmodel method)": [[10, "pantheonrl.algos.adap.policies.MultModel.float"]], "forward() (multmodel method)": [[10, "pantheonrl.algos.adap.policies.MultModel.forward"]], "get_buffer() (multmodel method)": [[10, "pantheonrl.algos.adap.policies.MultModel.get_buffer"]], "get_extra_state() (multmodel method)": [[10, "pantheonrl.algos.adap.policies.MultModel.get_extra_state"]], "get_parameter() (multmodel method)": [[10, "pantheonrl.algos.adap.policies.MultModel.get_parameter"]], "get_submodule() (multmodel method)": [[10, "pantheonrl.algos.adap.policies.MultModel.get_submodule"]], "half() (multmodel method)": [[10, "pantheonrl.algos.adap.policies.MultModel.half"]], "ipu() (multmodel method)": [[10, "pantheonrl.algos.adap.policies.MultModel.ipu"]], "load_state_dict() (multmodel method)": [[10, "pantheonrl.algos.adap.policies.MultModel.load_state_dict"]], "modules() (multmodel method)": [[10, "pantheonrl.algos.adap.policies.MultModel.modules"]], "named_buffers() (multmodel method)": [[10, "pantheonrl.algos.adap.policies.MultModel.named_buffers"]], "named_children() (multmodel method)": [[10, "pantheonrl.algos.adap.policies.MultModel.named_children"]], "named_modules() (multmodel method)": [[10, "pantheonrl.algos.adap.policies.MultModel.named_modules"]], "named_parameters() (multmodel method)": [[10, "pantheonrl.algos.adap.policies.MultModel.named_parameters"]], "parameters() (multmodel method)": [[10, "pantheonrl.algos.adap.policies.MultModel.parameters"]], "register_backward_hook() (multmodel method)": [[10, "pantheonrl.algos.adap.policies.MultModel.register_backward_hook"]], "register_buffer() (multmodel method)": [[10, "pantheonrl.algos.adap.policies.MultModel.register_buffer"]], "register_forward_hook() (multmodel method)": [[10, "pantheonrl.algos.adap.policies.MultModel.register_forward_hook"]], "register_forward_pre_hook() (multmodel method)": [[10, "pantheonrl.algos.adap.policies.MultModel.register_forward_pre_hook"]], "register_full_backward_hook() (multmodel method)": [[10, "pantheonrl.algos.adap.policies.MultModel.register_full_backward_hook"]], "register_full_backward_pre_hook() (multmodel method)": [[10, "pantheonrl.algos.adap.policies.MultModel.register_full_backward_pre_hook"]], "register_load_state_dict_post_hook() (multmodel method)": [[10, "pantheonrl.algos.adap.policies.MultModel.register_load_state_dict_post_hook"]], "register_module() (multmodel method)": [[10, "pantheonrl.algos.adap.policies.MultModel.register_module"]], "register_parameter() (multmodel method)": [[10, "pantheonrl.algos.adap.policies.MultModel.register_parameter"]], "register_state_dict_pre_hook() (multmodel method)": [[10, "pantheonrl.algos.adap.policies.MultModel.register_state_dict_pre_hook"]], "requires_grad_() (multmodel method)": [[10, "pantheonrl.algos.adap.policies.MultModel.requires_grad_"]], "set_extra_state() (multmodel method)": [[10, "pantheonrl.algos.adap.policies.MultModel.set_extra_state"]], "share_memory() (multmodel method)": [[10, "pantheonrl.algos.adap.policies.MultModel.share_memory"]], "state_dict() (multmodel method)": [[10, "pantheonrl.algos.adap.policies.MultModel.state_dict"]], "to() (multmodel method)": [[10, "pantheonrl.algos.adap.policies.MultModel.to"]], "to_empty() (multmodel method)": [[10, "pantheonrl.algos.adap.policies.MultModel.to_empty"]], "train() (multmodel method)": [[10, "pantheonrl.algos.adap.policies.MultModel.train"]], "type() (multmodel method)": [[10, "pantheonrl.algos.adap.policies.MultModel.type"]], "xpu() (multmodel method)": [[10, "pantheonrl.algos.adap.policies.MultModel.xpu"]], "zero_grad() (multmodel method)": [[10, "pantheonrl.algos.adap.policies.MultModel.zero_grad"]], "pantheonrl.algos.adap.util": [[11, "module-pantheonrl.algos.adap.util"]], "get_l2_sphere() (in module pantheonrl.algos.adap.util)": [[12, "pantheonrl.algos.adap.util.get_L2_sphere"]], "get_categorical() (in module pantheonrl.algos.adap.util)": [[13, "pantheonrl.algos.adap.util.get_categorical"]], "get_context_kl_loss() (in module pantheonrl.algos.adap.util)": [[14, "pantheonrl.algos.adap.util.get_context_kl_loss"]], "get_natural_number() (in module pantheonrl.algos.adap.util)": [[15, "pantheonrl.algos.adap.util.get_natural_number"]], "get_positive_square() (in module pantheonrl.algos.adap.util)": [[16, "pantheonrl.algos.adap.util.get_positive_square"]], "get_unit_square() (in module pantheonrl.algos.adap.util)": [[17, "pantheonrl.algos.adap.util.get_unit_square"]], "kl_divergence() (in module pantheonrl.algos.adap.util)": [[18, "pantheonrl.algos.adap.util.kl_divergence"]], "pantheonrl.algos.bc": [[19, "module-pantheonrl.algos.bc"]], "bc (class in pantheonrl.algos.bc)": [[20, "pantheonrl.algos.bc.BC"]], "default_batch_size (bc attribute)": [[20, "pantheonrl.algos.bc.BC.DEFAULT_BATCH_SIZE"]], "save_policy() (bc method)": [[20, "pantheonrl.algos.bc.BC.save_policy"]], "set_expert_data_loader() (bc method)": [[20, "pantheonrl.algos.bc.BC.set_expert_data_loader"]], "train() (bc method)": [[20, "pantheonrl.algos.bc.BC.train"]], "bcshell (class in pantheonrl.algos.bc)": [[21, "pantheonrl.algos.bc.BCShell"]], "constantlrschedule (class in pantheonrl.algos.bc)": [[22, "pantheonrl.algos.bc.ConstantLRSchedule"]], "__call__() (constantlrschedule method)": [[22, "pantheonrl.algos.bc.ConstantLRSchedule.__call__"]], "epochorbatchiteratorwithprogress (class in pantheonrl.algos.bc)": [[23, "pantheonrl.algos.bc.EpochOrBatchIteratorWithProgress"]], "reconstruct_policy() (in module pantheonrl.algos.bc)": [[24, "pantheonrl.algos.bc.reconstruct_policy"]], "pantheonrl.algos.modular": [[25, "module-pantheonrl.algos.modular"]], "pantheonrl.algos.modular.learn": [[26, "module-pantheonrl.algos.modular.learn"]], "modularalgorithm (class in pantheonrl.algos.modular.learn)": [[27, "pantheonrl.algos.modular.learn.ModularAlgorithm"]], "collect_rollouts() (modularalgorithm method)": [[27, "pantheonrl.algos.modular.learn.ModularAlgorithm.collect_rollouts"]], "get_env() (modularalgorithm method)": [[27, "pantheonrl.algos.modular.learn.ModularAlgorithm.get_env"]], "get_parameters() (modularalgorithm method)": [[27, "pantheonrl.algos.modular.learn.ModularAlgorithm.get_parameters"]], "get_vec_normalize_env() (modularalgorithm method)": [[27, "pantheonrl.algos.modular.learn.ModularAlgorithm.get_vec_normalize_env"]], "learn() (modularalgorithm method)": [[27, "pantheonrl.algos.modular.learn.ModularAlgorithm.learn"]], "load() (modularalgorithm class method)": [[27, "pantheonrl.algos.modular.learn.ModularAlgorithm.load"]], "logger (modularalgorithm property)": [[27, "pantheonrl.algos.modular.learn.ModularAlgorithm.logger"]], "predict() (modularalgorithm method)": [[27, "pantheonrl.algos.modular.learn.ModularAlgorithm.predict"]], "save() (modularalgorithm method)": [[27, "pantheonrl.algos.modular.learn.ModularAlgorithm.save"]], "set_env() (modularalgorithm method)": [[27, "pantheonrl.algos.modular.learn.ModularAlgorithm.set_env"]], "set_logger() (modularalgorithm method)": [[27, "pantheonrl.algos.modular.learn.ModularAlgorithm.set_logger"]], "set_parameters() (modularalgorithm method)": [[27, "pantheonrl.algos.modular.learn.ModularAlgorithm.set_parameters"]], "set_random_seed() (modularalgorithm method)": [[27, "pantheonrl.algos.modular.learn.ModularAlgorithm.set_random_seed"]], "train() (modularalgorithm method)": [[27, "pantheonrl.algos.modular.learn.ModularAlgorithm.train"]], "pantheonrl.algos.modular.policies": [[28, "module-pantheonrl.algos.modular.policies"]], "modularpolicy (class in pantheonrl.algos.modular.policies)": [[29, "pantheonrl.algos.modular.policies.ModularPolicy"]], "__call__() (modularpolicy method)": [[29, "pantheonrl.algos.modular.policies.ModularPolicy.__call__"]], "add_module() (modularpolicy method)": [[29, "pantheonrl.algos.modular.policies.ModularPolicy.add_module"]], "apply() (modularpolicy method)": [[29, "pantheonrl.algos.modular.policies.ModularPolicy.apply"]], "bfloat16() (modularpolicy method)": [[29, "pantheonrl.algos.modular.policies.ModularPolicy.bfloat16"]], "buffers() (modularpolicy method)": [[29, "pantheonrl.algos.modular.policies.ModularPolicy.buffers"]], "children() (modularpolicy method)": [[29, "pantheonrl.algos.modular.policies.ModularPolicy.children"]], "cpu() (modularpolicy method)": [[29, "pantheonrl.algos.modular.policies.ModularPolicy.cpu"]], "cuda() (modularpolicy method)": [[29, "pantheonrl.algos.modular.policies.ModularPolicy.cuda"]], "device (modularpolicy property)": [[29, "pantheonrl.algos.modular.policies.ModularPolicy.device"]], "double() (modularpolicy method)": [[29, "pantheonrl.algos.modular.policies.ModularPolicy.double"]], "eval() (modularpolicy method)": [[29, "pantheonrl.algos.modular.policies.ModularPolicy.eval"]], "evaluate_actions() (modularpolicy method)": [[29, "pantheonrl.algos.modular.policies.ModularPolicy.evaluate_actions"]], "extra_repr() (modularpolicy method)": [[29, "pantheonrl.algos.modular.policies.ModularPolicy.extra_repr"]], "extract_features() (modularpolicy method)": [[29, "pantheonrl.algos.modular.policies.ModularPolicy.extract_features"]], "float() (modularpolicy method)": [[29, "pantheonrl.algos.modular.policies.ModularPolicy.float"]], "forward() (modularpolicy method)": [[29, "pantheonrl.algos.modular.policies.ModularPolicy.forward"]], "get_buffer() (modularpolicy method)": [[29, "pantheonrl.algos.modular.policies.ModularPolicy.get_buffer"]], "get_extra_state() (modularpolicy method)": [[29, "pantheonrl.algos.modular.policies.ModularPolicy.get_extra_state"]], "get_parameter() (modularpolicy method)": [[29, "pantheonrl.algos.modular.policies.ModularPolicy.get_parameter"]], "get_submodule() (modularpolicy method)": [[29, "pantheonrl.algos.modular.policies.ModularPolicy.get_submodule"]], "half() (modularpolicy method)": [[29, "pantheonrl.algos.modular.policies.ModularPolicy.half"]], "init_weights() (modularpolicy static method)": [[29, "pantheonrl.algos.modular.policies.ModularPolicy.init_weights"]], "ipu() (modularpolicy method)": [[29, "pantheonrl.algos.modular.policies.ModularPolicy.ipu"]], "is_vectorized_observation() (modularpolicy method)": [[29, "pantheonrl.algos.modular.policies.ModularPolicy.is_vectorized_observation"]], "load() (modularpolicy class method)": [[29, "pantheonrl.algos.modular.policies.ModularPolicy.load"]], "load_from_vector() (modularpolicy method)": [[29, "pantheonrl.algos.modular.policies.ModularPolicy.load_from_vector"]], "load_state_dict() (modularpolicy method)": [[29, "pantheonrl.algos.modular.policies.ModularPolicy.load_state_dict"]], "make_features_extractor() (modularpolicy method)": [[29, "pantheonrl.algos.modular.policies.ModularPolicy.make_features_extractor"]], "modules() (modularpolicy method)": [[29, "pantheonrl.algos.modular.policies.ModularPolicy.modules"]], "named_buffers() (modularpolicy method)": [[29, "pantheonrl.algos.modular.policies.ModularPolicy.named_buffers"]], "named_children() (modularpolicy method)": [[29, "pantheonrl.algos.modular.policies.ModularPolicy.named_children"]], "named_modules() (modularpolicy method)": [[29, "pantheonrl.algos.modular.policies.ModularPolicy.named_modules"]], "named_parameters() (modularpolicy method)": [[29, "pantheonrl.algos.modular.policies.ModularPolicy.named_parameters"]], "obs_to_tensor() (modularpolicy method)": [[29, "pantheonrl.algos.modular.policies.ModularPolicy.obs_to_tensor"]], "parameters() (modularpolicy method)": [[29, "pantheonrl.algos.modular.policies.ModularPolicy.parameters"]], "parameters_to_vector() (modularpolicy method)": [[29, "pantheonrl.algos.modular.policies.ModularPolicy.parameters_to_vector"]], "predict() (modularpolicy method)": [[29, "pantheonrl.algos.modular.policies.ModularPolicy.predict"]], "register_backward_hook() (modularpolicy method)": [[29, "pantheonrl.algos.modular.policies.ModularPolicy.register_backward_hook"]], "register_buffer() (modularpolicy method)": [[29, "pantheonrl.algos.modular.policies.ModularPolicy.register_buffer"]], "register_forward_hook() (modularpolicy method)": [[29, "pantheonrl.algos.modular.policies.ModularPolicy.register_forward_hook"]], "register_forward_pre_hook() (modularpolicy method)": [[29, "pantheonrl.algos.modular.policies.ModularPolicy.register_forward_pre_hook"]], "register_full_backward_hook() (modularpolicy method)": [[29, "pantheonrl.algos.modular.policies.ModularPolicy.register_full_backward_hook"]], "register_full_backward_pre_hook() (modularpolicy method)": [[29, "pantheonrl.algos.modular.policies.ModularPolicy.register_full_backward_pre_hook"]], "register_load_state_dict_post_hook() (modularpolicy method)": [[29, "pantheonrl.algos.modular.policies.ModularPolicy.register_load_state_dict_post_hook"]], "register_module() (modularpolicy method)": [[29, "pantheonrl.algos.modular.policies.ModularPolicy.register_module"]], "register_parameter() (modularpolicy method)": [[29, "pantheonrl.algos.modular.policies.ModularPolicy.register_parameter"]], "register_state_dict_pre_hook() (modularpolicy method)": [[29, "pantheonrl.algos.modular.policies.ModularPolicy.register_state_dict_pre_hook"]], "requires_grad_() (modularpolicy method)": [[29, "pantheonrl.algos.modular.policies.ModularPolicy.requires_grad_"]], "reset_noise() (modularpolicy method)": [[29, "pantheonrl.algos.modular.policies.ModularPolicy.reset_noise"]], "save() (modularpolicy method)": [[29, "pantheonrl.algos.modular.policies.ModularPolicy.save"]], "scale_action() (modularpolicy method)": [[29, "pantheonrl.algos.modular.policies.ModularPolicy.scale_action"]], "set_extra_state() (modularpolicy method)": [[29, "pantheonrl.algos.modular.policies.ModularPolicy.set_extra_state"]], "set_training_mode() (modularpolicy method)": [[29, "pantheonrl.algos.modular.policies.ModularPolicy.set_training_mode"]], "share_memory() (modularpolicy method)": [[29, "pantheonrl.algos.modular.policies.ModularPolicy.share_memory"]], "squash_output (modularpolicy property)": [[29, "pantheonrl.algos.modular.policies.ModularPolicy.squash_output"]], "state_dict() (modularpolicy method)": [[29, "pantheonrl.algos.modular.policies.ModularPolicy.state_dict"]], "to() (modularpolicy method)": [[29, "pantheonrl.algos.modular.policies.ModularPolicy.to"]], "to_empty() (modularpolicy method)": [[29, "pantheonrl.algos.modular.policies.ModularPolicy.to_empty"]], "train() (modularpolicy method)": [[29, "pantheonrl.algos.modular.policies.ModularPolicy.train"]], "type() (modularpolicy method)": [[29, "pantheonrl.algos.modular.policies.ModularPolicy.type"]], "unscale_action() (modularpolicy method)": [[29, "pantheonrl.algos.modular.policies.ModularPolicy.unscale_action"]], "xpu() (modularpolicy method)": [[29, "pantheonrl.algos.modular.policies.ModularPolicy.xpu"]], "zero_grad() (modularpolicy method)": [[29, "pantheonrl.algos.modular.policies.ModularPolicy.zero_grad"]], "pantheonrl.common": [[30, "module-pantheonrl.common"]], "pantheonrl.common.agents": [[31, "module-pantheonrl.common.agents"]], "agent (class in pantheonrl.common.agents)": [[32, "pantheonrl.common.agents.Agent"]], "get_action() (agent method)": [[32, "pantheonrl.common.agents.Agent.get_action"]], "update() (agent method)": [[32, "pantheonrl.common.agents.Agent.update"]], "dummyagent (class in pantheonrl.common.agents)": [[33, "pantheonrl.common.agents.DummyAgent"]], "get_action() (dummyagent method)": [[33, "pantheonrl.common.agents.DummyAgent.get_action"]], "update() (dummyagent method)": [[33, "pantheonrl.common.agents.DummyAgent.update"]], "offpolicyagent (class in pantheonrl.common.agents)": [[34, "pantheonrl.common.agents.OffPolicyAgent"]], "get_action() (offpolicyagent method)": [[34, "pantheonrl.common.agents.OffPolicyAgent.get_action"]], "update() (offpolicyagent method)": [[34, "pantheonrl.common.agents.OffPolicyAgent.update"]], "onpolicyagent (class in pantheonrl.common.agents)": [[35, "pantheonrl.common.agents.OnPolicyAgent"]], "get_action() (onpolicyagent method)": [[35, "pantheonrl.common.agents.OnPolicyAgent.get_action"]], "learn() (onpolicyagent method)": [[35, "pantheonrl.common.agents.OnPolicyAgent.learn"]], "update() (onpolicyagent method)": [[35, "pantheonrl.common.agents.OnPolicyAgent.update"]], "recordingagentwrapper (class in pantheonrl.common.agents)": [[36, "pantheonrl.common.agents.RecordingAgentWrapper"]], "get_action() (recordingagentwrapper method)": [[36, "pantheonrl.common.agents.RecordingAgentWrapper.get_action"]], "get_transitions() (recordingagentwrapper method)": [[36, "pantheonrl.common.agents.RecordingAgentWrapper.get_transitions"]], "update() (recordingagentwrapper method)": [[36, "pantheonrl.common.agents.RecordingAgentWrapper.update"]], "staticpolicyagent (class in pantheonrl.common.agents)": [[37, "pantheonrl.common.agents.StaticPolicyAgent"]], "get_action() (staticpolicyagent method)": [[37, "pantheonrl.common.agents.StaticPolicyAgent.get_action"]], "update() (staticpolicyagent method)": [[37, "pantheonrl.common.agents.StaticPolicyAgent.update"]], "pantheonrl.common.multiagentenv": [[38, "module-pantheonrl.common.multiagentenv"]], "dummyenv (class in pantheonrl.common.multiagentenv)": [[39, "pantheonrl.common.multiagentenv.DummyEnv"]], "close() (dummyenv method)": [[39, "pantheonrl.common.multiagentenv.DummyEnv.close"]], "get_wrapper_attr() (dummyenv method)": [[39, "pantheonrl.common.multiagentenv.DummyEnv.get_wrapper_attr"]], "np_random (dummyenv property)": [[39, "pantheonrl.common.multiagentenv.DummyEnv.np_random"]], "render() (dummyenv method)": [[39, "pantheonrl.common.multiagentenv.DummyEnv.render"]], "reset() (dummyenv method)": [[39, "pantheonrl.common.multiagentenv.DummyEnv.reset"]], "step() (dummyenv method)": [[39, "pantheonrl.common.multiagentenv.DummyEnv.step"]], "unwrapped (dummyenv property)": [[39, "pantheonrl.common.multiagentenv.DummyEnv.unwrapped"]], "killenvexception": [[40, "pantheonrl.common.multiagentenv.KillEnvException"]], "multiagentenv (class in pantheonrl.common.multiagentenv)": [[41, "pantheonrl.common.multiagentenv.MultiAgentEnv"]], "add_partner_agent() (multiagentenv method)": [[41, "pantheonrl.common.multiagentenv.MultiAgentEnv.add_partner_agent"]], "close() (multiagentenv method)": [[41, "pantheonrl.common.multiagentenv.MultiAgentEnv.close"]], "getdummyenv() (multiagentenv method)": [[41, "pantheonrl.common.multiagentenv.MultiAgentEnv.getDummyEnv"]], "get_wrapper_attr() (multiagentenv method)": [[41, "pantheonrl.common.multiagentenv.MultiAgentEnv.get_wrapper_attr"]], "n_reset() (multiagentenv method)": [[41, "pantheonrl.common.multiagentenv.MultiAgentEnv.n_reset"]], "n_step() (multiagentenv method)": [[41, "pantheonrl.common.multiagentenv.MultiAgentEnv.n_step"]], "np_random (multiagentenv property)": [[41, "pantheonrl.common.multiagentenv.MultiAgentEnv.np_random"]], "render() (multiagentenv method)": [[41, "pantheonrl.common.multiagentenv.MultiAgentEnv.render"]], "resample_random() (multiagentenv method)": [[41, "pantheonrl.common.multiagentenv.MultiAgentEnv.resample_random"]], "resample_round_robin() (multiagentenv method)": [[41, "pantheonrl.common.multiagentenv.MultiAgentEnv.resample_round_robin"]], "reset() (multiagentenv method)": [[41, "pantheonrl.common.multiagentenv.MultiAgentEnv.reset"]], "set_partnerid() (multiagentenv method)": [[41, "pantheonrl.common.multiagentenv.MultiAgentEnv.set_partnerid"]], "set_resample_policy() (multiagentenv method)": [[41, "pantheonrl.common.multiagentenv.MultiAgentEnv.set_resample_policy"]], "step() (multiagentenv method)": [[41, "pantheonrl.common.multiagentenv.MultiAgentEnv.step"]], "unwrapped (multiagentenv property)": [[41, "pantheonrl.common.multiagentenv.MultiAgentEnv.unwrapped"]], "playerexception": [[42, "pantheonrl.common.multiagentenv.PlayerException"]], "simultaneousenv (class in pantheonrl.common.multiagentenv)": [[43, "pantheonrl.common.multiagentenv.SimultaneousEnv"]], "add_partner_agent() (simultaneousenv method)": [[43, "pantheonrl.common.multiagentenv.SimultaneousEnv.add_partner_agent"]], "close() (simultaneousenv method)": [[43, "pantheonrl.common.multiagentenv.SimultaneousEnv.close"]], "getdummyenv() (simultaneousenv method)": [[43, "pantheonrl.common.multiagentenv.SimultaneousEnv.getDummyEnv"]], "get_wrapper_attr() (simultaneousenv method)": [[43, "pantheonrl.common.multiagentenv.SimultaneousEnv.get_wrapper_attr"]], "multi_reset() (simultaneousenv method)": [[43, "pantheonrl.common.multiagentenv.SimultaneousEnv.multi_reset"]], "multi_step() (simultaneousenv method)": [[43, "pantheonrl.common.multiagentenv.SimultaneousEnv.multi_step"]], "n_reset() (simultaneousenv method)": [[43, "pantheonrl.common.multiagentenv.SimultaneousEnv.n_reset"]], "n_step() (simultaneousenv method)": [[43, "pantheonrl.common.multiagentenv.SimultaneousEnv.n_step"]], "np_random (simultaneousenv property)": [[43, "pantheonrl.common.multiagentenv.SimultaneousEnv.np_random"]], "render() (simultaneousenv method)": [[43, "pantheonrl.common.multiagentenv.SimultaneousEnv.render"]], "resample_random() (simultaneousenv method)": [[43, "pantheonrl.common.multiagentenv.SimultaneousEnv.resample_random"]], "resample_round_robin() (simultaneousenv method)": [[43, "pantheonrl.common.multiagentenv.SimultaneousEnv.resample_round_robin"]], "reset() (simultaneousenv method)": [[43, "pantheonrl.common.multiagentenv.SimultaneousEnv.reset"]], "set_partnerid() (simultaneousenv method)": [[43, "pantheonrl.common.multiagentenv.SimultaneousEnv.set_partnerid"]], "set_resample_policy() (simultaneousenv method)": [[43, "pantheonrl.common.multiagentenv.SimultaneousEnv.set_resample_policy"]], "step() (simultaneousenv method)": [[43, "pantheonrl.common.multiagentenv.SimultaneousEnv.step"]], "unwrapped (simultaneousenv property)": [[43, "pantheonrl.common.multiagentenv.SimultaneousEnv.unwrapped"]], "turnbasedenv (class in pantheonrl.common.multiagentenv)": [[44, "pantheonrl.common.multiagentenv.TurnBasedEnv"]], "add_partner_agent() (turnbasedenv method)": [[44, "pantheonrl.common.multiagentenv.TurnBasedEnv.add_partner_agent"]], "alt_step() (turnbasedenv method)": [[44, "pantheonrl.common.multiagentenv.TurnBasedEnv.alt_step"]], "close() (turnbasedenv method)": [[44, "pantheonrl.common.multiagentenv.TurnBasedEnv.close"]], "ego_step() (turnbasedenv method)": [[44, "pantheonrl.common.multiagentenv.TurnBasedEnv.ego_step"]], "getdummyenv() (turnbasedenv method)": [[44, "pantheonrl.common.multiagentenv.TurnBasedEnv.getDummyEnv"]], "get_wrapper_attr() (turnbasedenv method)": [[44, "pantheonrl.common.multiagentenv.TurnBasedEnv.get_wrapper_attr"]], "multi_reset() (turnbasedenv method)": [[44, "pantheonrl.common.multiagentenv.TurnBasedEnv.multi_reset"]], "n_reset() (turnbasedenv method)": [[44, "pantheonrl.common.multiagentenv.TurnBasedEnv.n_reset"]], "n_step() (turnbasedenv method)": [[44, "pantheonrl.common.multiagentenv.TurnBasedEnv.n_step"]], "np_random (turnbasedenv property)": [[44, "pantheonrl.common.multiagentenv.TurnBasedEnv.np_random"]], "render() (turnbasedenv method)": [[44, "pantheonrl.common.multiagentenv.TurnBasedEnv.render"]], "resample_random() (turnbasedenv method)": [[44, "pantheonrl.common.multiagentenv.TurnBasedEnv.resample_random"]], "resample_round_robin() (turnbasedenv method)": [[44, "pantheonrl.common.multiagentenv.TurnBasedEnv.resample_round_robin"]], "reset() (turnbasedenv method)": [[44, "pantheonrl.common.multiagentenv.TurnBasedEnv.reset"]], "set_partnerid() (turnbasedenv method)": [[44, "pantheonrl.common.multiagentenv.TurnBasedEnv.set_partnerid"]], "set_resample_policy() (turnbasedenv method)": [[44, "pantheonrl.common.multiagentenv.TurnBasedEnv.set_resample_policy"]], "step() (turnbasedenv method)": [[44, "pantheonrl.common.multiagentenv.TurnBasedEnv.step"]], "unwrapped (turnbasedenv property)": [[44, "pantheonrl.common.multiagentenv.TurnBasedEnv.unwrapped"]], "pantheonrl.common.observation": [[45, "module-pantheonrl.common.observation"]], "observation (class in pantheonrl.common.observation)": [[46, "pantheonrl.common.observation.Observation"]], "extract_obs() (in module pantheonrl.common.observation)": [[47, "pantheonrl.common.observation.extract_obs"]], "extract_partial_obs() (in module pantheonrl.common.observation)": [[48, "pantheonrl.common.observation.extract_partial_obs"]], "pantheonrl.common.trajsaver": [[49, "module-pantheonrl.common.trajsaver"]], "multitransitions (class in pantheonrl.common.trajsaver)": [[50, "pantheonrl.common.trajsaver.MultiTransitions"]], "get_alt_transitions() (multitransitions method)": [[50, "pantheonrl.common.trajsaver.MultiTransitions.get_alt_transitions"]], "get_ego_transitions() (multitransitions method)": [[50, "pantheonrl.common.trajsaver.MultiTransitions.get_ego_transitions"]], "simultaneoustransitions (class in pantheonrl.common.trajsaver)": [[51, "pantheonrl.common.trajsaver.SimultaneousTransitions"]], "get_alt_transitions() (simultaneoustransitions method)": [[51, "pantheonrl.common.trajsaver.SimultaneousTransitions.get_alt_transitions"]], "get_ego_transitions() (simultaneoustransitions method)": [[51, "pantheonrl.common.trajsaver.SimultaneousTransitions.get_ego_transitions"]], "transitionsminimal (class in pantheonrl.common.trajsaver)": [[52, "pantheonrl.common.trajsaver.TransitionsMinimal"]], "acts (transitionsminimal attribute)": [[52, "pantheonrl.common.trajsaver.TransitionsMinimal.acts"]], "obs (transitionsminimal attribute)": [[52, "pantheonrl.common.trajsaver.TransitionsMinimal.obs"]], "turnbasedtransitions (class in pantheonrl.common.trajsaver)": [[53, "pantheonrl.common.trajsaver.TurnBasedTransitions"]], "get_alt_transitions() (turnbasedtransitions method)": [[53, "pantheonrl.common.trajsaver.TurnBasedTransitions.get_alt_transitions"]], "get_ego_transitions() (turnbasedtransitions method)": [[53, "pantheonrl.common.trajsaver.TurnBasedTransitions.get_ego_transitions"]], "dataclass_quick_asdict() (in module pantheonrl.common.trajsaver)": [[54, "pantheonrl.common.trajsaver.dataclass_quick_asdict"]], "transitions_collate_fn() (in module pantheonrl.common.trajsaver)": [[55, "pantheonrl.common.trajsaver.transitions_collate_fn"]], "pantheonrl.common.util": [[56, "module-pantheonrl.common.util"]], "feedforward32policy (class in pantheonrl.common.util)": [[57, "pantheonrl.common.util.FeedForward32Policy"]], "__call__() (feedforward32policy method)": [[57, "pantheonrl.common.util.FeedForward32Policy.__call__"]], "add_module() (feedforward32policy method)": [[57, "pantheonrl.common.util.FeedForward32Policy.add_module"]], "apply() (feedforward32policy method)": [[57, "pantheonrl.common.util.FeedForward32Policy.apply"]], "bfloat16() (feedforward32policy method)": [[57, "pantheonrl.common.util.FeedForward32Policy.bfloat16"]], "buffers() (feedforward32policy method)": [[57, "pantheonrl.common.util.FeedForward32Policy.buffers"]], "children() (feedforward32policy method)": [[57, "pantheonrl.common.util.FeedForward32Policy.children"]], "cpu() (feedforward32policy method)": [[57, "pantheonrl.common.util.FeedForward32Policy.cpu"]], "cuda() (feedforward32policy method)": [[57, "pantheonrl.common.util.FeedForward32Policy.cuda"]], "device (feedforward32policy property)": [[57, "pantheonrl.common.util.FeedForward32Policy.device"]], "double() (feedforward32policy method)": [[57, "pantheonrl.common.util.FeedForward32Policy.double"]], "eval() (feedforward32policy method)": [[57, "pantheonrl.common.util.FeedForward32Policy.eval"]], "evaluate_actions() (feedforward32policy method)": [[57, "pantheonrl.common.util.FeedForward32Policy.evaluate_actions"]], "extra_repr() (feedforward32policy method)": [[57, "pantheonrl.common.util.FeedForward32Policy.extra_repr"]], "extract_features() (feedforward32policy method)": [[57, "pantheonrl.common.util.FeedForward32Policy.extract_features"]], "float() (feedforward32policy method)": [[57, "pantheonrl.common.util.FeedForward32Policy.float"]], "forward() (feedforward32policy method)": [[57, "pantheonrl.common.util.FeedForward32Policy.forward"]], "get_buffer() (feedforward32policy method)": [[57, "pantheonrl.common.util.FeedForward32Policy.get_buffer"]], "get_distribution() (feedforward32policy method)": [[57, "pantheonrl.common.util.FeedForward32Policy.get_distribution"]], "get_extra_state() (feedforward32policy method)": [[57, "pantheonrl.common.util.FeedForward32Policy.get_extra_state"]], "get_parameter() (feedforward32policy method)": [[57, "pantheonrl.common.util.FeedForward32Policy.get_parameter"]], "get_submodule() (feedforward32policy method)": [[57, "pantheonrl.common.util.FeedForward32Policy.get_submodule"]], "half() (feedforward32policy method)": [[57, "pantheonrl.common.util.FeedForward32Policy.half"]], "init_weights() (feedforward32policy static method)": [[57, "pantheonrl.common.util.FeedForward32Policy.init_weights"]], "ipu() (feedforward32policy method)": [[57, "pantheonrl.common.util.FeedForward32Policy.ipu"]], "is_vectorized_observation() (feedforward32policy method)": [[57, "pantheonrl.common.util.FeedForward32Policy.is_vectorized_observation"]], "load() (feedforward32policy class method)": [[57, "pantheonrl.common.util.FeedForward32Policy.load"]], "load_from_vector() (feedforward32policy method)": [[57, "pantheonrl.common.util.FeedForward32Policy.load_from_vector"]], "load_state_dict() (feedforward32policy method)": [[57, "pantheonrl.common.util.FeedForward32Policy.load_state_dict"]], "make_features_extractor() (feedforward32policy method)": [[57, "pantheonrl.common.util.FeedForward32Policy.make_features_extractor"]], "modules() (feedforward32policy method)": [[57, "pantheonrl.common.util.FeedForward32Policy.modules"]], "named_buffers() (feedforward32policy method)": [[57, "pantheonrl.common.util.FeedForward32Policy.named_buffers"]], "named_children() (feedforward32policy method)": [[57, "pantheonrl.common.util.FeedForward32Policy.named_children"]], "named_modules() (feedforward32policy method)": [[57, "pantheonrl.common.util.FeedForward32Policy.named_modules"]], "named_parameters() (feedforward32policy method)": [[57, "pantheonrl.common.util.FeedForward32Policy.named_parameters"]], "obs_to_tensor() (feedforward32policy method)": [[57, "pantheonrl.common.util.FeedForward32Policy.obs_to_tensor"]], "parameters() (feedforward32policy method)": [[57, "pantheonrl.common.util.FeedForward32Policy.parameters"]], "parameters_to_vector() (feedforward32policy method)": [[57, "pantheonrl.common.util.FeedForward32Policy.parameters_to_vector"]], "predict() (feedforward32policy method)": [[57, "pantheonrl.common.util.FeedForward32Policy.predict"]], "predict_values() (feedforward32policy method)": [[57, "pantheonrl.common.util.FeedForward32Policy.predict_values"]], "register_backward_hook() (feedforward32policy method)": [[57, "pantheonrl.common.util.FeedForward32Policy.register_backward_hook"]], "register_buffer() (feedforward32policy method)": [[57, "pantheonrl.common.util.FeedForward32Policy.register_buffer"]], "register_forward_hook() (feedforward32policy method)": [[57, "pantheonrl.common.util.FeedForward32Policy.register_forward_hook"]], "register_forward_pre_hook() (feedforward32policy method)": [[57, "pantheonrl.common.util.FeedForward32Policy.register_forward_pre_hook"]], "register_full_backward_hook() (feedforward32policy method)": [[57, "pantheonrl.common.util.FeedForward32Policy.register_full_backward_hook"]], "register_full_backward_pre_hook() (feedforward32policy method)": [[57, "pantheonrl.common.util.FeedForward32Policy.register_full_backward_pre_hook"]], "register_load_state_dict_post_hook() (feedforward32policy method)": [[57, "pantheonrl.common.util.FeedForward32Policy.register_load_state_dict_post_hook"]], "register_module() (feedforward32policy method)": [[57, "pantheonrl.common.util.FeedForward32Policy.register_module"]], "register_parameter() (feedforward32policy method)": [[57, "pantheonrl.common.util.FeedForward32Policy.register_parameter"]], "register_state_dict_pre_hook() (feedforward32policy method)": [[57, "pantheonrl.common.util.FeedForward32Policy.register_state_dict_pre_hook"]], "requires_grad_() (feedforward32policy method)": [[57, "pantheonrl.common.util.FeedForward32Policy.requires_grad_"]], "reset_noise() (feedforward32policy method)": [[57, "pantheonrl.common.util.FeedForward32Policy.reset_noise"]], "save() (feedforward32policy method)": [[57, "pantheonrl.common.util.FeedForward32Policy.save"]], "scale_action() (feedforward32policy method)": [[57, "pantheonrl.common.util.FeedForward32Policy.scale_action"]], "set_extra_state() (feedforward32policy method)": [[57, "pantheonrl.common.util.FeedForward32Policy.set_extra_state"]], "set_training_mode() (feedforward32policy method)": [[57, "pantheonrl.common.util.FeedForward32Policy.set_training_mode"]], "share_memory() (feedforward32policy method)": [[57, "pantheonrl.common.util.FeedForward32Policy.share_memory"]], "squash_output (feedforward32policy property)": [[57, "pantheonrl.common.util.FeedForward32Policy.squash_output"]], "state_dict() (feedforward32policy method)": [[57, "pantheonrl.common.util.FeedForward32Policy.state_dict"]], "to() (feedforward32policy method)": [[57, "pantheonrl.common.util.FeedForward32Policy.to"]], "to_empty() (feedforward32policy method)": [[57, "pantheonrl.common.util.FeedForward32Policy.to_empty"]], "train() (feedforward32policy method)": [[57, "pantheonrl.common.util.FeedForward32Policy.train"]], "type() (feedforward32policy method)": [[57, "pantheonrl.common.util.FeedForward32Policy.type"]], "unscale_action() (feedforward32policy method)": [[57, "pantheonrl.common.util.FeedForward32Policy.unscale_action"]], "xpu() (feedforward32policy method)": [[57, "pantheonrl.common.util.FeedForward32Policy.xpu"]], "zero_grad() (feedforward32policy method)": [[57, "pantheonrl.common.util.FeedForward32Policy.zero_grad"]], "spaceexception": [[58, "pantheonrl.common.util.SpaceException"]], "action_from_policy() (in module pantheonrl.common.util)": [[59, "pantheonrl.common.util.action_from_policy"]], "calculate_space() (in module pantheonrl.common.util)": [[60, "pantheonrl.common.util.calculate_space"]], "clip_actions() (in module pantheonrl.common.util)": [[61, "pantheonrl.common.util.clip_actions"]], "get_default_obs() (in module pantheonrl.common.util)": [[62, "pantheonrl.common.util.get_default_obs"]], "get_space_size() (in module pantheonrl.common.util)": [[63, "pantheonrl.common.util.get_space_size"]], "resample_noise() (in module pantheonrl.common.util)": [[64, "pantheonrl.common.util.resample_noise"]], "pantheonrl.common.wrappers": [[65, "module-pantheonrl.common.wrappers"]], "historyqueue (class in pantheonrl.common.wrappers)": [[66, "pantheonrl.common.wrappers.HistoryQueue"]], "add() (historyqueue method)": [[66, "pantheonrl.common.wrappers.HistoryQueue.add"]], "reset() (historyqueue method)": [[66, "pantheonrl.common.wrappers.HistoryQueue.reset"]], "multirecorder (class in pantheonrl.common.wrappers)": [[67, "pantheonrl.common.wrappers.MultiRecorder"]], "get_transitions() (multirecorder method)": [[67, "pantheonrl.common.wrappers.MultiRecorder.get_transitions"]], "simultaneousframestack (class in pantheonrl.common.wrappers)": [[68, "pantheonrl.common.wrappers.SimultaneousFrameStack"]], "add_partner_agent() (simultaneousframestack method)": [[68, "pantheonrl.common.wrappers.SimultaneousFrameStack.add_partner_agent"]], "close() (simultaneousframestack method)": [[68, "pantheonrl.common.wrappers.SimultaneousFrameStack.close"]], "getdummyenv() (simultaneousframestack method)": [[68, "pantheonrl.common.wrappers.SimultaneousFrameStack.getDummyEnv"]], "get_wrapper_attr() (simultaneousframestack method)": [[68, "pantheonrl.common.wrappers.SimultaneousFrameStack.get_wrapper_attr"]], "multi_reset() (simultaneousframestack method)": [[68, "pantheonrl.common.wrappers.SimultaneousFrameStack.multi_reset"]], "multi_step() (simultaneousframestack method)": [[68, "pantheonrl.common.wrappers.SimultaneousFrameStack.multi_step"]], "n_reset() (simultaneousframestack method)": [[68, "pantheonrl.common.wrappers.SimultaneousFrameStack.n_reset"]], "n_step() (simultaneousframestack method)": [[68, "pantheonrl.common.wrappers.SimultaneousFrameStack.n_step"]], "np_random (simultaneousframestack property)": [[68, "pantheonrl.common.wrappers.SimultaneousFrameStack.np_random"]], "render() (simultaneousframestack method)": [[68, "pantheonrl.common.wrappers.SimultaneousFrameStack.render"]], "resample_random() (simultaneousframestack method)": [[68, "pantheonrl.common.wrappers.SimultaneousFrameStack.resample_random"]], "resample_round_robin() (simultaneousframestack method)": [[68, "pantheonrl.common.wrappers.SimultaneousFrameStack.resample_round_robin"]], "reset() (simultaneousframestack method)": [[68, "pantheonrl.common.wrappers.SimultaneousFrameStack.reset"]], "set_partnerid() (simultaneousframestack method)": [[68, "pantheonrl.common.wrappers.SimultaneousFrameStack.set_partnerid"]], "set_resample_policy() (simultaneousframestack method)": [[68, "pantheonrl.common.wrappers.SimultaneousFrameStack.set_resample_policy"]], "step() (simultaneousframestack method)": [[68, "pantheonrl.common.wrappers.SimultaneousFrameStack.step"]], "unwrapped (simultaneousframestack property)": [[68, "pantheonrl.common.wrappers.SimultaneousFrameStack.unwrapped"]], "simultaneousrecorder (class in pantheonrl.common.wrappers)": [[69, "pantheonrl.common.wrappers.SimultaneousRecorder"]], "add_partner_agent() (simultaneousrecorder method)": [[69, "pantheonrl.common.wrappers.SimultaneousRecorder.add_partner_agent"]], "close() (simultaneousrecorder method)": [[69, "pantheonrl.common.wrappers.SimultaneousRecorder.close"]], "getdummyenv() (simultaneousrecorder method)": [[69, "pantheonrl.common.wrappers.SimultaneousRecorder.getDummyEnv"]], "get_transitions() (simultaneousrecorder method)": [[69, "pantheonrl.common.wrappers.SimultaneousRecorder.get_transitions"]], "get_wrapper_attr() (simultaneousrecorder method)": [[69, "pantheonrl.common.wrappers.SimultaneousRecorder.get_wrapper_attr"]], "multi_reset() (simultaneousrecorder method)": [[69, "pantheonrl.common.wrappers.SimultaneousRecorder.multi_reset"]], "multi_step() (simultaneousrecorder method)": [[69, "pantheonrl.common.wrappers.SimultaneousRecorder.multi_step"]], "n_reset() (simultaneousrecorder method)": [[69, "pantheonrl.common.wrappers.SimultaneousRecorder.n_reset"]], "n_step() (simultaneousrecorder method)": [[69, "pantheonrl.common.wrappers.SimultaneousRecorder.n_step"]], "np_random (simultaneousrecorder property)": [[69, "pantheonrl.common.wrappers.SimultaneousRecorder.np_random"]], "render() (simultaneousrecorder method)": [[69, "pantheonrl.common.wrappers.SimultaneousRecorder.render"]], "resample_random() (simultaneousrecorder method)": [[69, "pantheonrl.common.wrappers.SimultaneousRecorder.resample_random"]], "resample_round_robin() (simultaneousrecorder method)": [[69, "pantheonrl.common.wrappers.SimultaneousRecorder.resample_round_robin"]], "reset() (simultaneousrecorder method)": [[69, "pantheonrl.common.wrappers.SimultaneousRecorder.reset"]], "set_partnerid() (simultaneousrecorder method)": [[69, "pantheonrl.common.wrappers.SimultaneousRecorder.set_partnerid"]], "set_resample_policy() (simultaneousrecorder method)": [[69, "pantheonrl.common.wrappers.SimultaneousRecorder.set_resample_policy"]], "step() (simultaneousrecorder method)": [[69, "pantheonrl.common.wrappers.SimultaneousRecorder.step"]], "unwrapped (simultaneousrecorder property)": [[69, "pantheonrl.common.wrappers.SimultaneousRecorder.unwrapped"]], "turnbasedframestack (class in pantheonrl.common.wrappers)": [[70, "pantheonrl.common.wrappers.TurnBasedFrameStack"]], "add_partner_agent() (turnbasedframestack method)": [[70, "pantheonrl.common.wrappers.TurnBasedFrameStack.add_partner_agent"]], "alt_step() (turnbasedframestack method)": [[70, "pantheonrl.common.wrappers.TurnBasedFrameStack.alt_step"]], "close() (turnbasedframestack method)": [[70, "pantheonrl.common.wrappers.TurnBasedFrameStack.close"]], "ego_step() (turnbasedframestack method)": [[70, "pantheonrl.common.wrappers.TurnBasedFrameStack.ego_step"]], "getdummyenv() (turnbasedframestack method)": [[70, "pantheonrl.common.wrappers.TurnBasedFrameStack.getDummyEnv"]], "get_wrapper_attr() (turnbasedframestack method)": [[70, "pantheonrl.common.wrappers.TurnBasedFrameStack.get_wrapper_attr"]], "multi_reset() (turnbasedframestack method)": [[70, "pantheonrl.common.wrappers.TurnBasedFrameStack.multi_reset"]], "n_reset() (turnbasedframestack method)": [[70, "pantheonrl.common.wrappers.TurnBasedFrameStack.n_reset"]], "n_step() (turnbasedframestack method)": [[70, "pantheonrl.common.wrappers.TurnBasedFrameStack.n_step"]], "np_random (turnbasedframestack property)": [[70, "pantheonrl.common.wrappers.TurnBasedFrameStack.np_random"]], "render() (turnbasedframestack method)": [[70, "pantheonrl.common.wrappers.TurnBasedFrameStack.render"]], "resample_random() (turnbasedframestack method)": [[70, "pantheonrl.common.wrappers.TurnBasedFrameStack.resample_random"]], "resample_round_robin() (turnbasedframestack method)": [[70, "pantheonrl.common.wrappers.TurnBasedFrameStack.resample_round_robin"]], "reset() (turnbasedframestack method)": [[70, "pantheonrl.common.wrappers.TurnBasedFrameStack.reset"]], "set_partnerid() (turnbasedframestack method)": [[70, "pantheonrl.common.wrappers.TurnBasedFrameStack.set_partnerid"]], "set_resample_policy() (turnbasedframestack method)": [[70, "pantheonrl.common.wrappers.TurnBasedFrameStack.set_resample_policy"]], "step() (turnbasedframestack method)": [[70, "pantheonrl.common.wrappers.TurnBasedFrameStack.step"]], "unwrapped (turnbasedframestack property)": [[70, "pantheonrl.common.wrappers.TurnBasedFrameStack.unwrapped"]], "turnbasedrecorder (class in pantheonrl.common.wrappers)": [[71, "pantheonrl.common.wrappers.TurnBasedRecorder"]], "add_partner_agent() (turnbasedrecorder method)": [[71, "pantheonrl.common.wrappers.TurnBasedRecorder.add_partner_agent"]], "alt_step() (turnbasedrecorder method)": [[71, "pantheonrl.common.wrappers.TurnBasedRecorder.alt_step"]], "close() (turnbasedrecorder method)": [[71, "pantheonrl.common.wrappers.TurnBasedRecorder.close"]], "ego_step() (turnbasedrecorder method)": [[71, "pantheonrl.common.wrappers.TurnBasedRecorder.ego_step"]], "getdummyenv() (turnbasedrecorder method)": [[71, "pantheonrl.common.wrappers.TurnBasedRecorder.getDummyEnv"]], "get_transitions() (turnbasedrecorder method)": [[71, "pantheonrl.common.wrappers.TurnBasedRecorder.get_transitions"]], "get_wrapper_attr() (turnbasedrecorder method)": [[71, "pantheonrl.common.wrappers.TurnBasedRecorder.get_wrapper_attr"]], "multi_reset() (turnbasedrecorder method)": [[71, "pantheonrl.common.wrappers.TurnBasedRecorder.multi_reset"]], "n_reset() (turnbasedrecorder method)": [[71, "pantheonrl.common.wrappers.TurnBasedRecorder.n_reset"]], "n_step() (turnbasedrecorder method)": [[71, "pantheonrl.common.wrappers.TurnBasedRecorder.n_step"]], "np_random (turnbasedrecorder property)": [[71, "pantheonrl.common.wrappers.TurnBasedRecorder.np_random"]], "render() (turnbasedrecorder method)": [[71, "pantheonrl.common.wrappers.TurnBasedRecorder.render"]], "resample_random() (turnbasedrecorder method)": [[71, "pantheonrl.common.wrappers.TurnBasedRecorder.resample_random"]], "resample_round_robin() (turnbasedrecorder method)": [[71, "pantheonrl.common.wrappers.TurnBasedRecorder.resample_round_robin"]], "reset() (turnbasedrecorder method)": [[71, "pantheonrl.common.wrappers.TurnBasedRecorder.reset"]], "set_partnerid() (turnbasedrecorder method)": [[71, "pantheonrl.common.wrappers.TurnBasedRecorder.set_partnerid"]], "set_resample_policy() (turnbasedrecorder method)": [[71, "pantheonrl.common.wrappers.TurnBasedRecorder.set_resample_policy"]], "step() (turnbasedrecorder method)": [[71, "pantheonrl.common.wrappers.TurnBasedRecorder.step"]], "unwrapped (turnbasedrecorder property)": [[71, "pantheonrl.common.wrappers.TurnBasedRecorder.unwrapped"]], "frame_wrap() (in module pantheonrl.common.wrappers)": [[72, "pantheonrl.common.wrappers.frame_wrap"]], "recorder_wrap() (in module pantheonrl.common.wrappers)": [[73, "pantheonrl.common.wrappers.recorder_wrap"]], "pantheonrl.envs": [[74, "module-pantheonrl.envs"]], "pantheonrl.envs.blockworldgym": [[75, "module-pantheonrl.envs.blockworldgym"]], "pantheonrl.envs.blockworldgym.blockworld": [[76, "module-pantheonrl.envs.blockworldgym.blockworld"]], "blockenv (class in pantheonrl.envs.blockworldgym.blockworld)": [[77, "pantheonrl.envs.blockworldgym.blockworld.BlockEnv"]], "add_partner_agent() (blockenv method)": [[77, "pantheonrl.envs.blockworldgym.blockworld.BlockEnv.add_partner_agent"]], "alt_step() (blockenv method)": [[77, "pantheonrl.envs.blockworldgym.blockworld.BlockEnv.alt_step"]], "close() (blockenv method)": [[77, "pantheonrl.envs.blockworldgym.blockworld.BlockEnv.close"]], "ego_step() (blockenv method)": [[77, "pantheonrl.envs.blockworldgym.blockworld.BlockEnv.ego_step"]], "getdummyenv() (blockenv method)": [[77, "pantheonrl.envs.blockworldgym.blockworld.BlockEnv.getDummyEnv"]], "get_wrapper_attr() (blockenv method)": [[77, "pantheonrl.envs.blockworldgym.blockworld.BlockEnv.get_wrapper_attr"]], "multi_reset() (blockenv method)": [[77, "pantheonrl.envs.blockworldgym.blockworld.BlockEnv.multi_reset"]], "n_reset() (blockenv method)": [[77, "pantheonrl.envs.blockworldgym.blockworld.BlockEnv.n_reset"]], "n_step() (blockenv method)": [[77, "pantheonrl.envs.blockworldgym.blockworld.BlockEnv.n_step"]], "np_random (blockenv property)": [[77, "pantheonrl.envs.blockworldgym.blockworld.BlockEnv.np_random"]], "render() (blockenv method)": [[77, "pantheonrl.envs.blockworldgym.blockworld.BlockEnv.render"]], "resample_random() (blockenv method)": [[77, "pantheonrl.envs.blockworldgym.blockworld.BlockEnv.resample_random"]], "resample_round_robin() (blockenv method)": [[77, "pantheonrl.envs.blockworldgym.blockworld.BlockEnv.resample_round_robin"]], "reset() (blockenv method)": [[77, "pantheonrl.envs.blockworldgym.blockworld.BlockEnv.reset"]], "set_partnerid() (blockenv method)": [[77, "pantheonrl.envs.blockworldgym.blockworld.BlockEnv.set_partnerid"]], "set_resample_policy() (blockenv method)": [[77, "pantheonrl.envs.blockworldgym.blockworld.BlockEnv.set_resample_policy"]], "step() (blockenv method)": [[77, "pantheonrl.envs.blockworldgym.blockworld.BlockEnv.step"]], "unwrapped (blockenv property)": [[77, "pantheonrl.envs.blockworldgym.blockworld.BlockEnv.unwrapped"]], "defaultconstructoragent (class in pantheonrl.envs.blockworldgym.blockworld)": [[78, "pantheonrl.envs.blockworldgym.blockworld.DefaultConstructorAgent"]], "get_action() (defaultconstructoragent method)": [[78, "pantheonrl.envs.blockworldgym.blockworld.DefaultConstructorAgent.get_action"]], "update() (defaultconstructoragent method)": [[78, "pantheonrl.envs.blockworldgym.blockworld.DefaultConstructorAgent.update"]], "pantheonrl.envs.blockworldgym.gridutils": [[79, "module-pantheonrl.envs.blockworldgym.gridutils"]], "drop_random() (in module pantheonrl.envs.blockworldgym.gridutils)": [[80, "pantheonrl.envs.blockworldgym.gridutils.drop_random"]], "generate_random_world() (in module pantheonrl.envs.blockworldgym.gridutils)": [[81, "pantheonrl.envs.blockworldgym.gridutils.generate_random_world"]], "gravity() (in module pantheonrl.envs.blockworldgym.gridutils)": [[82, "pantheonrl.envs.blockworldgym.gridutils.gravity"]], "matches() (in module pantheonrl.envs.blockworldgym.gridutils)": [[83, "pantheonrl.envs.blockworldgym.gridutils.matches"]], "place() (in module pantheonrl.envs.blockworldgym.gridutils)": [[84, "pantheonrl.envs.blockworldgym.gridutils.place"]], "pantheonrl.envs.blockworldgym.rendering": [[85, "module-pantheonrl.envs.blockworldgym.rendering"]], "attr (class in pantheonrl.envs.blockworldgym.rendering)": [[86, "pantheonrl.envs.blockworldgym.rendering.Attr"]], "color (class in pantheonrl.envs.blockworldgym.rendering)": [[87, "pantheonrl.envs.blockworldgym.rendering.Color"]], "compound (class in pantheonrl.envs.blockworldgym.rendering)": [[88, "pantheonrl.envs.blockworldgym.rendering.Compound"]], "filledpolygon (class in pantheonrl.envs.blockworldgym.rendering)": [[89, "pantheonrl.envs.blockworldgym.rendering.FilledPolygon"]], "geom (class in pantheonrl.envs.blockworldgym.rendering)": [[90, "pantheonrl.envs.blockworldgym.rendering.Geom"]], "image (class in pantheonrl.envs.blockworldgym.rendering)": [[91, "pantheonrl.envs.blockworldgym.rendering.Image"]], "line (class in pantheonrl.envs.blockworldgym.rendering)": [[92, "pantheonrl.envs.blockworldgym.rendering.Line"]], "linestyle (class in pantheonrl.envs.blockworldgym.rendering)": [[93, "pantheonrl.envs.blockworldgym.rendering.LineStyle"]], "linewidth (class in pantheonrl.envs.blockworldgym.rendering)": [[94, "pantheonrl.envs.blockworldgym.rendering.LineWidth"]], "point (class in pantheonrl.envs.blockworldgym.rendering)": [[95, "pantheonrl.envs.blockworldgym.rendering.Point"]], "polyline (class in pantheonrl.envs.blockworldgym.rendering)": [[96, "pantheonrl.envs.blockworldgym.rendering.PolyLine"]], "simpleimageviewer (class in pantheonrl.envs.blockworldgym.rendering)": [[97, "pantheonrl.envs.blockworldgym.rendering.SimpleImageViewer"]], "transform (class in pantheonrl.envs.blockworldgym.rendering)": [[98, "pantheonrl.envs.blockworldgym.rendering.Transform"]], "viewer (class in pantheonrl.envs.blockworldgym.rendering)": [[99, "pantheonrl.envs.blockworldgym.rendering.Viewer"]], "get_display() (in module pantheonrl.envs.blockworldgym.rendering)": [[100, "pantheonrl.envs.blockworldgym.rendering.get_display"]], "get_window() (in module pantheonrl.envs.blockworldgym.rendering)": [[101, "pantheonrl.envs.blockworldgym.rendering.get_window"]], "make_capsule() (in module pantheonrl.envs.blockworldgym.rendering)": [[102, "pantheonrl.envs.blockworldgym.rendering.make_capsule"]], "make_circle() (in module pantheonrl.envs.blockworldgym.rendering)": [[103, "pantheonrl.envs.blockworldgym.rendering.make_circle"]], "make_polygon() (in module pantheonrl.envs.blockworldgym.rendering)": [[104, "pantheonrl.envs.blockworldgym.rendering.make_polygon"]], "make_polyline() (in module pantheonrl.envs.blockworldgym.rendering)": [[105, "pantheonrl.envs.blockworldgym.rendering.make_polyline"]], "pantheonrl.envs.blockworldgym.simpleblockworld": [[106, "module-pantheonrl.envs.blockworldgym.simpleblockworld"]], "sbwdefaultagent (class in pantheonrl.envs.blockworldgym.simpleblockworld)": [[107, "pantheonrl.envs.blockworldgym.simpleblockworld.SBWDefaultAgent"]], "get_action() (sbwdefaultagent method)": [[107, "pantheonrl.envs.blockworldgym.simpleblockworld.SBWDefaultAgent.get_action"]], "update() (sbwdefaultagent method)": [[107, "pantheonrl.envs.blockworldgym.simpleblockworld.SBWDefaultAgent.update"]], "sbweasypartner (class in pantheonrl.envs.blockworldgym.simpleblockworld)": [[108, "pantheonrl.envs.blockworldgym.simpleblockworld.SBWEasyPartner"]], "get_action() (sbweasypartner method)": [[108, "pantheonrl.envs.blockworldgym.simpleblockworld.SBWEasyPartner.get_action"]], "update() (sbweasypartner method)": [[108, "pantheonrl.envs.blockworldgym.simpleblockworld.SBWEasyPartner.update"]], "simpleblockenv (class in pantheonrl.envs.blockworldgym.simpleblockworld)": [[109, "pantheonrl.envs.blockworldgym.simpleblockworld.SimpleBlockEnv"]], "add_partner_agent() (simpleblockenv method)": [[109, "pantheonrl.envs.blockworldgym.simpleblockworld.SimpleBlockEnv.add_partner_agent"]], "alt_step() (simpleblockenv method)": [[109, "pantheonrl.envs.blockworldgym.simpleblockworld.SimpleBlockEnv.alt_step"]], "close() (simpleblockenv method)": [[109, "pantheonrl.envs.blockworldgym.simpleblockworld.SimpleBlockEnv.close"]], "ego_step() (simpleblockenv method)": [[109, "pantheonrl.envs.blockworldgym.simpleblockworld.SimpleBlockEnv.ego_step"]], "getdummyenv() (simpleblockenv method)": [[109, "pantheonrl.envs.blockworldgym.simpleblockworld.SimpleBlockEnv.getDummyEnv"]], "get_wrapper_attr() (simpleblockenv method)": [[109, "pantheonrl.envs.blockworldgym.simpleblockworld.SimpleBlockEnv.get_wrapper_attr"]], "multi_reset() (simpleblockenv method)": [[109, "pantheonrl.envs.blockworldgym.simpleblockworld.SimpleBlockEnv.multi_reset"]], "n_reset() (simpleblockenv method)": [[109, "pantheonrl.envs.blockworldgym.simpleblockworld.SimpleBlockEnv.n_reset"]], "n_step() (simpleblockenv method)": [[109, "pantheonrl.envs.blockworldgym.simpleblockworld.SimpleBlockEnv.n_step"]], "np_random (simpleblockenv property)": [[109, "pantheonrl.envs.blockworldgym.simpleblockworld.SimpleBlockEnv.np_random"]], "render() (simpleblockenv method)": [[109, "pantheonrl.envs.blockworldgym.simpleblockworld.SimpleBlockEnv.render"]], "resample_random() (simpleblockenv method)": [[109, "pantheonrl.envs.blockworldgym.simpleblockworld.SimpleBlockEnv.resample_random"]], "resample_round_robin() (simpleblockenv method)": [[109, "pantheonrl.envs.blockworldgym.simpleblockworld.SimpleBlockEnv.resample_round_robin"]], "reset() (simpleblockenv method)": [[109, "pantheonrl.envs.blockworldgym.simpleblockworld.SimpleBlockEnv.reset"]], "set_partnerid() (simpleblockenv method)": [[109, "pantheonrl.envs.blockworldgym.simpleblockworld.SimpleBlockEnv.set_partnerid"]], "set_resample_policy() (simpleblockenv method)": [[109, "pantheonrl.envs.blockworldgym.simpleblockworld.SimpleBlockEnv.set_resample_policy"]], "step() (simpleblockenv method)": [[109, "pantheonrl.envs.blockworldgym.simpleblockworld.SimpleBlockEnv.step"]], "unwrapped (simpleblockenv property)": [[109, "pantheonrl.envs.blockworldgym.simpleblockworld.SimpleBlockEnv.unwrapped"]], "generate_grid_world() (in module pantheonrl.envs.blockworldgym.simpleblockworld)": [[110, "pantheonrl.envs.blockworldgym.simpleblockworld.generate_grid_world"]], "random_block() (in module pantheonrl.envs.blockworldgym.simpleblockworld)": [[111, "pantheonrl.envs.blockworldgym.simpleblockworld.random_block"]], "pantheonrl.envs.liargym": [[112, "module-pantheonrl.envs.liargym"]], "pantheonrl.envs.liargym.liar": [[113, "module-pantheonrl.envs.liargym.liar"]], "liardefaultagent (class in pantheonrl.envs.liargym.liar)": [[114, "pantheonrl.envs.liargym.liar.LiarDefaultAgent"]], "get_action() (liardefaultagent method)": [[114, "pantheonrl.envs.liargym.liar.LiarDefaultAgent.get_action"]], "update() (liardefaultagent method)": [[114, "pantheonrl.envs.liargym.liar.LiarDefaultAgent.update"]], "liarenv (class in pantheonrl.envs.liargym.liar)": [[115, "pantheonrl.envs.liargym.liar.LiarEnv"]], "add_partner_agent() (liarenv method)": [[115, "pantheonrl.envs.liargym.liar.LiarEnv.add_partner_agent"]], "alt_step() (liarenv method)": [[115, "pantheonrl.envs.liargym.liar.LiarEnv.alt_step"]], "close() (liarenv method)": [[115, "pantheonrl.envs.liargym.liar.LiarEnv.close"]], "ego_step() (liarenv method)": [[115, "pantheonrl.envs.liargym.liar.LiarEnv.ego_step"]], "getdummyenv() (liarenv method)": [[115, "pantheonrl.envs.liargym.liar.LiarEnv.getDummyEnv"]], "get_wrapper_attr() (liarenv method)": [[115, "pantheonrl.envs.liargym.liar.LiarEnv.get_wrapper_attr"]], "multi_reset() (liarenv method)": [[115, "pantheonrl.envs.liargym.liar.LiarEnv.multi_reset"]], "n_reset() (liarenv method)": [[115, "pantheonrl.envs.liargym.liar.LiarEnv.n_reset"]], "n_step() (liarenv method)": [[115, "pantheonrl.envs.liargym.liar.LiarEnv.n_step"]], "np_random (liarenv property)": [[115, "pantheonrl.envs.liargym.liar.LiarEnv.np_random"]], "render() (liarenv method)": [[115, "pantheonrl.envs.liargym.liar.LiarEnv.render"]], "resample_random() (liarenv method)": [[115, "pantheonrl.envs.liargym.liar.LiarEnv.resample_random"]], "resample_round_robin() (liarenv method)": [[115, "pantheonrl.envs.liargym.liar.LiarEnv.resample_round_robin"]], "reset() (liarenv method)": [[115, "pantheonrl.envs.liargym.liar.LiarEnv.reset"]], "set_partnerid() (liarenv method)": [[115, "pantheonrl.envs.liargym.liar.LiarEnv.set_partnerid"]], "set_resample_policy() (liarenv method)": [[115, "pantheonrl.envs.liargym.liar.LiarEnv.set_resample_policy"]], "step() (liarenv method)": [[115, "pantheonrl.envs.liargym.liar.LiarEnv.step"]], "unwrapped (liarenv property)": [[115, "pantheonrl.envs.liargym.liar.LiarEnv.unwrapped"]], "randroll() (in module pantheonrl.envs.liargym.liar)": [[116, "pantheonrl.envs.liargym.liar.randRoll"]], "pantheonrl.envs.pettingzoo": [[117, "module-pantheonrl.envs.pettingzoo"]], "pettingzooaecwrapper (class in pantheonrl.envs.pettingzoo)": [[118, "pantheonrl.envs.pettingzoo.PettingZooAECWrapper"]], "add_partner_agent() (pettingzooaecwrapper method)": [[118, "pantheonrl.envs.pettingzoo.PettingZooAECWrapper.add_partner_agent"]], "close() (pettingzooaecwrapper method)": [[118, "pantheonrl.envs.pettingzoo.PettingZooAECWrapper.close"]], "getdummyenv() (pettingzooaecwrapper method)": [[118, "pantheonrl.envs.pettingzoo.PettingZooAECWrapper.getDummyEnv"]], "get_wrapper_attr() (pettingzooaecwrapper method)": [[118, "pantheonrl.envs.pettingzoo.PettingZooAECWrapper.get_wrapper_attr"]], "n_reset() (pettingzooaecwrapper method)": [[118, "pantheonrl.envs.pettingzoo.PettingZooAECWrapper.n_reset"]], "n_step() (pettingzooaecwrapper method)": [[118, "pantheonrl.envs.pettingzoo.PettingZooAECWrapper.n_step"]], "np_random (pettingzooaecwrapper property)": [[118, "pantheonrl.envs.pettingzoo.PettingZooAECWrapper.np_random"]], "render() (pettingzooaecwrapper method)": [[118, "pantheonrl.envs.pettingzoo.PettingZooAECWrapper.render"]], "resample_random() (pettingzooaecwrapper method)": [[118, "pantheonrl.envs.pettingzoo.PettingZooAECWrapper.resample_random"]], "resample_round_robin() (pettingzooaecwrapper method)": [[118, "pantheonrl.envs.pettingzoo.PettingZooAECWrapper.resample_round_robin"]], "reset() (pettingzooaecwrapper method)": [[118, "pantheonrl.envs.pettingzoo.PettingZooAECWrapper.reset"]], "set_partnerid() (pettingzooaecwrapper method)": [[118, "pantheonrl.envs.pettingzoo.PettingZooAECWrapper.set_partnerid"]], "set_resample_policy() (pettingzooaecwrapper method)": [[118, "pantheonrl.envs.pettingzoo.PettingZooAECWrapper.set_resample_policy"]], "step() (pettingzooaecwrapper method)": [[118, "pantheonrl.envs.pettingzoo.PettingZooAECWrapper.step"]], "unwrapped (pettingzooaecwrapper property)": [[118, "pantheonrl.envs.pettingzoo.PettingZooAECWrapper.unwrapped"]], "pantheonrl.envs.rpsgym": [[119, "module-pantheonrl.envs.rpsgym"]], "pantheonrl.envs.rpsgym.rps": [[120, "module-pantheonrl.envs.rpsgym.rps"]], "rpsenv (class in pantheonrl.envs.rpsgym.rps)": [[121, "pantheonrl.envs.rpsgym.rps.RPSEnv"]], "add_partner_agent() (rpsenv method)": [[121, "pantheonrl.envs.rpsgym.rps.RPSEnv.add_partner_agent"]], "close() (rpsenv method)": [[121, "pantheonrl.envs.rpsgym.rps.RPSEnv.close"]], "getdummyenv() (rpsenv method)": [[121, "pantheonrl.envs.rpsgym.rps.RPSEnv.getDummyEnv"]], "get_wrapper_attr() (rpsenv method)": [[121, "pantheonrl.envs.rpsgym.rps.RPSEnv.get_wrapper_attr"]], "multi_reset() (rpsenv method)": [[121, "pantheonrl.envs.rpsgym.rps.RPSEnv.multi_reset"]], "multi_step() (rpsenv method)": [[121, "pantheonrl.envs.rpsgym.rps.RPSEnv.multi_step"]], "n_reset() (rpsenv method)": [[121, "pantheonrl.envs.rpsgym.rps.RPSEnv.n_reset"]], "n_step() (rpsenv method)": [[121, "pantheonrl.envs.rpsgym.rps.RPSEnv.n_step"]], "np_random (rpsenv property)": [[121, "pantheonrl.envs.rpsgym.rps.RPSEnv.np_random"]], "render() (rpsenv method)": [[121, "pantheonrl.envs.rpsgym.rps.RPSEnv.render"]], "resample_random() (rpsenv method)": [[121, "pantheonrl.envs.rpsgym.rps.RPSEnv.resample_random"]], "resample_round_robin() (rpsenv method)": [[121, "pantheonrl.envs.rpsgym.rps.RPSEnv.resample_round_robin"]], "reset() (rpsenv method)": [[121, "pantheonrl.envs.rpsgym.rps.RPSEnv.reset"]], "set_partnerid() (rpsenv method)": [[121, "pantheonrl.envs.rpsgym.rps.RPSEnv.set_partnerid"]], "set_resample_policy() (rpsenv method)": [[121, "pantheonrl.envs.rpsgym.rps.RPSEnv.set_resample_policy"]], "step() (rpsenv method)": [[121, "pantheonrl.envs.rpsgym.rps.RPSEnv.step"]], "unwrapped (rpsenv property)": [[121, "pantheonrl.envs.rpsgym.rps.RPSEnv.unwrapped"]], "rpsweightedagent (class in pantheonrl.envs.rpsgym.rps)": [[122, "pantheonrl.envs.rpsgym.rps.RPSWeightedAgent"]], "get_action() (rpsweightedagent method)": [[122, "pantheonrl.envs.rpsgym.rps.RPSWeightedAgent.get_action"]], "update() (rpsweightedagent method)": [[122, "pantheonrl.envs.rpsgym.rps.RPSWeightedAgent.update"]]}})